[{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright c 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sfcheung.github.io/semfindr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Shu Fai Cheung  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. semptools Copyright (C) 2019 Shu Fai Cheung This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sfcheung.github.io/semfindr/articles/casewise_scores.html","id":"using-scores-to-approximate-case-influence","dir":"Articles","previous_headings":"","what":"Using Scores to Approximate Case Influence","title":"Approximate Case Influence Using Scores and Casewise Likelihood","text":"lavaan provides handy lavScores() function evaluate \\[s_i(\\theta_m) = \\frac{\\partial \\ell_i(\\theta_m)}{\\partial \\theta_m}\\] observation \\(\\), \\(\\ell_i(\\theta)\\) denotes casewise loglikelihood function \\(\\theta_m\\) \\(m\\)th model parameter. example, indicates partial derivative casewise loglikelihod respect parameter m1~iv1. sum partial derivatives across observations zero maximum likelihood estimate full sample (\\(\\hat \\theta_m\\); .e., derivative loglikelihood full data 0), \\(- s_i(\\theta_m)\\) can used estimate partial derivative loglikelihood \\(\\hat \\theta_m\\) sample without observation \\(\\). information can used approximate maximum likelihood estimate \\(\\theta_m\\) case \\(\\) dropped, denoted \\(\\hat \\theta_{m(-)}\\) second-order Taylor series expansion can used approximate parameter vector estimate observation deleted, \\(\\hat \\theta_{(-)}\\), iterative Newton’s method. Specifically, \\[\\hat \\theta_{()} \\approx \\hat \\theta - \\frac{N}{N - 1}V(\\hat \\theta) \\nabla \\ell(\\hat \\theta)\\] \\[\\hat \\theta - \\hat \\theta_{()} \\approx \\frac{N}{N - 1}V(\\hat \\theta) \\nabla \\ell_i(\\hat \\theta),\\] \\(\\nabla \\ell_i(\\hat \\theta)\\) gradient vector casewise loglikelihood respect parameters (.e., score). \\(N / (N - 1)\\) term used adjust decrease sample size (adjustment trivial large samples). procedure equation (4) Tanaka et al. (1991) (p. 3807) related one-step approximation described Cook Weisberg (1982) (p. 182).","code":"head(lavScores(fit)[ , 1, drop = FALSE]) #>           m1~iv1 #> [1,]  0.23975993 #> [2,]  0.06630118 #> [3,] -0.33999129 #> [4,] -0.22536120 #> [5,]  0.61375747 #> [6,]  0.03747179"},{"path":"https://sfcheung.github.io/semfindr/articles/casewise_scores.html","id":"comparison","dir":"Articles","previous_headings":"Using Scores to Approximate Case Influence","what":"Comparison","title":"Approximate Case Influence Using Scores and Casewise Likelihood","text":"approximation implemented est_change_raw_approx() function: comparison approximation using semfindr::est_change_raw_approx() semfindr::est_change_raw()  results pretty similar.","code":"fit_est_change_approx <- est_change_raw_approx(fit) fit_est_change_approx #>  #> -- Approximate Case Influence on Parameter Estimates -- #>  #>    id m1~iv1  id m1~iv2 id  dv~m1  id m1~~m1 id dv~~dv #> 1  51  0.042  43 -0.025 65  0.037  61  0.042 16  0.106 #> 2  43 -0.040  94  0.023 11 -0.027  85  0.040  9  0.050 #> 3  34 -0.032 100 -0.022 16 -0.024 100  0.037 76  0.049 #> 4  18 -0.028  85  0.021 32 -0.020  18  0.031 25  0.049 #> 5  13  0.028  20  0.020 99  0.020  42  0.028 91  0.043 #> 6  32 -0.025  32  0.019 79  0.018  43  0.025 17  0.039 #> 7  20 -0.024  65  0.019 93  0.018  32  0.023 26  0.028 #> 8  75  0.021  34 -0.018 22  0.017  34  0.022 65  0.027 #> 9  42 -0.020  64 -0.016 61 -0.016  40  0.022 62  0.027 #> 10 68  0.018  52  0.016 25 -0.015  20  0.022 90  0.024 #>  #> Note: #> - Changes are approximate raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by the absolute changes for each variable. # From semfindr fit_est_change_raw <- est_change_raw(fit_rerun) # Plot the differences library(ggplot2) tmp1 <- as.vector(t(as.matrix(fit_est_change_raw))) tmp2 <- as.vector(t(as.matrix(fit_est_change_approx))) est_change_df <- data.frame(param = rep(colnames(fit_est_change_raw),                                         nrow(fit_est_change_raw)),                              est_change = tmp1,                              est_change_approx = tmp2) ggplot(est_change_df, aes(x = est_change, y = est_change_approx)) +   geom_abline(intercept = 0, slope = 1) +   geom_point(size = 0.8, alpha = 0.5) +   facet_wrap(~ param) +   coord_fixed()"},{"path":"https://sfcheung.github.io/semfindr/articles/casewise_scores.html","id":"generalized-cooks-distance-gcd","dir":"Articles","previous_headings":"Using Scores to Approximate Case Influence","what":"Generalized Cook’s distance (gCD)","title":"Approximate Case Influence Using Scores and Casewise Likelihood","text":"can use approximate parameter changes approximate gCD (see also Tanaka et al., 1991, equation 13, p. 3811): implemented est_change_approx() function:  approximation tend underestimate actual gCD rank ordering almost identical. discussed also Tanaka et al. (1991), proposed correction applying one-step approximation correction (currently implemented due need recompute scores updated parameter values).","code":"# Information matrix (Hessian) information_fit <- lavInspect(fit, what = \"information\") # Short cut for computing quadratic form (https://stackoverflow.com/questions/27157127/efficient-way-of-calculating-quadratic-forms-avoid-for-loops) gcd_approx <- (nobs(fit) - 1) * rowSums(   (fit_est_change_approx %*% information_fit) * fit_est_change_approx ) fit_est_change_approx <- est_change_approx(fit) fit_est_change_approx #>  #> -- Approximate Standardized Case Influence on Parameter Estimates -- #>  #>     m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv gcd_approx #> 16   0.052 -0.038 -0.228 -0.006  0.572      0.372 #> 43  -0.387 -0.249 -0.135  0.201  0.116      0.270 #> 65   0.150  0.189  0.355  0.071  0.148      0.203 #> 85  -0.170  0.211 -0.118  0.315 -0.054      0.187 #> 51   0.405 -0.052  0.094  0.075 -0.046      0.179 #> 34  -0.306 -0.186 -0.110  0.176  0.028      0.163 #> 32  -0.241  0.190 -0.189  0.181 -0.002      0.161 #> 20  -0.234  0.199 -0.140  0.172 -0.034      0.144 #> 18  -0.269  0.035  0.101  0.246 -0.048      0.143 #> 100 -0.001 -0.221 -0.069  0.290 -0.058      0.137 #>  #> Note: #> - Changes are approximate standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by approximate generalized Cook's distance. # Compare to exact computation fit_est_change <- est_change(fit_rerun) # Plot gcd_df <- data.frame(   gcd_exact = fit_est_change[ , \"gcd\"],   gcd_approx = fit_est_change_approx[ , \"gcd_approx\"] ) ggplot(gcd_df, aes(x = gcd_exact, y = gcd_approx)) +   geom_abline(intercept = 0, slope = 1) +   geom_point() +   coord_fixed() cor(gcd_df, method = \"spearman\") #>            gcd_exact gcd_approx #> gcd_exact   1.000000   0.999892 #> gcd_approx  0.999892   1.000000"},{"path":"https://sfcheung.github.io/semfindr/articles/casewise_scores.html","id":"approximate-change-in-fit","dir":"Articles","previous_headings":"","what":"Approximate Change in Fit","title":"Approximate Case Influence Using Scores and Casewise Likelihood","text":"casewise loglikelihood—contribution likelihood function observation—can computed lavaan, approximates change loglikelihood observation deleted: , \\(\\ell(\\hat \\theta)\\) drop 2.78 observation 1 deleted. approximate \\(\\ell(\\hat \\theta_{(-)})\\) long \\(\\hat \\theta_{(-)}\\) different \\(\\hat \\theta\\). ’s comparison: pretty close. approximate change \\(\\chi^2\\), well \\(\\chi^2\\)-based fit indices, can use fit_measures_change_approx() function:","code":"lli <- lavInspect(fit, what = \"loglik.casewise\") head(lli) #> [1] -2.776787 -2.034084 -2.154825 -2.248100 -2.793426 -2.049238 # Predicted ll without observation 1 fit@loglik$loglik - lli[1] #> [1] -289.8272 # Actual ll without observation 1 fit_no1 <- sem(mod, dat[-1, ]) fit_no1@loglik$loglik #> [1] -289.8156 chisq_i_approx <- fit_measures_change_approx(fit) # Compare to the actual chisq when dropping observation 1 c(predict = chisq_i_approx[1, \"chisq\"] + fitmeasures(fit, \"chisq\"),   actual = fitmeasures(fit_no1, \"chisq\")) #> predict.chisq  actual.chisq  #>      6.871042      6.557397"},{"path":"https://sfcheung.github.io/semfindr/articles/casewise_scores.html","id":"comparing-exact-and-approximate-changes-in-fit-indices","dir":"Articles","previous_headings":"Approximate Change in Fit","what":"Comparing exact and approximate changes in fit indices","title":"Approximate Case Influence Using Scores and Casewise Likelihood","text":"Change \\(\\chi^2\\)  Change RMSEA  values aligned reasonably well along 45-degree line.","code":"# Exact measure from semfindr out <- fit_measures_change(fit_rerun) # Plot chisq_change_df <- data.frame(   chisq_change = out[ , \"chisq\"],   chisq_change_approx = chisq_i_approx[ , \"chisq\"] ) ggplot(chisq_change_df, aes(x = chisq_change, y = chisq_change_approx)) +   geom_abline(intercept = 0, slope = 1) +   geom_point() +   coord_fixed() # Plot rmsea_change_df <- data.frame(   rmsea_change = out[ , \"rmsea\"],   rmsea_change_approx = chisq_i_approx[ , \"rmsea\"] ) ggplot(rmsea_change_df, aes(x = rmsea_change, y = rmsea_change_approx)) +   geom_abline(intercept = 0, slope = 1) +   geom_point() +   coord_fixed()"},{"path":"https://sfcheung.github.io/semfindr/articles/casewise_scores.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Approximate Case Influence Using Scores and Casewise Likelihood","text":"approximate approach tested models fitted maximum likelihood (ML) normal theory standard errors (default). approximate approach yet support multilevel models. lavaan object checked approx_check() see supported. , error raised.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/casewise_scores.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Approximate Case Influence Using Scores and Casewise Likelihood","text":"Cook, R. D., & Weisberg, S. (1982). Residuals influence regression. New York: Chapman Hall. https://conservancy.umn.edu/handle/11299/37076 Tanaka, Y., Watadani, S., & Ho Moon, S. (1991). Influence covariance structure analysis: application confirmatory factor analysis. Communications Statistics - Theory Methods, 20(12), 3805–3821. https://doi.org/10.1080/03610929108830742","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"Sensitivity Analysis in Multiple-Group Models","text":"article illustrates identify influential cases multiple-group model using semfindr package . article assumes readers learned use main functions single-group models (See vignette(\"semfindr\", package = \"semfindr\")).","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"dataset-and-models","dir":"Articles","previous_headings":"","what":"Dataset and Models","title":"Sensitivity Analysis in Multiple-Group Models","text":"sample dataset cfa_dat_mg semfindr used illustration: dataset six variables, x1 x6. variable gp denotes group case, values \"GroupA\" \"GroupB\". group 50 cases total number cases 100. use assessing measurement invariance scenario, based tutorial multiple-group models official website lavaan. Three confirmatory factor analytic (CFA) models fitted. defined following model syntax: first model -group constraints. tests configural invariance. second model tests weak invariance, factor loadings constrained equal across groups: third model tests strong invariance, factor loadings item intercepts constrained equal across groups: three models compared lavaan::lavTestLRT(): tests reject strong invariance weak invariance. fit measures three models: Although strong invariance rejected, configural invariance weak invariance model satisfactory fit. Interestingly, restrictive model, strong invariance model, best fit. model chi-square significant.","code":"library(semfindr) data(cfa_dat_mg) head(cfa_dat_mg) ##           x1          x2         x3         x4          x5         x6     gp ## 1 -1.2690938 -1.32550591 -0.6285011 -0.7215738 -2.81187575 -0.8436144 GroupA ## 2 -0.0304962  0.05275281  1.1867437 -0.5193213 -1.92131327 -0.1802093 GroupA ## 3 -1.0134542 -0.05071220 -0.7482927 -1.0483134  0.98383479 -0.1672748 GroupA ## 4  0.1647769 -1.75609084 -1.6568902 -0.8036030 -2.14339421 -0.5066695 GroupA ## 5  1.9583190  2.25384865  0.4972562  1.3103522  0.36280304  0.9186370 GroupA ## 6 -1.2487913 -1.48482257 -0.7739649  0.8942307 -0.03870106  0.0403398 GroupA table(cfa_dat_mg$gp) ##  ## GroupA GroupB  ##     50     50 mod <- \" f1 =~ x1 + x2 + x3 f2 =~ x4 + x5 + x6 \" library(lavaan) ## This is lavaan 0.6-17 ## lavaan is FREE software! Please report any bugs. fit_config <- cfa(mod, cfa_dat_mg,                   group = \"gp\") fit_weak <- cfa(mod, cfa_dat_mg,                 group = \"gp\",                 group.equal = \"loadings\") fit_strong <- cfa(mod, cfa_dat_mg,                   group = \"gp\",                   group.equal = c(\"loadings\", \"intercepts\")) lavTestLRT(fit_config, fit_weak, fit_strong) ##  ## Chi-Squared Difference Test ##  ##            Df    AIC    BIC  Chisq Chisq diff RMSEA Df diff Pr(>Chisq) ## fit_config 16 1878.3 1977.3 30.454                                     ## fit_weak   20 1871.7 1960.3 31.904      1.450     0       4     0.8355 ## fit_strong 24 1866.2 1944.3 34.357      2.453     0       4     0.6531 lavTestLRT(fit_config, fit_strong) ##  ## Chi-Squared Difference Test ##  ##            Df    AIC    BIC  Chisq Chisq diff RMSEA Df diff Pr(>Chisq) ## fit_config 16 1878.3 1977.3 30.454                                     ## fit_strong 24 1866.2 1944.3 34.357      3.903     0       8     0.8658 fm <- c(\"chisq\", \"pvalue\", \"cfi\", \"tli\", \"rmsea\") round(data.frame(configural = fitMeasures(fit_config, fm),                  weak = fitMeasures(fit_weak, fm),                  strong = fitMeasures(fit_strong, fm)), 3) ##        configural   weak strong ## chisq      30.454 31.904 34.357 ## pvalue      0.016  0.044  0.079 ## cfi         0.867  0.891  0.905 ## tli         0.751  0.836  0.881 ## rmsea       0.134  0.109  0.093"},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"influential-cases","dir":"Articles","previous_headings":"","what":"Influential Cases","title":"Sensitivity Analysis in Multiple-Group Models","text":"Despite fit measures, still good practice check whether influential cases. Let’s start configural invariance model.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"leave-one-out-by-lavaan_rerun","dir":"Articles","previous_headings":"Influential Cases > Configural Invariance Model","what":"Leave-One-Out by lavaan_rerun()","title":"Sensitivity Analysis in Multiple-Group Models","text":"leave-one-approach used illustration configural invariance model, fit_config. simple model 100 cases, use parallel processing. model fitted 100 times, time one case removed: shown , possible model may fail converge inadmissible solutions removed. especially case models constraints. function report cases leading nonconvergence inadmissible solutions. Influence measures computed cases.","code":"rerun_config <- lavaan_rerun(fit_config) ## The expected CPU time is 13 second(s). ## Could be faster if run in parallel."},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"all-in-one-influence_stat","dir":"Articles","previous_headings":"Influential Cases > Configural Invariance Model","what":"All-In-One: influence_stat()","title":"Sensitivity Analysis in Multiple-Group Models","text":"preliminary assessment, can just influence_stat() compute commonly used measures case influence (Pek & MacCallum, 2011), well Mahalanobis distance (Mahalanobis, 1936), using output lavaan_rerun(): output can used functions examine specific aspects case influence.","code":"inf_config <- influence_stat(rerun_config)"},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"mahalanobis-distance","dir":"Articles","previous_headings":"Influential Cases > Configural Invariance Model","what":"Mahalanobis Distance","title":"Sensitivity Analysis in Multiple-Group Models","text":"model CFA model observed variables endogenous, acceptable examine Mahalanobis distance first (see print.influence_stat() options available printing output influence_stat()). multiple-group models, Mahalanobis distance case computed using mean covariance matrix group case belongs . can visualize values using md_plot()  Cases 77 100 high Mahalanobis distance. However, differences cases substantially large.","code":"print(inf_config,       what = \"mahalanobis\",       first = 5) ##  ## -- Mahalanobis Distance -- ##  ##         md ## 77  16.349 ## 100 16.275 ## 12  13.784 ## 41  12.666 ## 55  11.285 ##  ## Note: ## - Only the first 5 case(s) is/are displayed. Set 'first' to NULL to display all cases. ## - Cases sorted by Mahalanobis distance in decreasing order. md_plot(inf_config,         largest_md = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"case-influence-on-fit-measures","dir":"Articles","previous_headings":"Influential Cases > Configural Invariance Model","what":"Case Influence on Fit Measures","title":"Sensitivity Analysis in Multiple-Group Models","text":"examine case influence fit measures, sorted model chi-squares: Case 100 relatively large influence model chi-square.","code":"print(inf_config,       what = \"fit_measures\",       first = 5,       sort_fit_measures_by = \"chisq\") ##  ## -- Case Influence on Fit Measures -- ##  ##      chisq    cfi  rmsea    tli ## 100  5.359 -0.042  0.027 -0.080 ## 74   3.193 -0.029  0.015 -0.054 ## 7   -2.919  0.020 -0.014  0.038 ## 96   2.800 -0.025  0.013 -0.047 ## 89  -2.395  0.019 -0.011  0.036 ##  ## Note: ## - Only the first 5 case(s) is/are displayed. Set 'first' to NULL to display all cases. ## - Cases sorted by chisq in decreasing order on absolute values."},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"case-influence-on-parameter-estimates","dir":"Articles","previous_headings":"Influential Cases > Configural Invariance Model","what":"Case Influence on Parameter Estimates","title":"Sensitivity Analysis in Multiple-Group Models","text":"Last, assess casewise influence parameter estimates setting \"parameters\". printed, default, cases sorted generalized Cook’s distance (Cook, 1977): can also visualize generalized Cook’s distance using gcd_plot():  generalized Cook’s distance suggests Case 100 strong influence parameter estimates. affects parameter estimates GroupB GroupB model -group equality constraints. can visualize three aspects one plot using gcd_gof_md_plot():  Case 100 stands others three aspects considered together. assess case influence factor loadings GroupB model, can use est_change(). \"=~.GroupB\" denotes factor loadings GroupB (see pars_id() select parameters): value generalized Cook’s distance smaller Case 100 influence factor loadings computed. However, difference values cases much larger. can visualized using gcd_plot():","code":"print(inf_config,       what = \"parameters\",       first = 5) ##  ## -- Standardized Case Influence on Parameter Estimates -- ##  ##     f1=~x2 f1=~x3 f2=~x5 f2=~x6 x1~~x1 x2~~x2 x3~~x3 x4~~x4 x5~~x5 x6~~x6 ## 100  0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000 ## 77   0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000 ## 55   0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000 ## 12  -0.124 -0.035 -0.365 -0.202 -0.011  0.010 -0.092 -0.231  1.230  0.191 ## 22   0.479  0.501  0.005  0.410  0.352 -0.243 -0.247  0.449 -0.032 -0.591 ##     f1~~f1 f2~~f2 f1~~f2  x1~1  x2~1  x3~1   x4~1   x5~1   x6~1 f1=~x2.g2 ## 100  0.000  0.000  0.000 0.000 0.000 0.000  0.000  0.000  0.000    -0.742 ## 77   0.000  0.000  0.000 0.000 0.000 0.000  0.000  0.000  0.000     0.365 ## 55   0.000  0.000  0.000 0.000 0.000 0.000  0.000  0.000  0.000     0.618 ## 12   0.073  0.150  0.063 0.188 0.042 0.098 -0.074  0.443 -0.116     0.000 ## 22  -0.225 -0.148 -0.729 0.152 0.252 0.241 -0.280 -0.022 -0.098     0.000 ##     f1=~x3.g2 f2=~x5.g2 f2=~x6.g2 x1~~x1.g2 x2~~x2.g2 x3~~x3.g2 x4~~x4.g2 ## 100     0.432    -0.566     0.487    -0.231     0.706     0.526    -0.202 ## 77     -0.432     0.061     0.248    -0.090     0.863     0.085     0.074 ## 55      0.762     0.233     0.293     1.315    -0.028    -0.162     0.158 ## 12      0.000     0.000     0.000     0.000     0.000     0.000     0.000 ## 22      0.000     0.000     0.000     0.000     0.000     0.000     0.000 ##     x5~~x5.g2 x6~~x6.g2 f1~~f1.g2 f2~~f2.g2 f1~~f2.g2 x1~1.g2 x2~1.g2 x3~1.g2 ## 100     0.450     0.606     0.367     0.258     0.511   0.242  -0.053   0.527 ## 77     -0.070    -0.047     0.532    -0.134     0.151   0.340   0.563   0.073 ## 55     -0.083    -0.192    -0.781    -0.081    -0.345   0.198  -0.164  -0.159 ## 12      0.000     0.000     0.000     0.000     0.000   0.000   0.000   0.000 ## 22      0.000     0.000     0.000     0.000     0.000   0.000   0.000   0.000 ##     x4~1.g2 x5~1.g2 x6~1.g2   gcd ## 100   0.196  -0.019   0.474 4.198 ## 77    0.053   0.050   0.188 2.742 ## 55   -0.176  -0.196  -0.134 2.351 ## 12    0.000   0.000   0.000 2.188 ## 22    0.000   0.000   0.000 1.838 ##  ## Note: ## - Changes are standardized raw changes if a case is included. ## - Only the first 5 case(s) is/are displayed. Set 'first' to NULL to display all cases. ## - Cases sorted by generalized Cook's distance. gcd_plot(inf_config,          largest_gcd = 3) gcd_gof_md_plot(inf_config,                 fit_measure = \"chisq\",                 circle_size = 15,                 largest_gcd = 3,                 largest_md = 3,                 largest_fit_measure = 3) est_change_group <- est_change(rerun_config,                                parameters = c(\"=~.GroupB\")) print(est_change_group,       first = 5) ##  ## -- Standardized Case Influence on Parameter Estimates -- ##  ##     f1=~x2.g2 f1=~x3.g2 f2=~x5.g2 f2=~x6.g2   gcd ## 100    -0.742     0.432    -0.566     0.487 2.074 ## 55      0.618     0.762     0.233     0.293 0.828 ## 77      0.365    -0.432     0.061     0.248 0.592 ## 61      0.023    -0.263     0.099    -0.495 0.415 ## 73     -0.412    -0.046    -0.441    -0.288 0.403 ##  ## Note: ## - Changes are standardized raw changes if a case is included. ## - Only the first 5 case(s) is/are displayed. Set 'first' to NULL to display all cases. ## - Cases sorted by generalized Cook's distance. gcd_plot(est_change_group)"},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"is-mahalanobis-distance-enough","dir":"Articles","previous_headings":"Influential Cases > Configural Invariance Model","what":"Is Mahalanobis Distance Enough?","title":"Sensitivity Analysis in Multiple-Group Models","text":"Note example illustrates case extreme necessarily case influential. Case 100 influential case highest Mahalanobis distance. Admittedly, Mahalanobis distance reflect potential influential. However, models, models regression paths (e.g., path model), influential case may extreme case. Therefore, enough examine Mahalanobis distance.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"weak-invariance-model-and-strong-invariance-model","dir":"Articles","previous_headings":"Influential Cases","what":"Weak Invariance Model and Strong Invariance Model","title":"Sensitivity Analysis in Multiple-Group Models","text":"steps can repeated two models. shown brevity.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"fit-the-models-again-without-the-potential-influential-case","dir":"Articles","previous_headings":"","what":"Fit the Models Again Without The Potential Influential Case","title":"Sensitivity Analysis in Multiple-Group Models","text":"Let us fit three models , without Case 100. Strong invariance still rejected Case 100 removed. Case 100 removed, three models fit satisfactorily, model chi-squares significant. can check case influence : brevity, examine plots:    Although still cases large generalized Cook’s distance, cases stand others, compared analysis Case 100.","code":"cfa_dat_mg_no100 <- cfa_dat_mg[-100, ] fit_config_no100 <- cfa(mod, cfa_dat_mg_no100,                         group = \"gp\") fit_weak_no100 <- cfa(mod, cfa_dat_mg_no100,                       group = \"gp\",                       group.equal = \"loadings\") fit_strong_no100 <- cfa(mod, cfa_dat_mg_no100,                         group = \"gp\",                         group.equal = c(\"loadings\", \"intercepts\")) lavTestLRT(fit_config_no100, fit_weak_no100, fit_strong_no100) ##  ## Chi-Squared Difference Test ##  ##                  Df    AIC    BIC  Chisq Chisq diff RMSEA Df diff Pr(>Chisq) ## fit_config_no100 16 1840.5 1939.1 25.095                                     ## fit_weak_no100   20 1834.0 1922.3 26.657     1.5616     0       4     0.8157 ## fit_strong_no100 24 1828.4 1906.3 29.031     2.3739     0       4     0.6673 lavTestLRT(fit_config_no100, fit_strong_no100) ##  ## Chi-Squared Difference Test ##  ##                  Df    AIC    BIC  Chisq Chisq diff RMSEA Df diff Pr(>Chisq) ## fit_config_no100 16 1840.5 1939.1 25.095                                     ## fit_strong_no100 24 1828.4 1906.3 29.031     3.9355     0       8     0.8629 fm <- c(\"chisq\", \"pvalue\", \"cfi\", \"tli\", \"rmsea\") round(data.frame(configural = fitMeasures(fit_config_no100, fm),                  weak = fitMeasures(fit_weak_no100, fm),                  strong = fitMeasures(fit_strong_no100, fm)), 3) ##        configural   weak strong ## chisq      25.095 26.657 29.031 ## pvalue      0.068  0.145  0.219 ## cfi         0.910  0.934  0.950 ## tli         0.831  0.901  0.938 ## rmsea       0.107  0.082  0.065 rerun_config_no100 <- lavaan_rerun(fit_config_no100) ## The expected CPU time is 8.51 second(s). ## Could be faster if run in parallel. inf_config_no100 <- influence_stat(rerun_config_no100) md_plot(inf_config_no100,         largest_md = 3) gcd_plot(inf_config_no100,          largest_gcd = 3) gcd_gof_md_plot(inf_config_no100,                 fit_measure = \"chisq\",                 circle_size = 15,                 largest_gcd = 3,                 largest_md = 3,                 largest_fit_measure = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/multiple_group.html","id":"final-remarks","dir":"Articles","previous_headings":"","what":"Final Remarks","title":"Sensitivity Analysis in Multiple-Group Models","text":"Note sample dataset artificially created. Case 100 inserted illustrate workflow use functions. real datasets, usually simple sensitivity analysis due complexity noise real data. Nevertheless, still possible cases easily identifiable. example, case may influential due computation error reporting error. Moreover, real datasets, one influential cases identified, examination information necessary deciding . example dataset artificial. real datasets, please see Aguinis et al. (2013).","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/articles/selecting_cases.html","id":"row-numbers-or-case-ids","dir":"Articles","previous_headings":"","what":"Row Numbers or Case IDs","title":"Selecting Cases In lavaan_rerun","text":"Suppose, reasons, users want refit model selected rows removed. example, rows 1, 4, 15, 18 selected. can done using argument to_rerun lavaan_rerun(): four reruns output: user supplied case IDs used, value to_rerun vector case IDs: four reruns output. User supplied case IDs used output:","code":"rerun_out <- lavaan_rerun(fit,                           to_rerun = c(1, 4, 15, 18)) #> The expected CPU time is 0.35 second(s). #> Could be faster if run in parallel. rerun_out #> === lavaan_rerun Output === #> Call: #> lavaan_rerun(fit = fit, to_rerun = c(1, 4, 15, 18)) #> Number of reruns: 4 #> Number of reruns that converged (solution found): 4 #> Number of reruns that failed to converge (solution not found): 0 #> Number of reruns that passed post.check of lavaan: 4 #> Number of reruns that failed post.check of lavaan: 0 #> Number of reruns that both converged and passed post.check: 4 #> Number of reruns that either did not converge or failed post.check: 0 est_change(rerun_out) #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>    iv1~~iv2 m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv iv1~~iv1 iv2~~iv2   gcd #> 18   -0.023 -0.273  0.035  0.101  0.260 -0.046    0.043   -0.067 0.163 #> 15    0.008  0.001  0.003 -0.009 -0.070 -0.061   -0.070   -0.058 0.017 #> 4     0.006 -0.024 -0.003  0.022 -0.051 -0.044   -0.056   -0.070 0.014 #> 1    -0.013  0.024 -0.030  0.052 -0.037  0.017   -0.061   -0.056 0.013 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance. rerun_out <- lavaan_rerun(fit,                           case_id = dat$id,                           to_rerun = c(\"case1\",                                        \"case4\",                                        \"case15\",                                        \"case18\")) #> The expected CPU time is 0.35 second(s). #> Could be faster if run in parallel. rerun_out #> === lavaan_rerun Output === #> Call: #> lavaan_rerun(fit = fit, case_id = dat$id, to_rerun = c(\"case1\",  #>     \"case4\", \"case15\", \"case18\")) #> Number of reruns: 4 #> Number of reruns that converged (solution found): 4 #> Number of reruns that failed to converge (solution not found): 0 #> Number of reruns that passed post.check of lavaan: 4 #> Number of reruns that failed post.check of lavaan: 0 #> Number of reruns that both converged and passed post.check: 4 #> Number of reruns that either did not converge or failed post.check: 0 est_change(rerun_out) #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>        iv1~~iv2 m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv iv1~~iv1 iv2~~iv2   gcd #> case18   -0.023 -0.273  0.035  0.101  0.260 -0.046    0.043   -0.067 0.163 #> case15    0.008  0.001  0.003 -0.009 -0.070 -0.061   -0.070   -0.058 0.017 #> case4     0.006 -0.024 -0.003  0.022 -0.051 -0.044   -0.056   -0.070 0.014 #> case1    -0.013  0.024 -0.030  0.052 -0.037  0.017   -0.061   -0.056 0.013 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance."},{"path":"https://sfcheung.github.io/semfindr/articles/selecting_cases.html","id":"mahalanobis-distance-on-residuals","dir":"Articles","previous_headings":"","what":"Mahalanobis Distance on Residuals","title":"Selecting Cases In lavaan_rerun","text":"Users can select cases using rankings Mahalanobis distance computed using regression-based residuals. possible models observed variables (.e., path models). analogous selecting cases based residuals multiple regression model. path model can one endogenous variable. residuals case endogenous variables computed (differences observed scores implied scores computed implied_scores()), Mahalanobis distance computed using residuals. done using argument resid_md_top. Users specify top x cases distance selected refitting model. Five cases selected, shown : Note selecting cases method can miss influential cases. multiple regression, case influential results needs case poorly predicted exogenous variables. Therefore, method used caution.","code":"rerun_out <- lavaan_rerun(fit,                           case_id = dat$id,                           resid_md_top = 5) #> The expected CPU time is 0.43 second(s). #> Could be faster if run in parallel. rerun_out #> === lavaan_rerun Output === #> Call: #> lavaan_rerun(fit = fit, case_id = dat$id, resid_md_top = 5) #> Number of reruns: 5 #> Number of reruns that converged (solution found): 5 #> Number of reruns that failed to converge (solution not found): 0 #> Number of reruns that passed post.check of lavaan: 5 #> Number of reruns that failed post.check of lavaan: 0 #> Number of reruns that both converged and passed post.check: 5 #> Number of reruns that either did not converge or failed post.check: 0 est_change(rerun_out) #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>        iv1~~iv2 m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv iv1~~iv1 iv2~~iv2   gcd #> case16   -0.019  0.052 -0.038 -0.237 -0.004  0.624   -0.049   -0.059 0.456 #> case43    0.236 -0.403 -0.263 -0.135  0.223  0.120    0.195    0.030 0.407 #> case65    0.133  0.152  0.191  0.363  0.076  0.161    0.000    0.046 0.241 #> case85   -0.066 -0.174  0.216 -0.119  0.335 -0.052   -0.031   -0.011 0.214 #> case61    0.004 -0.007 -0.021 -0.153  0.350 -0.031   -0.070   -0.070 0.157 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance."},{"path":"https://sfcheung.github.io/semfindr/articles/selecting_cases.html","id":"mahalanobis-distance-on-all-variables","dir":"Articles","previous_headings":"","what":"Mahalanobis Distance on All Variables","title":"Selecting Cases In lavaan_rerun","text":"Users can select cases using rankings Mahalanobis distance computed using observed variables. done using argument md_top. Users specify top x cases distance selected refitting model. Five cases selected, shown : Note selecting cases method can miss influential cases (Pek & MacCallum, 2011). Unlike multiple regression, distance measure leverage. path model, distance used distances centroid observed variables, including exogenous variables endogenous variables. model latent factors, distance affected residuals values predicted latent factors. Therefore, method used caution.","code":"rerun_out <- lavaan_rerun(fit,                           case_id = dat$id,                           md_top = 5) #> The expected CPU time is 0.43 second(s). #> Could be faster if run in parallel. rerun_out #> === lavaan_rerun Output === #> Call: #> lavaan_rerun(fit = fit, case_id = dat$id, md_top = 5) #> Number of reruns: 5 #> Number of reruns that converged (solution found): 5 #> Number of reruns that failed to converge (solution not found): 0 #> Number of reruns that passed post.check of lavaan: 5 #> Number of reruns that failed post.check of lavaan: 0 #> Number of reruns that both converged and passed post.check: 5 #> Number of reruns that either did not converge or failed post.check: 0 est_change(rerun_out) #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>        iv1~~iv2 m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv iv1~~iv1 iv2~~iv2   gcd #> case99    0.163  0.002  0.009  0.187 -0.070  0.033   -0.054    0.686 0.559 #> case51   -0.130  0.421 -0.057  0.094  0.089 -0.044    0.525   -0.056 0.492 #> case16   -0.019  0.052 -0.038 -0.237 -0.004  0.624   -0.049   -0.059 0.456 #> case87   -0.419 -0.011  0.019  0.101 -0.070  0.000    0.096    0.457 0.413 #> case43    0.236 -0.403 -0.263 -0.135  0.223  0.120    0.195    0.030 0.407 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance."},{"path":"https://sfcheung.github.io/semfindr/articles/selecting_cases.html","id":"final-remarks","dir":"Articles","previous_headings":"","what":"Final Remarks","title":"Selecting Cases In lavaan_rerun","text":"feasible, recommended refit model case, influential cases can considered together. methods included processing time slow selected cases explored. final model(s), lavaan_rerun() using cases recommended, serve final check sensitivity results individual cases.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/selecting_cases.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Selecting Cases In lavaan_rerun","text":"Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202–228. https://doi.org/10.1080/00273171.2011.561068","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Quick Start","text":"semfindr package contains functions structural equation modeling (SEM) diagnostics, identifying influential cases computing various diagnostic measures. document illustrates use semfindr casewise sensitivity analysis: Assessing influence case parameter estimates model fit measures. supports two approaches: leave-one-approach presented Pek MacCallum (2011), approximate approach approximates influence case without refitting model. can generate plots based similar plots available car package Fox Weisberg (2019) casewise sensitivity analysis.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"leave-one-out-approach","dir":"Articles","previous_headings":"","what":"Leave-One-Out Approach","title":"Quick Start","text":"approach, case concern, model fitted without case, results parameter estimates compared. approach exact can time consuming model needs fitted case consideration.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"workflow","dir":"Articles","previous_headings":"Leave-One-Out Approach","what":"Workflow","title":"Quick Start","text":"remove need refit model many times whenever case influence statistic requested, semfindr adopts workflow: Decide cases examine. cases examined, default. selected case, remove refit model. Store results. case influence statistics can computed without need repeat Step 2. Users can much diagnostic analysis want without repeating time consuming refitting step. Step 2 can also conducted without need decide advance influence statistics compute. statistics, generalized Cook’s distance, function parameters selected, parameters examine may depend results statistics may change analysis. following sections illustrates use major functions.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"fitting-the-target-model","dir":"Articles","previous_headings":"Leave-One-Out Approach","what":"Fitting the Target Model","title":"Quick Start","text":"sample dataset pa_dat, provided package, variables iv1, iv2, m1, dv, 100 cases. convenience, assign pa_dat new symbol, dat. Assume target model examination path model two predictors, one mediator, one outcome variable: fit model lavaan::sem():","code":"library(semfindr) dat <- pa_dat head(dat) #>            m1         dv        iv1         iv2 #> 1  0.32067106  1.4587148  0.2055776 -0.42187811 #> 2  0.15360231 -0.3809220  0.1853543  0.15229953 #> 3  0.35136439 -0.4886773  0.9151424  1.16670950 #> 4 -0.56529330 -0.9766142  0.2884440  0.04563409 #> 5 -1.60657017 -1.0948066 -0.5756171 -0.18184854 #> 6  0.03143301  0.5859886  0.1420111  0.06286986 mod <- \" m1 ~ iv1 + iv2 dv ~ m1 \" library(lavaan) #> This is lavaan 0.6-17 #> lavaan is FREE software! Please report any bugs. fit <- sem(mod, dat)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"rerun-n-times-step-1-to-step-3","dir":"Articles","previous_headings":"Leave-One-Out Approach","what":"Rerun n Times (Step 1 to Step 3)","title":"Quick Start","text":"refit model 100 times, time one case removed: example takes 4 8 seconds. larger samples complicated models, lavaan_rerun() supports parallel processing setting parallel TRUE. lavaan_rerun() also supports selecting cases using Mahalanobis distance variables model residuals outcome variables. See help page lavaan_rerun() vignette(\"selecting_cases\", package = \"semfindr\") details. process slow, users can save results base::saveRDS() users can load sensitivity analysis later, without need repeat steps R session.","code":"fit_rerun <- lavaan_rerun(fit)"},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"standardized-changes-in-parameter-estimates","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Functions","what":"Standardized Changes in Parameter Estimates","title":"Quick Start","text":"One intuitive way assess case influence compute changes parameter estimates case included, changes standardized standard errors (Pek & MacCallum, 2011, Equation 7): output matrix-like object class “est_change”, print method (print.est_change()). default, cases sorted descending order based generalized Cook’s distance (gcd, described ), first 10 cases printed. standardized change measure influence case included. standardized change parameter case positive, including case increases estimate parameter. example, standardized change path iv1 m1 0.024 first case. estimates path without first case 0.215 0.212, respectively. estimate path larger case included case excluded. (Recall 0.024 change standardized standard error estimate). est_change() also computes generalized Cook’s distance (Cook, 1977; Pek & MacCallum, 2011, Equation 6), gCD (labelled lowercase output gcd), using parameters examined. gCD analogous Cook’s distance multiple regression. measures overall influence parameters case included. Pek MacCallum recommended computing generalized Cook’s distance subset parameters researchers like assess case influence. can done specifying parameters included. example, may compute changes gCD path coefficients, using argument parameters: paths included, following call also work: Although 16th case largest gCD based parameters, 43th case largest gCD based regression paths . Therefore, examining gCD, better compute parameters theoretically important. See help page est_change() information.","code":"fit_est_change <- est_change(fit_rerun) fit_est_change #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>     m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv   gcd #> 16   0.052 -0.038 -0.237 -0.004  0.624 0.450 #> 43  -0.403 -0.263 -0.135  0.223  0.120 0.302 #> 65   0.152  0.191  0.363  0.076  0.161 0.221 #> 85  -0.174  0.216 -0.119  0.335 -0.052 0.208 #> 51   0.421 -0.057  0.094  0.089 -0.044 0.200 #> 34  -0.314 -0.192 -0.109  0.189  0.030 0.178 #> 32  -0.247  0.195 -0.191  0.193  0.001 0.175 #> 18  -0.273  0.035  0.101  0.260 -0.046 0.156 #> 20  -0.239  0.204 -0.141  0.183 -0.032 0.156 #> 100 -0.001 -0.225 -0.069  0.305 -0.056 0.152 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by generalized Cook's distance. #>    m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv   gcd #> 16  0.052 -0.038 -0.237 -0.004  0.624 0.450 #> 43 -0.403 -0.263 -0.135  0.223  0.120 0.302 #> 65  0.152  0.191  0.363  0.076  0.161 0.221 #> 85 -0.174  0.216 -0.119  0.335 -0.052 0.208 #> 51  0.421 -0.057  0.094  0.089 -0.044 0.200 fit_est_change_paths_only <- est_change(fit_rerun,                                         parameters = c(\"m1 ~ iv1\",                                                       \"m1 ~ iv2\",                                                       \"dv ~ m1\")) fit_est_change_paths_only #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>    m1~iv1 m1~iv2  dv~m1   gcd #> 43 -0.403 -0.263 -0.135 0.238 #> 51  0.421 -0.057  0.094 0.190 #> 65  0.152  0.191  0.363 0.189 #> 34 -0.314 -0.192 -0.109 0.142 #> 32 -0.247  0.195 -0.191 0.138 #> 20 -0.239  0.204 -0.141 0.121 #> 85 -0.174  0.216 -0.119 0.093 #> 11  0.010  0.149 -0.257 0.088 #> 18 -0.273  0.035  0.101 0.087 #> 13  0.274  0.059 -0.068 0.082 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by generalized Cook's distance. fit_est_change_paths_only <- est_change(fit_rerun,                                         parameters = c(\"~\"))"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"raw-changes-in-parameter-estimates","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Functions","what":"Raw Changes in Parameter Estimates","title":"Quick Start","text":"standardized changes parameter may easy interpret. original units interpretable, users can compute raw changes, , changes parameter estimates case included, standardized standard errors. can done est_change_raw(): output matrix-like object class “est_change”, print method (print.est_change()). output generated est_change_raw(), default, column parameter sorted descending order absolute value, case IDs inserted. example, change path iv1 m1 -0.043 43rd case. estimate path without 43rd cases 0.215 0.258, respectively. estimate 43rd case included smaller estimate 43rd case excluded. raw changes 0.215 - 0.258 -0.043. desired, est_change_raw() can also compute changes parameters standardized solution, setting standardized TRUE: Note variances iv1 iv2 necessarily equal one standardized solution raw changes equal zero cases. example, standardized solutions full sample sample 43rd case removed: change standardized estimate path iv1 m1 -0.032 43rd case. standardized estimates path without 43rd cases 0.178 0.21, respectively. estimate standardized coefficient iv1 m1 smaller estimate 43rd case removed. raw changes standardized estimate 0.178 - 0.21 -0.032. est_change_raw() also supports computing changes selected parameters: parameters operators included, e.g., \"~\" regression paths, form also work: See help page est_change_raw() information.","code":"fit_est_change_raw <- est_change_raw(fit_rerun) fit_est_change_raw #>  #> -- Case Influence on Parameter Estimates -- #>  #>    id m1~iv1  id m1~iv2 id  dv~m1  id m1~~m1 id dv~~dv #> 1  51  0.046  43 -0.026 65  0.039  61  0.043 16  0.108 #> 2  43 -0.043  94  0.024 11 -0.027  85  0.041  9  0.051 #> 3  34 -0.033 100 -0.022 16 -0.024 100  0.038 76  0.050 #> 4  13  0.030  85  0.021 32 -0.021  18  0.032 25  0.050 #> 5  18 -0.029  20  0.020 99  0.020  42  0.029 91  0.043 #> 6  32 -0.026  32  0.019 79  0.019  43  0.028 17  0.039 #> 7  20 -0.025  65  0.019 93  0.018  32  0.024 65  0.030 #> 8  75  0.021  34 -0.019 22  0.017  34  0.024 26  0.029 #> 9  42 -0.020  64 -0.017 61 -0.017  20  0.023 62  0.027 #> 10 68  0.020  52  0.016 25 -0.015  40  0.023 90  0.024 #>  #> Note: #> - Changes are raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by the absolute changes for each variable. fit_est_change_raw_std <- est_change_raw(fit_rerun,                                          standardized = TRUE) fit_est_change_raw_std #>  #> -- Case Influence on Standardized Parameter Estimates -- #>  #>    id m1~iv1  id m1~iv2 id  dv~m1  id m1~~m1 id dv~~dv id iv1~~iv1 id iv1~~iv2 #> 1  51  0.042 100 -0.023 16 -0.033  43  0.026 16  0.030  1        0 87   -0.041 #> 2  43 -0.032  43 -0.021 65  0.029  94 -0.022 65 -0.024  2        0 60   -0.035 #> 3  13  0.028  94  0.020 25 -0.018 100  0.022 25  0.017  3        0 45    0.029 #> 4  34 -0.026  99  0.019 11 -0.018  34  0.021 11  0.016  4        0 91   -0.027 #> 5  18 -0.025  34 -0.017 99  0.016  99 -0.019 99 -0.013  5        0 27    0.025 #> 6  32 -0.023  87  0.016 93  0.015  52 -0.016  9  0.013  6        0 43    0.024 #> 7  20 -0.023  52  0.015  9 -0.014  65 -0.016 93 -0.013  7        0 57   -0.024 #> 8  68  0.021  40 -0.013 22  0.014  27 -0.014 43  0.012  8        0 50    0.024 #> 9  85 -0.020  20  0.012 43 -0.013  40  0.013 22 -0.012  9        0 69    0.022 #> 10 42 -0.019  61 -0.012 79  0.013  18  0.013 79 -0.011 10        0 71    0.020 #>    id iv2~~iv2 #> 1   1        0 #> 2   2        0 #> 3   3        0 #> 4   4        0 #> 5   5        0 #> 6   6        0 #> 7   7        0 #> 8   8        0 #> 9   9        0 #> 10 10        0 #>  #> Note: #> - Changes are raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by the absolute changes for each variable. standardizedSolution(fit, se = FALSE)[1, ] #>   lhs op rhs est.std #> 1  m1  ~ iv1   0.178 standardizedSolution(sem(mod, dat[-43, ]), se = FALSE)[1, ] #>   lhs op rhs est.std #> 1  m1  ~ iv1    0.21 fit_est_change_raw_std_paths <- est_change_raw(fit_rerun,                                                standardized = TRUE,                                                parameters = c(\"m1 ~ iv1\",                                                               \"m1 ~ iv2\",                                                               \"dv ~ m1\")) fit_est_change_raw_std_paths #>  #> -- Case Influence on Standardized Parameter Estimates -- #>  #>    id  dv~m1 id m1~iv1  id m1~iv2 #> 1  16 -0.033 51  0.042 100 -0.023 #> 2  65  0.029 43 -0.032  43 -0.021 #> 3  25 -0.018 13  0.028  94  0.020 #> 4  11 -0.018 34 -0.026  99  0.019 #> 5  99  0.016 18 -0.025  34 -0.017 #> 6  93  0.015 32 -0.023  87  0.016 #> 7   9 -0.014 20 -0.023  52  0.015 #> 8  22  0.014 68  0.021  40 -0.013 #> 9  43 -0.013 85 -0.020  20  0.012 #> 10 79  0.013 42 -0.019  61 -0.012 #>  #> Note: #> - Changes are raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by the absolute changes for each variable. fit_est_change_raw_std_paths <- est_change_raw(fit_rerun,                                                standardized = TRUE,                                                parameters = c(\"~\"))"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"mahalanobis-distance","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Functions","what":"Mahalanobis Distance","title":"Quick Start","text":"One commonly used measure identifying outliers Mahalanobis distance (Mahalanobis, 1936; Pek & MacCallum, 2011, Equation 9). mahalanobis_rerun() can used compute Mahalanobis distance case variables used target model: output matrix-like object class “md_semfindr”, print method (print.md_semfindr()). default, cases sorted descending order Mahalanobis distance. Note case large Mahalanobis distance necessarily influential case (Pek & MacCallum, 2011). Therefore, influence measures examined avoid overlooking cases extreme influential. See help page mahalanobis_rerun() information.","code":"fit_md <- mahalanobis_rerun(fit_rerun) fit_md #>  #> -- Mahalanobis Distance -- #>  #>        md #> 16 11.530 #> 99 11.312 #> 87 11.091 #> 43 10.181 #> 51  9.869 #> 13  8.476 #> 91  8.078 #> 71  7.757 #> 17  7.555 #> 68  7.472 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order."},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"changes-in-fit-measures","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Functions","what":"Changes in Fit Measures","title":"Quick Start","text":"Another intuitive measure influence difference measure model fit analysis case included case excluded. can done fit_measures_change(), simply gets fit measures supported lavaan::fitMeasures() results lavaan_rerun: output matrix-like object class “fit_measures_change”, print method (print.fit_measures_change()). default, first 10 cases printed. sort cases specific measure, set sort_by column name used sorting cases. default, cases sorted descending order absolute value selected column. value computed \\(M_\\textrm{full sample} - M_\\textrm{one case removed}\\). Therefore, value case positive, measure higher case included case excluded. value negative, measure smaller case included case excluded. convention selected interpretation consistent changes parameter estimates. example, change CFI 43rd case -0.03. Therefore, including 43rd Case yields CFI smaller case exclude, difference 0.03. argument fit_measures passed lavaan::fitMeasures() specify measures computed. default values c(\"chisq\", \"cfi\", \"tli\", \"rmsea\"). Therefore, argument can omitted desired measures fit: See help page fit_measures_change() information.","code":"fit_mc <- fit_measures_change(fit_rerun,             fit_measures = c(\"chisq\", \"cfi\", \"tli\", \"rmsea\")) fit_mc #>  #> -- Case Influence on Fit Measures -- #>  #>     chisq    cfi    tli  rmsea #> 1   0.154 -0.002 -0.005  0.002 #> 2  -0.019  0.001  0.003 -0.001 #> 3  -0.417  0.008  0.021 -0.007 #> 4  -0.154  0.004  0.009 -0.003 #> 5   0.097  0.000  0.001  0.001 #> 6   0.116 -0.001 -0.003  0.001 #> 7  -0.631  0.014  0.034 -0.011 #> 8   0.120  0.002  0.005  0.001 #> 9   0.524 -0.012 -0.030  0.008 #> 10  0.697 -0.013 -0.033  0.011 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. print(fit_mc, sort_by = \"chisq\") #>  #> -- Case Influence on Fit Measures -- #>  #>     chisq    cfi    tli  rmsea #> 91  1.760 -0.034 -0.085  0.031 #> 17 -1.591  0.027  0.066 -0.025 #> 25  1.580 -0.031 -0.079  0.028 #> 16 -1.533  0.019  0.048 -0.024 #> 87 -1.381  0.030  0.074 -0.022 #> 43  1.306 -0.030 -0.075  0.022 #> 90  0.930 -0.016 -0.039  0.015 #> 97 -0.919  0.017  0.042 -0.015 #> 13 -0.909  0.020  0.050 -0.015 #> 62  0.863 -0.015 -0.038  0.014 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by chisq in decreasing order on absolute values. fit_mc <- fit_measures_change(fit_rerun)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"an-all-in-one-function","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Functions","what":"An All-In-One-Function","title":"Quick Start","text":"can also use influence_stat() compute previous measures. calls fit_measures_change(), est_change(), mahalanobis_rerun() merges results one object: output matrix-like object class “influence_stat”, print method (print.influence_stat()). printed, print results using methods described . One major use influence_stat() provide information diagnostic plots introduced .","code":"fit_influence <- influence_stat(fit_rerun) fit_influence #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>     m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv   gcd #> 16   0.052 -0.038 -0.237 -0.004  0.624 0.450 #> 43  -0.403 -0.263 -0.135  0.223  0.120 0.302 #> 65   0.152  0.191  0.363  0.076  0.161 0.221 #> 85  -0.174  0.216 -0.119  0.335 -0.052 0.208 #> 51   0.421 -0.057  0.094  0.089 -0.044 0.200 #> 34  -0.314 -0.192 -0.109  0.189  0.030 0.178 #> 32  -0.247  0.195 -0.191  0.193  0.001 0.175 #> 18  -0.273  0.035  0.101  0.260 -0.046 0.156 #> 20  -0.239  0.204 -0.141  0.183 -0.032 0.156 #> 100 -0.001 -0.225 -0.069  0.305 -0.056 0.152 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by generalized Cook's distance. #>  #> -- Case Influence on Fit Measures -- #>  #>     chisq    cfi  rmsea    tli #> 1   0.154 -0.002  0.002 -0.005 #> 2  -0.019  0.001 -0.001  0.003 #> 3  -0.417  0.008 -0.007  0.021 #> 4  -0.154  0.004 -0.003  0.009 #> 5   0.097  0.000  0.001  0.001 #> 6   0.116 -0.001  0.001 -0.003 #> 7  -0.631  0.014 -0.011  0.034 #> 8   0.120  0.002  0.001  0.005 #> 9   0.524 -0.012  0.008 -0.030 #> 10  0.697 -0.013  0.011 -0.033 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #>  #> -- Mahalanobis Distance -- #>  #>        md #> 16 11.530 #> 99 11.312 #> 87 11.091 #> 43 10.181 #> 51  9.869 #> 13  8.476 #> 91  8.078 #> 71  7.757 #> 17  7.555 #> 68  7.472 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order."},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"diagnostic-plots","dir":"Articles","previous_headings":"Leave-One-Out Approach","what":"Diagnostic Plots","title":"Quick Start","text":"semfindr provides several functions generate diagnostic plots. functions accept output influence_stat() returns ggplot2 plot, can customized desired ggplot2 functions.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"generalized-cooks-distance","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Plots","what":"Generalized Cook’s Distance","title":"Quick Start","text":"visualize gCDs cases, can plot index plot cases horizontal axis gCD vertical axis using gcd_plot():  plot shows , compared cases, 16th case largest gCD (based free parameters). largest_gcd controls number cases largest gcd labelled. default 1. options gcd_plot() can found help page.","code":"gcd_plot(fit_influence,          largest_gcd = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"mahalanobis-distance-1","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Plots","what":"Mahalanobis Distance","title":"Quick Start","text":"index plot can computed Mahalanobis distance given influence_stat():  plot illustrates , although 87th 99th cases also large Mahalanobis distance, influential cases assessed gCD. largest_m used control many cases high Mahalanobis distance variables fitted model labelled. default 1. options md_plot() can found help page.","code":"md_plot(fit_influence,         largest_md = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"change-in-fit-measure-vs--generalized-cooks-distance","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Plots","what":"Change in Fit Measure vs. Generalized Cook’s Distance","title":"Quick Start","text":"examine gCD relates selected measure model fit (gof), gcd_gof_plot() can used:  largest_gcd determines number cases largest gcd labelled, largest_fit_measure determines number cases largest absolute change selected measure model fit labelled. default 1 arguments. options gcd_gof_plot() can found help page.","code":"gcd_gof_plot(fit_influence,              fit_measure = \"rmsea\",              largest_gcd = 3,              largest_fit_measure = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"bubble-plot","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Plots","what":"Bubble Plot","title":"Quick Start","text":"function gcd_gof_md_plot() can used plot bubble plot selected measure model fit Mahalanobis distance, bubble size determined generalized Cook’s distance. plot similar plot car::influencePlot() regression models.  circle_size controls size largest bubble. Increase number size difference small bubbles. largest_gcd, largest_fit_measure, largest_md controls number cases highest absolute values one measures labelled. default values 1. options gcd_gof_md_plot() can found help page.","code":"gcd_gof_md_plot(fit_influence,                 fit_measure = \"rmsea\",                 largest_gcd = 3,                 largest_fit_measure = 3,                 largest_md = 3,                 circle_size = 15)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"index-plot-of-standardized-or-raw-changes-in-parameter-estimates","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Plots","what":"Index Plot of Standardized or Raw Changes in Parameter Estimates","title":"Quick Start","text":"function est_change_plot() can used plot index plot standardized raw changes using output est_change() est_change_raw(). example, using output generated est_change() , can generate index plot parameter:  largest_change controls number cases largest change labelled. default 1. cases labelled determined separately parameter. function also supports plotting changes selected parameters, using parameters:  can also plot raw changes. example:  Last, output influence_stat() can also used. case influence extracted object. example, following call, using fit_influence instead fit_est_change_raw, generate plot. options est_change_plot() can found help page.","code":"est_change_plot(fit_est_change,                 largest_change = 3) est_change_plot(fit_est_change,                 parameters = \"~\",                 largest_change = 3) est_change_plot(fit_est_change_raw,                 parameters = \"~\",                 largest_change = 3) est_change_plot(fit_influence,                 parameters = \"~\",                 largest_change = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"standardized-changes-against-gcd","dir":"Articles","previous_headings":"Leave-One-Out Approach > Diagnostic Plots","what":"Standardized Changes Against gCD","title":"Quick Start","text":"function est_change_gcd_plot() can used plot, selected parameter, casewise standardized changes using output est_change() gCD. example, using output generated est_change() , can generate index plot parameter:  largest_gcd controls number cases largest gCD labelled. default 1. function also supports plotting changes selected parameters, using parameters:  support plotting raw changes gCD gCD computed est_change_raw(). Last, output influence_stat() can also used. case influence extracted object. example, following call, using fit_influence instead fit_est_change, generate plot. options est_change_gcd_plot() can found help page.","code":"est_change_gcd_plot(fit_est_change,                     largest_gcd = 3) est_change_gcd_plot(fit_est_change,                     parameters = \"~\",                     largest_gcd = 3) est_change_gcd_plot(fit_influence,                     parameters = \"~\",                     largest_gcd = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"approximate-approach","dir":"Articles","previous_headings":"","what":"Approximate Approach","title":"Quick Start","text":"leave-one-approach exact model fitted twice, without target case. However, can time consuming models datasets. semfindr package also supports approximate approach uses casewise scores (lavaan::lavScores()) casewise likelihood approximate influence case without refitting model. approach exact much faster leave-one-approach model fitted . approach can used together leave-one-approach, using approximate approach identify potentially influential cases use leave-one-approach compute exact influence. functions leave-one-approach approximate approach counterparts. Therefore, usage illustrated . Please refer previous section meanings influence statistics. major difference , functions approximate approach use output lavaan directly. need use lavaan_rerun(). technical details approximate approach, please refer vignette Approximate Case Influence Using Scores Casewise Likelihood (vignette(\"casewise_scores\", package = \"semfindr\")).","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"approximate-standardized-changes-in-parameter-estimates","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Functions","what":"Approximate Standardized Changes in Parameter Estimates","title":"Quick Start","text":"function est_change_approx() can used compute approximate standardized change. first argument output lavaan: output matrix-like object class “est_change”, print method (print.est_change()). default, cases sorted descending order based approximate generalized Cook’s distance (gcd_approx, described ), first 10 cases printed. column gcd_approx indicates gCD approximate value. Like est_change(), also supports computing approximate gCD based selected parameters. example, following computes gCD based regression coefficients : See help page est_change_approx() information.","code":"fit_est_change_approx <- est_change_approx(fit) fit_est_change_approx #>  #> -- Approximate Standardized Case Influence on Parameter Estimates -- #>  #>     m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv gcd_approx #> 16   0.052 -0.038 -0.228 -0.006  0.572      0.372 #> 43  -0.387 -0.249 -0.135  0.201  0.116      0.270 #> 65   0.150  0.189  0.355  0.071  0.148      0.203 #> 85  -0.170  0.211 -0.118  0.315 -0.054      0.187 #> 51   0.405 -0.052  0.094  0.075 -0.046      0.179 #> 34  -0.306 -0.186 -0.110  0.176  0.028      0.163 #> 32  -0.241  0.190 -0.189  0.181 -0.002      0.161 #> 20  -0.234  0.199 -0.140  0.172 -0.034      0.144 #> 18  -0.269  0.035  0.101  0.246 -0.048      0.143 #> 100 -0.001 -0.221 -0.069  0.290 -0.058      0.137 #>  #> Note: #> - Changes are approximate standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by approximate generalized Cook's distance. fit_est_change_approx_paths <- est_change_approx(fit,                                                  parameters = \"~\") fit_est_change_approx_paths #>  #> -- Approximate Standardized Case Influence on Parameter Estimates -- #>  #>    m1~iv1 m1~iv2  dv~m1 gcd_approx #> 43 -0.387 -0.249 -0.135      0.217 #> 65  0.150  0.189  0.355      0.177 #> 51  0.405 -0.052  0.094      0.172 #> 34 -0.306 -0.186 -0.110      0.132 #> 32 -0.241  0.190 -0.189      0.130 #> 20 -0.234  0.199 -0.140      0.114 #> 85 -0.170  0.211 -0.118      0.087 #> 11  0.010  0.149 -0.254      0.084 #> 18 -0.269  0.035  0.101      0.082 #> 13  0.267  0.056 -0.068      0.076 #>  #> Note: #> - Changes are approximate standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by approximate generalized Cook's distance."},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"approximate-raw-changes-in-parameter-estimates","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Functions","what":"Approximate Raw Changes in Parameter Estimates","title":"Quick Start","text":"function est_change_raw_approx() computes approximate raw changes parameter estimates, standardized standard errors. first argument output lavaan: output matrix-like object class “est_change”, print method (print.est_change()). output generated est_change_raw_approx(), default, column parameter sorted descending order absolute value, case IDs inserted. Unlike est_change_raw(), est_change_raw_approx() support raw changes standardized solution. See help page est_change_raw_approx() information.","code":"fit_est_change_raw_approx <- est_change_raw_approx(fit) fit_est_change_raw_approx #>  #> -- Approximate Case Influence on Parameter Estimates -- #>  #>    id m1~iv1  id m1~iv2 id  dv~m1  id m1~~m1 id dv~~dv #> 1  51  0.042  43 -0.025 65  0.037  61  0.042 16  0.106 #> 2  43 -0.040  94  0.023 11 -0.027  85  0.040  9  0.050 #> 3  34 -0.032 100 -0.022 16 -0.024 100  0.037 76  0.049 #> 4  18 -0.028  85  0.021 32 -0.020  18  0.031 25  0.049 #> 5  13  0.028  20  0.020 99  0.020  42  0.028 91  0.043 #> 6  32 -0.025  32  0.019 79  0.018  43  0.025 17  0.039 #> 7  20 -0.024  65  0.019 93  0.018  32  0.023 26  0.028 #> 8  75  0.021  34 -0.018 22  0.017  34  0.022 65  0.027 #> 9  42 -0.020  64 -0.016 61 -0.016  40  0.022 62  0.027 #> 10 68  0.018  52  0.016 25 -0.015  20  0.022 90  0.024 #>  #> Note: #> - Changes are approximate raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by the absolute changes for each variable."},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"mahalanobis-distance-2","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Functions","what":"Mahalanobis Distance","title":"Quick Start","text":"function mahalanobis_rerun() actually need leave-one-approach. Therefore, can also used approximate approach setting first argument output lavaan: results whether output lavaan lavaan_reun() used.","code":"fit_md <- mahalanobis_rerun(fit) fit_md #>  #> -- Mahalanobis Distance -- #>  #>        md #> 16 11.530 #> 99 11.312 #> 87 11.091 #> 43 10.181 #> 51  9.869 #> 13  8.476 #> 91  8.078 #> 71  7.757 #> 17  7.555 #> 68  7.472 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order."},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"approximate-changes-in-fit-measures","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Functions","what":"Approximate Changes in Fit Measures","title":"Quick Start","text":"function fit_measures_change_approx() computes approximate changes selected fit measures. first argument output lavaan: output matrix-like object class “fit_measures_change”, print method (print.fit_measures_change()). default, first 10 cases printed. sort cases specific measure, set sort_by column name used sorting cases. default, cases sorted descending order absolute value selected column. measures default values. Therefore, four measures needed, following also work: See help page fit_measures_change_approx() information.","code":"fit_mc_approx <- fit_measures_change_approx(fit,                    fit_measures = c(\"chisq\", \"cfi\", \"tli\", \"rmsea\")) fit_mc_approx #>  #> -- Approximate Case Influence on Fit Measures -- #>  #>     chisq    cfi    tli  rmsea #> 1   0.160 -0.002 -0.005  0.002 #> 2  -0.019  0.001  0.003 -0.001 #> 3  -0.389  0.008  0.019 -0.007 #> 4  -0.151  0.004  0.009 -0.003 #> 5   0.097  0.000  0.001  0.001 #> 6   0.116 -0.001 -0.003  0.001 #> 7  -0.596  0.013  0.032 -0.010 #> 8   0.119  0.002  0.005  0.001 #> 9   0.543 -0.012 -0.031  0.008 #> 10  0.703 -0.013 -0.033  0.011 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. print(fit_mc_approx, sort_by = \"chisq\") #>  #> -- Approximate Case Influence on Fit Measures -- #>  #>     chisq    cfi    tli  rmsea #> 91  1.846 -0.035 -0.089  0.033 #> 25  1.621 -0.032 -0.080  0.029 #> 43  1.392 -0.031 -0.078  0.024 #> 17 -1.389  0.023  0.058 -0.022 #> 16 -1.283  0.016  0.039 -0.021 #> 87 -1.146  0.026  0.064 -0.019 #> 90  0.944 -0.016 -0.040  0.016 #> 34  0.876 -0.021 -0.052  0.014 #> 62  0.874 -0.015 -0.038  0.014 #> 97 -0.855  0.016  0.039 -0.014 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by chisq in decreasing order on absolute values. fit_mc_approx <- fit_measures_change_approx(fit)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"an-all-in-one-function-1","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Functions","what":"An All-In-One-Function","title":"Quick Start","text":"--one function influence_stat() can used compute approximate influence statistics calling fit_measures_change_approx() est_change_approx(). can done simply using output lavaan first argument: output matrix-like object class “influence_stat”, print method (print.influence_stat()). printed, print results using methods described . See help page influence_stat() information.","code":"fit_influence_approx <- influence_stat(fit) fit_influence_approx #>  #> -- Approximate Standardized Case Influence on Parameter Estimates -- #>  #>     m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv gcd_approx #> 16   0.052 -0.038 -0.228 -0.006  0.572      0.372 #> 43  -0.387 -0.249 -0.135  0.201  0.116      0.270 #> 65   0.150  0.189  0.355  0.071  0.148      0.203 #> 85  -0.170  0.211 -0.118  0.315 -0.054      0.187 #> 51   0.405 -0.052  0.094  0.075 -0.046      0.179 #> 34  -0.306 -0.186 -0.110  0.176  0.028      0.163 #> 32  -0.241  0.190 -0.189  0.181 -0.002      0.161 #> 20  -0.234  0.199 -0.140  0.172 -0.034      0.144 #> 18  -0.269  0.035  0.101  0.246 -0.048      0.143 #> 100 -0.001 -0.221 -0.069  0.290 -0.058      0.137 #>  #> Note: #> - Changes are approximate standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by approximate generalized Cook's distance. #>  #> -- Approximate Case Influence on Fit Measures -- #>  #>     chisq    cfi  rmsea    tli #> 1   0.160 -0.002  0.002 -0.005 #> 2  -0.019  0.001 -0.001  0.003 #> 3  -0.389  0.008 -0.007  0.019 #> 4  -0.151  0.004 -0.003  0.009 #> 5   0.097  0.000  0.001  0.001 #> 6   0.116 -0.001  0.001 -0.003 #> 7  -0.596  0.013 -0.010  0.032 #> 8   0.119  0.002  0.001  0.005 #> 9   0.543 -0.012  0.008 -0.031 #> 10  0.703 -0.013  0.011 -0.033 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #>  #> -- Mahalanobis Distance -- #>  #>        md #> 16 11.530 #> 99 11.312 #> 87 11.091 #> 43 10.181 #> 51  9.869 #> 13  8.476 #> 91  8.078 #> 71  7.757 #> 17  7.555 #> 68  7.472 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order."},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"diagnostic-plots-1","dir":"Articles","previous_headings":"Approximate Approach","what":"Diagnostic Plots","title":"Quick Start","text":"diagnostic plot functions can also used visualize case influence statistics based approximate approach. method used determined output influence_stat(), est_change_approx(), est_change_raw_approx() users use exactly way leave-one-approach. Therefore, sample code presented , using output influence_stat(), est_change_approx(), est_change_raw_approx() based approximate approach generated previous section. Note plots noted titles axis labels statistics approximate values.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"approximate-generalized-cooks-distance","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Plots","what":"Approximate Generalized Cook’s Distance","title":"Quick Start","text":"","code":"gcd_plot(fit_influence_approx,          largest_gcd = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"mahalanobis-distance-3","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Plots","what":"Mahalanobis Distance","title":"Quick Start","text":"plot leave-one-approach approximate approach.","code":"md_plot(fit_influence_approx,         largest_md = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"approximate-change-in-fit-measure-vs--approximate-generalized-cooks-distance","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Plots","what":"Approximate Change in Fit Measure vs. Approximate Generalized Cook’s Distance","title":"Quick Start","text":"","code":"gcd_gof_plot(fit_influence_approx,              fit_measure = \"rmsea\",              largest_gcd = 3,              largest_fit_measure = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"bubble-plot-1","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Plots","what":"Bubble Plot","title":"Quick Start","text":"","code":"gcd_gof_md_plot(fit_influence_approx,                 fit_measure = \"rmsea\",                 largest_gcd = 3,                 largest_fit_measure = 3,                 largest_md = 3,                 circle_size = 15)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"index-plot-of-standardized-or-raw-changes-in-parameter-estimates-1","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Plots","what":"Index Plot of Standardized or Raw Changes in Parameter Estimates","title":"Quick Start","text":"Like leave-one-approach, output influence_stat() can also used. example, replacing fit_est_change_raw_approx fit_influence_approx generate plot:","code":"est_change_plot(fit_est_change_approx,                 largest_change = 3) est_change_plot(fit_est_change_approx,                 parameters = \"~\",                 largest_change = 3) est_change_plot(fit_est_change_raw_approx,                 parameters = \"~\",                 largest_change = 3) est_change_plot(fit_influence_approx,                 parameters = \"~\",                 largest_change = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"standardized-changes-against-gcd-1","dir":"Articles","previous_headings":"Approximate Approach > Diagnostic Plots","what":"Standardized Changes Against gCD","title":"Quick Start","text":"Note largest_gcd controls number cases largest approximated gCD labelled. default 1.  Like leave-one-approach, output influence_stat() can also used. example, replacing fit_est_change_approx fit_influence_approx generate plot:","code":"est_change_gcd_plot(fit_est_change_approx,                     largest_gcd = 3) est_change_gcd_plot(fit_est_change_approx,                     parameters = \"~\",                     largest_gcd = 3) est_change_gcd_plot(fit_influence_approx,                     parameters = \"~\",                     largest_gcd = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"final-remarks","dir":"Articles","previous_headings":"","what":"Final Remarks","title":"Quick Start","text":"examples use row numbers identify cases. users meaningful case IDs, can used label case ( see vignette(\"user_id\", package = \"semfindr\")). users want refit model selected cases removed one--one, lavaan_rerun() supports various methods examine selected cases (see vignette(\"selecting_cases\", package = \"semfindr\")). Last, plot functions return ggplot graph objects. Users can modify suit needs. also *_aes arguments can used customize plot generated. Please see help pages use arguments.","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/semfindr.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Quick Start","text":"Cook, R. D. (1977). Detection influential observation linear regression. Technometrics, 19(1), 15-18. Fox J., & Weisberg, S. (2019). R companion applied regression (3rd Edition). Sage. https://socialsciences.mcmaster.ca/jfox/Books/Companion/. Mahalanobis, P. C. (1936). generalized distance statistics. Proceedings National Institute Science India, 2, 49-55. Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202-228. https://doi.org/10.1080/00273171.2011.561068","code":""},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"rerun-n-times","dir":"Articles","previous_headings":"","what":"Rerun n Times","title":"Use Case IDs","text":"refit model 100 times, time one case removed. Although id column stored lavaan, can supplied argument case_id: list reruns now uses id names: shown , diagnostic functions use user supplied case IDs displays, making easier locate original data set.","code":"fit_rerun <- lavaan_rerun(fit, case_id = dat$id) head(fit_rerun$rerun[1:3]) #> $case1 #> lavaan 0.6.15 ended normally after 2 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            99 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.557 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.038 #>  #> $case10 #> lavaan 0.6.15 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            99 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.015 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.049 #>  #> $case100 #> lavaan 0.6.15 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            99 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.620 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.037"},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"standardized-changes-in-estimates","dir":"Articles","previous_headings":"Diagnostic Functions","what":"Standardized Changes in Estimates","title":"Use Case IDs","text":"","code":"fit_est_change <- est_change(fit_rerun) fit_est_change #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>         m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv   gcd #> case16   0.052 -0.038 -0.237 -0.004  0.624 0.450 #> case43  -0.403 -0.263 -0.135  0.223  0.120 0.302 #> case65   0.152  0.191  0.363  0.076  0.161 0.221 #> case85  -0.174  0.216 -0.119  0.335 -0.052 0.208 #> case51   0.421 -0.057  0.094  0.089 -0.044 0.200 #> case34  -0.314 -0.192 -0.109  0.189  0.030 0.178 #> case32  -0.247  0.195 -0.191  0.193  0.001 0.175 #> case18  -0.273  0.035  0.101  0.260 -0.046 0.156 #> case20  -0.239  0.204 -0.141  0.183 -0.032 0.156 #> case100 -0.001 -0.225 -0.069  0.305 -0.056 0.152 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by generalized Cook's distance. fit_est_change_paths_only <- est_change(fit_rerun,                                 parameters = c(\"m1 ~ iv1\",                                                \"m1 ~ iv2\",                                                \"dv ~ m1\")) fit_est_change_paths_only #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>        m1~iv1 m1~iv2  dv~m1   gcd #> case43 -0.403 -0.263 -0.135 0.238 #> case51  0.421 -0.057  0.094 0.190 #> case65  0.152  0.191  0.363 0.189 #> case34 -0.314 -0.192 -0.109 0.142 #> case32 -0.247  0.195 -0.191 0.138 #> case20 -0.239  0.204 -0.141 0.121 #> case85 -0.174  0.216 -0.119 0.093 #> case11  0.010  0.149 -0.257 0.088 #> case18 -0.273  0.035  0.101 0.087 #> case13  0.274  0.059 -0.068 0.082 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by generalized Cook's distance."},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"raw-changes-in-estimates","dir":"Articles","previous_headings":"Diagnostic Functions","what":"Raw Changes in Estimates","title":"Use Case IDs","text":"","code":"fit_est_change_raw <- est_change_raw(fit_rerun) fit_est_change_raw #>  #> -- Case Influence on Parameter Estimates -- #>  #>        id m1~iv1      id m1~iv2     id  dv~m1      id m1~~m1     id dv~~dv #> 1  case51  0.046  case43 -0.026 case65  0.039  case61  0.043 case16  0.108 #> 2  case43 -0.043  case94  0.024 case11 -0.027  case85  0.041  case9  0.051 #> 3  case34 -0.033 case100 -0.022 case16 -0.024 case100  0.038 case76  0.050 #> 4  case13  0.030  case85  0.021 case32 -0.021  case18  0.032 case25  0.050 #> 5  case18 -0.029  case20  0.020 case99  0.020  case42  0.029 case91  0.043 #> 6  case32 -0.026  case32  0.019 case79  0.019  case43  0.028 case17  0.039 #> 7  case20 -0.025  case65  0.019 case93  0.018  case32  0.024 case65  0.030 #> 8  case75  0.021  case34 -0.019 case22  0.017  case34  0.024 case26  0.029 #> 9  case42 -0.020  case64 -0.017 case61 -0.017  case20  0.023 case62  0.027 #> 10 case68  0.020  case52  0.016 case25 -0.015  case40  0.023 case90  0.024 #>  #> Note: #> - Changes are raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by the absolute changes for each variable."},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"mahalanobis-distance","dir":"Articles","previous_headings":"Diagnostic Functions","what":"Mahalanobis Distance","title":"Use Case IDs","text":"","code":"fit_md <- mahalanobis_rerun(fit_rerun) fit_md #>  #> -- Mahalanobis Distance -- #>  #>            md #> case16 11.530 #> case99 11.312 #> case87 11.091 #> case43 10.181 #> case51  9.869 #> case13  8.476 #> case91  8.078 #> case71  7.757 #> case17  7.555 #> case68  7.472 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order."},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"changes-in-fit-measures","dir":"Articles","previous_headings":"Diagnostic Functions","what":"Changes in Fit Measures","title":"Use Case IDs","text":"","code":"fit_mc <- fit_measures_change(fit_rerun,             fit_measures = c(\"chisq\", \"cfi\", \"tli\", \"rmsea\")) fit_mc #>  #> -- Case Influence on Fit Measures -- #>  #>          chisq    cfi    tli  rmsea #> case1    0.154 -0.002 -0.005  0.002 #> case10   0.697 -0.013 -0.033  0.011 #> case100  0.092 -0.006 -0.015  0.001 #> case11   0.083 -0.002 -0.005  0.001 #> case12   0.173 -0.003 -0.007  0.002 #> case13  -0.909  0.020  0.050 -0.015 #> case14  -0.239  0.004  0.011 -0.005 #> case15   0.047  0.000  0.000  0.000 #> case16  -1.533  0.019  0.048 -0.024 #> case17  -1.591  0.027  0.066 -0.025 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases."},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"all-in-one-function","dir":"Articles","previous_headings":"Diagnostic Functions","what":"All-In-One-Function","title":"Use Case IDs","text":"","code":"fit_influence <- influence_stat(fit_rerun) fit_influence #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>         m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv   gcd #> case16   0.052 -0.038 -0.237 -0.004  0.624 0.450 #> case43  -0.403 -0.263 -0.135  0.223  0.120 0.302 #> case65   0.152  0.191  0.363  0.076  0.161 0.221 #> case85  -0.174  0.216 -0.119  0.335 -0.052 0.208 #> case51   0.421 -0.057  0.094  0.089 -0.044 0.200 #> case34  -0.314 -0.192 -0.109  0.189  0.030 0.178 #> case32  -0.247  0.195 -0.191  0.193  0.001 0.175 #> case18  -0.273  0.035  0.101  0.260 -0.046 0.156 #> case20  -0.239  0.204 -0.141  0.183 -0.032 0.156 #> case100 -0.001 -0.225 -0.069  0.305 -0.056 0.152 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by generalized Cook's distance. #>  #> -- Case Influence on Fit Measures -- #>  #>          chisq    cfi  rmsea    tli #> case1    0.154 -0.002  0.002 -0.005 #> case10   0.697 -0.013  0.011 -0.033 #> case100  0.092 -0.006  0.001 -0.015 #> case11   0.083 -0.002  0.001 -0.005 #> case12   0.173 -0.003  0.002 -0.007 #> case13  -0.909  0.020 -0.015  0.050 #> case14  -0.239  0.004 -0.005  0.011 #> case15   0.047  0.000  0.000  0.000 #> case16  -1.533  0.019 -0.024  0.048 #> case17  -1.591  0.027 -0.025  0.066 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #>  #> -- Mahalanobis Distance -- #>  #>            md #> case16 11.530 #> case99 11.312 #> case87 11.091 #> case43 10.181 #> case51  9.869 #> case13  8.476 #> case91  8.078 #> case71  7.757 #> case17  7.555 #> case68  7.472 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set 'first' to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order."},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"generalized-cooks-distance","dir":"Articles","previous_headings":"Diagnostic Plots","what":"Generalized Cook’s Distance","title":"Use Case IDs","text":"","code":"gcd_plot(fit_influence, largest_gcd = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"mahalanobis-distance-1","dir":"Articles","previous_headings":"Diagnostic Plots","what":"Mahalanobis Distance","title":"Use Case IDs","text":"","code":"md_plot(fit_influence,         largest_md = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"fit-measure-vs--generalized-cooks-distance","dir":"Articles","previous_headings":"Diagnostic Plots","what":"Fit Measure vs. Generalized Cook’s Distance","title":"Use Case IDs","text":"","code":"gcd_gof_plot(fit_influence,              fit_measure = \"rmsea\",              largest_gcd = 3,              largest_fit_measure = 3)"},{"path":"https://sfcheung.github.io/semfindr/articles/user_id.html","id":"bubble-plot","dir":"Articles","previous_headings":"Diagnostic Plots","what":"Bubble Plot","title":"Use Case IDs","text":"","code":"gcd_gof_md_plot(fit_influence,                 fit_measure = \"rmsea\",                 largest_gcd = 3,                 largest_fit_measure = 3,                 largest_md = 3,                 circle_size = 15)"},{"path":"https://sfcheung.github.io/semfindr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer. Mark Hok Chio Lai. Author.","code":""},{"path":"https://sfcheung.github.io/semfindr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung S, Lai M (2024). semfindr: Influential Cases Structural Equation Modeling. R package version 0.1.6.2, https://sfcheung.github.io/semfindr/.","code":"@Manual{,   title = {semfindr: Influential Cases in Structural Equation Modeling},   author = {Shu Fai Cheung and Mark Hok Chio Lai},   year = {2024},   note = {R package version 0.1.6.2},   url = {https://sfcheung.github.io/semfindr/}, }"},{"path":"https://sfcheung.github.io/semfindr/index.html","id":"semfindr-finding-influential-cases-in-sem-","dir":"","previous_headings":"","what":"Influential Cases in Structural Equation Modeling","title":"Influential Cases in Structural Equation Modeling","text":"find(e)r influential cases structural equation modeling based mainly sensitivity analysis procedures presented Pek MacCallum (2011). package supports two approaches: leave-one-analysis approximate case influence.","code":""},{"path":"https://sfcheung.github.io/semfindr/index.html","id":"leave-one-out-analysis","dir":"","previous_headings":"","what":"Leave-One-Out Analysis","title":"Influential Cases in Structural Equation Modeling","text":"approach examines influence case refitting model case removed. Unlike similar packages, workflow adopted semfindr separates leave-one-analysis (refitting model one case removed) case influence measures. Users first leave-one-model fitting cases, cases selected based criteria (vignette(\"selecting_cases\", package = \"semfindr\")), using lavaan_rerun(). Users compute case influence measures using output lavaan_rerun(). approaches avoids unnecessarily refitting models set influence measures, also allows analyzing probable influential cases model takes long time fit. functions designed flexible users can compute case influence measures standardized parameter estimates generalized Cook’s distance selected parameters; changes raw standardized estimates parameters; changes fit measures supported lavaan::fitMeasures(). package can also generate plots visualize case influence, including bubble plot similar car::influencePlot() plots generated ggplot plots can modified users. can found Quick Start (vignette(\"semfindr\", package = \"semfindr\")).","code":""},{"path":"https://sfcheung.github.io/semfindr/index.html","id":"approximate-case-influence","dir":"","previous_headings":"","what":"Approximate Case Influence","title":"Influential Cases in Structural Equation Modeling","text":"approach computes approximate influence case using casewise scores casewise likelihood. method efficient requires refitting model case. However, can approximate influence, unlike leave-one-approach, produce exact influence. approach can used number cases large /model takes long time fit. Technical details can found vignette Approximate Case Influence Using Scores Casewise Likelihood (vignette(\"casewise_scores\", package = \"semfindr\")).","code":""},{"path":"https://sfcheung.github.io/semfindr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Influential Cases in Structural Equation Modeling","text":"stable version CRAN can installed install.packages(): latest developmental version can installed remotes::install_github: can learn package Github page package Quick Start (vignette(\"semfindr\", package = \"semfindr\")).","code":"install.packages(\"semfindr\") remotes::install_github(\"sfcheung/semfindr\")"},{"path":"https://sfcheung.github.io/semfindr/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Influential Cases in Structural Equation Modeling","text":"Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202-228. https://doi.org/10.1080/00273171.2011.561068","code":""},{"path":"https://sfcheung.github.io/semfindr/index.html","id":"comments-suggestions-and-bug-reports","dir":"","previous_headings":"","what":"Comments, Suggestions, and Bug Reports","title":"Influential Cases in Structural Equation Modeling","text":"Please post comments, suggestions, bug reports issues GitHub, contact maintainer email. Thanks advance trying semfindr.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/approx_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatibility Check for the '_approx' Functions — approx_check","title":"Compatibility Check for the '_approx' Functions — approx_check","text":"Gets 'lavaan' output checks whether supported functions using approximate approach.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/approx_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatibility Check for the '_approx' Functions — approx_check","text":"","code":"approx_check(   fit,   print_messages = TRUE,   multiple_group = FALSE,   equality_constraint = FALSE )"},{"path":"https://sfcheung.github.io/semfindr/reference/approx_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatibility Check for the '_approx' Functions — approx_check","text":"fit output lavaan, lavaan::cfa() lavaan::sem(). print_messages Logical. TRUE, print messages check. FALSE, messages attached return value attribute. Default TRUE. multiple_group Logical. Whether multiple-group models supported. yes, check multiple-groups models skipped. Default FALSE. equality_constraint Logical. Whether models equality constraints supported. yes, check equality constraints skipped. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/approx_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compatibility Check for the '_approx' Functions — approx_check","text":"single-element vector. confirmed supported, return 0. confirmed support may still work, return 1. confirmed yet supported, return negative number, value number without negative sign number tests failed.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/approx_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compatibility Check for the '_approx' Functions — approx_check","text":"function supposed used users. called functions est_change_approx() see analysis passed supported. , messages printed indicate .","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/approx_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compatibility Check for the '_approx' Functions — approx_check","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/approx_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compatibility Check for the '_approx' Functions — approx_check","text":"","code":"dat <- cfa_dat  mod <- \" f1 =~ x4 + x5 + x6 \" dat_gp <- dat dat$gp <- rep(c(\"gp1\", \"gp2\"), length.out = nrow(dat_gp))  fit01 <- lavaan::sem(mod, dat) # If supported, returns a zero approx_check(fit01) #> [1] 0  fit05 <- lavaan::cfa(mod, dat, group = \"gp\") # If not supported, returns a negative number approx_check(fit05) #> [1] -1 #> attr(,\"info\") #> [1] \"Multigroup models are not yet supported.\""},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Data: A CFA Model — cfa_dat","title":"Sample Data: A CFA Model — cfa_dat","text":"six-variable dataset 100 cases.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Data: A CFA Model — cfa_dat","text":"","code":"cfa_dat"},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Data: A CFA Model — cfa_dat","text":"data frame 100 rows 6 variables: x1 Indicator. Numeric. x2 Indicator. Numeric. x3 Indicator. Numeric. x4 Indicator. Numeric. x5 Indicator. Numeric. x6 Indicator. Numeric.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Data: A CFA Model — cfa_dat","text":"","code":"library(lavaan) #> This is lavaan 0.6-17 #> lavaan is FREE software! Please report any bugs. data(cfa_dat) mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 \" fit <- cfa(mod, cfa_dat) summary(fit) #> lavaan 0.6.17 ended normally after 37 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        13 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                12.027 #>   Degrees of freedom                                 8 #>   P-value (Chi-square)                           0.150 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                0.767    0.225    3.405    0.001 #>     x3                1.047    0.296    3.542    0.000 #>   f2 =~                                                #>     x4                1.000                            #>     x5                2.114    0.869    2.431    0.015 #>     x6                0.992    0.377    2.635    0.008 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 ~~                                                #>     f2                0.171    0.091    1.884    0.060 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                0.841    0.221    3.802    0.000 #>    .x2                1.214    0.208    5.823    0.000 #>    .x3                1.018    0.251    4.064    0.000 #>    .x4                1.103    0.186    5.918    0.000 #>    .x5                0.993    0.437    2.270    0.023 #>    .x6                0.882    0.158    5.575    0.000 #>     f1                0.708    0.262    2.703    0.007 #>     f2                0.250    0.151    1.659    0.097 #>"},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Data: A CFA Model with an Influential Case — cfa_dat2","title":"Sample Data: A CFA Model with an Influential Case — cfa_dat2","text":"six-variable dataset 100 cases, one influential case.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Data: A CFA Model with an Influential Case — cfa_dat2","text":"","code":"cfa_dat2"},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Data: A CFA Model with an Influential Case — cfa_dat2","text":"data frame 100 rows 7 variables: case_id Case ID. Character. x1 Indicator. Numeric. x2 Indicator. Numeric. x3 Indicator. Numeric. x4 Indicator. Numeric. x5 Indicator. Numeric. x6 Indicator. Numeric.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Data: A CFA Model with an Influential Case — cfa_dat2","text":"","code":"library(lavaan) data(cfa_dat2) mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 \" fit <- cfa(mod, cfa_dat2) summary(fit) #> lavaan 0.6.17 ended normally after 36 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        13 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                16.218 #>   Degrees of freedom                                 8 #>   P-value (Chi-square)                           0.039 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                2.875    1.336    2.152    0.031 #>     x3                1.827    0.847    2.158    0.031 #>   f2 =~                                                #>     x4                1.000                            #>     x5                2.434    0.672    3.625    0.000 #>     x6                1.940    0.523    3.709    0.000 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 ~~                                                #>     f2                0.063    0.035    1.797    0.072 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                0.919    0.134    6.840    0.000 #>    .x2                0.383    0.162    2.366    0.018 #>    .x3                0.542    0.100    5.438    0.000 #>    .x4                0.767    0.113    6.793    0.000 #>    .x5                0.227    0.136    1.675    0.094 #>    .x6                0.472    0.108    4.378    0.000 #>     f1                0.073    0.063    1.161    0.245 #>     f2                0.149    0.078    1.926    0.054 #>  inf_out <- influence_stat(fit) gcd_plot(inf_out)"},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat_heywood.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Data: A CFA Model with a Heywood Case — cfa_dat_heywood","title":"Sample Data: A CFA Model with a Heywood Case — cfa_dat_heywood","text":"six-variable dataset 60 cases, one case resulting negative variance removed.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat_heywood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Data: A CFA Model with a Heywood Case — cfa_dat_heywood","text":"","code":"cfa_dat_heywood"},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat_heywood.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Data: A CFA Model with a Heywood Case — cfa_dat_heywood","text":"data frame 60 rows 6 variables: x1 Indicator. Numeric. x2 Indicator. Numeric. x3 Indicator. Numeric. x4 Indicator. Numeric. x5 Indicator. Numeric. x6 Indicator. Numeric.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat_heywood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Data: A CFA Model with a Heywood Case — cfa_dat_heywood","text":"","code":"library(lavaan) data(cfa_dat_heywood) mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 \" # The following will result in a warning fit <- cfa(mod, cfa_dat_heywood) #> Warning: lavaan WARNING: some estimated ov variances are negative # One variance is negative parameterEstimates(fit, output = \"text\") #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>   f1 =~                                                                  #>     x1                1.000                               1.000    1.000 #>     x2                0.148    0.191    0.776    0.438   -0.226    0.523 #>     x3                0.416    0.369    1.126    0.260   -0.308    1.140 #>   f2 =~                                                                  #>     x4                1.000                               1.000    1.000 #>     x5                0.702    0.299    2.346    0.019    0.115    1.288 #>     x6                0.504    0.236    2.140    0.032    0.042    0.966 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>   f1 ~~                                                                  #>     f2                0.402    0.191    2.100    0.036    0.027    0.777 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>    .x1               -0.004    1.263   -0.004    0.997   -2.479    2.470 #>    .x2                1.902    0.348    5.460    0.000    1.220    2.585 #>    .x3                1.296    0.322    4.024    0.000    0.665    1.928 #>    .x4                0.569    0.354    1.605    0.108   -0.126    1.263 #>    .x5                1.000    0.251    3.977    0.000    0.507    1.492 #>    .x6                1.044    0.215    4.863    0.000    0.624    1.465 #>     f1                1.504    1.292    1.164    0.245   -1.029    4.036 #>     f2                0.872    0.416    2.095    0.036    0.056    1.688 #>  # Fit the model with the first case removed fit_no_case_1 <- cfa(mod, cfa_dat_heywood[-1, ]) # Results admissible parameterEstimates(fit_no_case_1, output = \"text\") #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>   f1 =~                                                                  #>     x1                1.000                               1.000    1.000 #>     x2                0.552    0.307    1.800    0.072   -0.049    1.154 #>     x3                0.860    0.436    1.971    0.049    0.005    1.715 #>   f2 =~                                                                  #>     x4                1.000                               1.000    1.000 #>     x5                0.887    0.373    2.377    0.017    0.156    1.619 #>     x6                0.626    0.275    2.276    0.023    0.087    1.165 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>   f1 ~~                                                                  #>     f2                0.252    0.164    1.536    0.125   -0.070    0.574 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>    .x1                0.810    0.369    2.196    0.028    0.087    1.534 #>    .x2                1.360    0.278    4.886    0.000    0.815    1.906 #>    .x3                0.947    0.306    3.090    0.002    0.346    1.548 #>    .x4                0.765    0.310    2.466    0.014    0.157    1.373 #>    .x5                0.904    0.276    3.277    0.001    0.363    1.445 #>    .x6                1.014    0.221    4.592    0.000    0.581    1.446 #>     f1                0.689    0.410    1.683    0.092   -0.114    1.493 #>     f2                0.695    0.359    1.936    0.053   -0.009    1.399 #>"},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat_mg.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Data: A Multiple-Group CFA Model with an Influential Case — cfa_dat_mg","title":"Sample Data: A Multiple-Group CFA Model with an Influential Case — cfa_dat_mg","text":"six-variable dataset 100 cases.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat_mg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Data: A Multiple-Group CFA Model with an Influential Case — cfa_dat_mg","text":"","code":"cfa_dat_mg"},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat_mg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Data: A Multiple-Group CFA Model with an Influential Case — cfa_dat_mg","text":"data frame 100 rows 6 variables: x1 Indicator. Numeric. x2 Indicator. Numeric. x3 Indicator. Numeric. x4 Indicator. Numeric. x5 Indicator. Numeric. x6 Indicator. Numeric. gp Group variable. Character. Either \"GroupA\" \"GroupB\".","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/cfa_dat_mg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Data: A Multiple-Group CFA Model with an Influential Case — cfa_dat_mg","text":"","code":"library(lavaan) data(cfa_dat_mg) mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 \" fit1 <- cfa(mod, cfa_dat_mg, group = \"gp\") fit2 <- cfa(mod, cfa_dat_mg, group = \"gp\",             group.equal = \"loadings\") fit3 <- cfa(mod, cfa_dat_mg, group = \"gp\",             group.equal = c(\"loadings\", \"intercepts\")) lavTestLRT(fit1, fit2, fit3) #>  #> Chi-Squared Difference Test #>  #>      Df    AIC    BIC  Chisq Chisq diff RMSEA Df diff Pr(>Chisq) #> fit1 16 1878.3 1977.3 30.454                                     #> fit2 20 1871.7 1960.3 31.904      1.450     0       4     0.8355 #> fit3 24 1866.2 1944.3 34.357      2.453     0       4     0.6531 lavTestLRT(fit1, fit3) #>  #> Chi-Squared Difference Test #>  #>      Df    AIC    BIC  Chisq Chisq diff RMSEA Df diff Pr(>Chisq) #> fit1 16 1878.3 1977.3 30.454                                     #> fit3 24 1866.2 1944.3 34.357      3.903     0       8     0.8658  # Drop the first case cfa_dat_mgb <- cfa_dat_mg[-1, ] fit1b <- cfa(mod, cfa_dat_mgb, group = \"gp\") fit2b <- cfa(mod, cfa_dat_mgb, group = \"gp\",              group.equal = \"loadings\") fit3b <- cfa(mod, cfa_dat_mgb, group = \"gp\",              group.equal = c(\"loadings\", \"intercepts\")) lavTestLRT(fit1b, fit2b, fit3b) #>  #> Chi-Squared Difference Test #>  #>       Df    AIC    BIC  Chisq Chisq diff RMSEA Df diff Pr(>Chisq) #> fit1b 16 1861.0 1959.6 29.392                                     #> fit2b 20 1854.4 1942.6 30.731     1.3391     0       4     0.8547 #> fit3b 24 1849.3 1927.2 33.714     2.9826     0       4     0.5607 lavTestLRT(fit1b, fit3b) #>  #> Chi-Squared Difference Test #>  #>       Df    AIC    BIC  Chisq Chisq diff RMSEA Df diff Pr(>Chisq) #> fit1b 16 1861.0 1959.6 29.392                                     #> fit3b 24 1849.3 1927.2 33.714     4.3217     0       8      0.827"},{"path":"https://sfcheung.github.io/semfindr/reference/est_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Case Influence on Parameter Estimates — est_change","title":"Standardized Case Influence on Parameter Estimates — est_change","text":"Gets lavaan_rerun() output computes standardized changes selected parameters case included.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Case Influence on Parameter Estimates — est_change","text":"","code":"est_change(rerun_out, parameters = NULL)"},{"path":"https://sfcheung.github.io/semfindr/reference/est_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Case Influence on Parameter Estimates — est_change","text":"rerun_out output lavaan_rerun(). parameters character vector specify selected parameters. parameter named lavaan syntax, e.g., x ~ y x ~~ y, appeared columns lhs, op, rhs output lavaan::parameterEstimates(). Supports specifying operator select parameters operators: ~, ~~, =~, ~1. vector can contain parameter names operators. details can found help pars_id(). omitted NULL, default, changes free parameters computed.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Case Influence on Parameter Estimates — est_change","text":"est_change-class object, matrix number columns equals number requested parameters plus one, last column generalized Cook's distance. number rows equal number cases. row names case identification values used lavaan_rerun(). elements standardized difference. Please see Pek MacCallum (2011), Equation 7. print method available user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Case Influence on Parameter Estimates — est_change","text":"case, est_change() computes differences estimates selected parameters without case: (Estimate case) - (Estimate without case). differences standardized dividing raw differences standard errors (Pek & MacCallum, 2011). measure standardized influence case parameter estimates included. value case positive, including case increases estimate. value case negative, including case decreases estimate. analysis admissible converge case deleted, NAs turned case differences. Unlike est_change_raw(), est_change() support computing standardized changes standardized estimates. also compute generalized Cook's distance (gCD), proposed Pek MacCallum (2011) structural equation modeling. parameters selected (free parameters, default) used computing gCD. Since version 0.1.4.8, () model one equality constraints, (b) selected parameters linearly dependent constrained equal due constraint(s), gCD computed removing parameters remaining parameters linearly dependent constrained equal. (Support equality constraints linearly dependent parameters available 0.1.4.8 later version). Supports single-group multiple-group models. (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Case Influence on Parameter Estimates — est_change","text":"Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202-228. doi:10.1080/00273171.2011.561068","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Case Influence on Parameter Estimates — est_change","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Case Influence on Parameter Estimates — est_change","text":"","code":"library(lavaan)  # A path model  dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>  # Fit the model several times. Each time with one case removed. # For illustration, do this only for four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = c(2, 4, 7, 9)) #> The expected CPU time is 0.16 second(s). #> Could be faster if run in parallel. # Compute the standardized changes in parameter estimates # if a case is included vs. if this case is excluded. # That is, case influence on parameter estimates, standardized. out <- est_change(fit_rerun) # Case influence: out #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>       a1     a2      b m1~~m1 dv~~dv   gcd #> 9 -0.048 -0.025 -0.083 -0.033  0.283 0.091 #> 7 -0.119  0.073  0.065 -0.002 -0.040 0.026 #> 2  0.007  0.003 -0.013 -0.067 -0.058 0.008 #> 4 -0.024 -0.003  0.022 -0.051 -0.044 0.006 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance. # Note that these are the differences divided by the standard errors # The rightmost column, `gcd`, contains the # generalized Cook's distances (Pek & MacCallum, 2011). out[, \"gcd\", drop = FALSE] #>           gcd #> 2 0.008147128 #> 4 0.005610493 #> 7 0.025740465 #> 9 0.090844702  # Compute the changes for the paths from iv1 and iv2 to m1 out2 <- est_change(fit_rerun, c(\"m1 ~ iv1\", \"m1 ~ iv2\")) # Case influence: out2 #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>       a1     a2   gcd #> 7 -0.119  0.073 0.020 #> 9 -0.048 -0.025 0.003 #> 4 -0.024 -0.003 0.001 #> 2  0.007  0.003 0.000 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance. # Note that only the changes in the selected parameters are included. # The generalized Cook's distance is computed only from the selected # parameter estimates.  # A CFA model  dat <- cfa_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f1 ~~ f2 \" # Fit the model fit <- lavaan::cfa(mod, dat)  # Examine four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = c(2, 3, 5, 7)) #> The expected CPU time is 0.27 second(s). #> Could be faster if run in parallel. # Compute the standardized changes in parameter estimates # if a case is included vs. if a case is excluded. # That is, case influence on parameter estimates, standardized. # For free loadings only out <- est_change(fit_rerun, parameters = \"=~\") out #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>   f1=~x2 f1=~x3 f2=~x5 f2=~x6   gcd #> 3 -0.916 -0.444 -0.514 -0.043 1.132 #> 2  0.463  0.446  0.155 -0.087 0.338 #> 5 -0.019 -0.106  0.006 -0.026 0.014 #> 7 -0.021 -0.011 -0.029 -0.011 0.001 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance.  # A latent variable model  dat <- sem_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   a * f1 f3 ~   b * f2 ab := a * b \" # Fit the model fit <- lavaan::sem(mod, dat)  # Examine four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = c(2, 3, 5, 7)) #> The expected CPU time is 0.29 second(s). #> Could be faster if run in parallel. # Compute the changes in parameter estimates if a case is included # vs. if a case is excluded. # That is, standardized case influence on parameter estimates. # For structural paths only out <- est_change(fit_rerun, parameters = \"~\") out #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>        a      b   gcd #> 3 -0.123 -0.096 0.027 #> 7 -0.048  0.110 0.014 #> 2  0.044 -0.092 0.010 #> 5 -0.065 -0.018 0.005 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance."},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_approx.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Case Influence on Parameter Estimates (Approximate) — est_change_approx","title":"Standardized Case Influence on Parameter Estimates (Approximate) — est_change_approx","text":"Gets lavaan::lavaan() output computes approximate standardized changes selected parameters case included.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_approx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Case Influence on Parameter Estimates (Approximate) — est_change_approx","text":"","code":"est_change_approx(   fit,   parameters = NULL,   case_id = NULL,   allow_inadmissible = FALSE,   skip_all_checks = FALSE )"},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_approx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Case Influence on Parameter Estimates (Approximate) — est_change_approx","text":"fit output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()). parameters character vector specify selected parameters. parameter named lavaan syntax, e.g., x ~ y x ~~ y, appeared columns lhs, op, rhs output lavaan::parameterEstimates(). Supports specifying operator select parameters operators: ~, ~~, =~, ~1. vector can contain parameter names operators. details can found help pars_id(). omitted NULL, default, changes free parameters computed. case_id character vector length equals number cases (number rows data fit), vector case identification values. NULL, default, case.idx used lavaan functions used case identification values. allow_inadmissible TRUE, accepts fit object inadmissible results (.e., post.check lavaan::lavInspect() FALSE). Default FALSE. skip_all_checks TRUE, skips checks allows users run function object lavaan class. users experiment functions models officially supported. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_approx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Case Influence on Parameter Estimates (Approximate) — est_change_approx","text":"est_change-class object, matrix number columns equals number requested parameters plus one, last column approximate generalized Cook's distance. number rows equal number cases. row names case identification values used lavaan_rerun(). elements approximate standardized differences. print method available user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_approx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Case Influence on Parameter Estimates (Approximate) — est_change_approx","text":"case, est_change_approx() computes approximate differences estimates selected parameters without case: (Estimate case) - (Estimate without case) differences standardized dividing approximate raw differences standard errors. measure standardized influence case parameter estimates included. value case positive, including case increases estimate. value case negative, including case decreases estimate. model refitted. Therefore, result approximation est_change(). However, approximation useful identifying potentially influential cases sample size large model takes long time fit. function can used identify potentially influential cases quickly select conduct leave-one-sensitivity analysis using lavaan_rerun() est_change(). function also computes approximate generalized Cook's distance (gCD). avoid confusion, labelled gcd_approx. technical details, please refer vignette approach: vignette(\"casewise_scores\", package = \"semfindr\") approximate approach supports model equality constraints (available 0.1.4.8 later version). Supports single-group multiple-group models. (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_approx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Case Influence on Parameter Estimates (Approximate) — est_change_approx","text":"Idea Mark Hok Chio Lai https://orcid.org/0000-0002-9196-7406, implemented Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_approx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Case Influence on Parameter Estimates (Approximate) — est_change_approx","text":"","code":"library(lavaan)  # A path model  dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>   # Approximate standardized changes and gCD out_approx <- est_change_approx(fit) head(out_approx) #>         m1~iv1       m1~iv2        dv~m1      m1~~m1      dv~~dv  gcd_approx #> 1  0.024713396 -0.030383580  0.052370026 -0.03784100  0.01630488 0.005850455 #> 2  0.007254736  0.003469647 -0.013223396 -0.06916983 -0.05953293 0.008312026 #> 3 -0.037982774 -0.039820283 -0.030150418 -0.06518369 -0.04609708 0.009904544 #> 4 -0.024353717 -0.003172373  0.021948305 -0.05277394 -0.04504791 0.005719499 #> 5  0.067010210  0.027951233  0.032981527  0.04860722 -0.06774242 0.012793226 #> 6  0.004065567  0.000983731  0.009640981 -0.07086163 -0.05565453 0.007984573  # Fit the model several times. Each time with one case removed. # For illustration, do this only for the first 10 cases. fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.37 second(s). #> Could be faster if run in parallel. # Compute the changes in chisq if a case is removed out <- est_change(fit_rerun) head(out) #>             a1            a2            b      m1~~m1      dv~~dv         gcd #> 1  0.024466586 -0.0300705396  0.051965997 -0.03663071  0.01717427 0.005891665 #> 2  0.007153846  0.0034230301 -0.013043400 -0.06744802 -0.05802199 0.008147128 #> 3 -0.038282397 -0.0401051535 -0.029790144 -0.06335355 -0.04479763 0.009834826 #> 4 -0.024048244 -0.0031358865  0.021674577 -0.05137193 -0.04379632 0.005610493 #> 5  0.066686613  0.0278462201  0.032782898  0.04979077 -0.06598323 0.013001467 #> 6  0.004007056  0.0009699846  0.009509592 -0.06910195 -0.05422999 0.007823146  # Compare the results plot(out_approx[1:10, 1], out[, 1]) abline(a = 0, b = 1)  plot(out_approx[1:10, 2], out[, 2]) abline(a = 0, b = 1)  plot(out_approx[1:10, 3], out[, 3]) abline(a = 0, b = 1)  plot(out_approx[1:10, \"gcd_approx\"], out[, \"gcd\"]) abline(a = 0, b = 1)   # A CFA model  dat <- cfa_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f1 ~~ f2 \" # Fit the model fit <- lavaan::cfa(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 37 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        13 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                12.027 #>   Degrees of freedom                                 8 #>   P-value (Chi-square)                           0.150 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                0.767    0.225    3.405    0.001 #>     x3                1.047    0.296    3.542    0.000 #>   f2 =~                                                #>     x4                1.000                            #>     x5                2.114    0.869    2.431    0.015 #>     x6                0.992    0.377    2.635    0.008 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 ~~                                                #>     f2                0.171    0.091    1.884    0.060 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                0.841    0.221    3.802    0.000 #>    .x2                1.214    0.208    5.823    0.000 #>    .x3                1.018    0.251    4.064    0.000 #>    .x4                1.103    0.186    5.918    0.000 #>    .x5                0.993    0.437    2.270    0.023 #>    .x6                0.882    0.158    5.575    0.000 #>     f1                0.708    0.262    2.703    0.007 #>     f2                0.250    0.151    1.659    0.097 #>   # Approximate standardized changes and gCD # Compute gCD only for free loadings out_approx <- est_change_approx(fit,                                 parameters = \"=~\") head(out_approx) #>        f1=~x2      f1=~x3        f2=~x5        f2=~x6  gcd_approx #> 1  0.00860861  0.03671007  0.0052771435 -0.0386456483 0.008701511 #> 2  0.26422237  0.25249192  0.0666230695 -0.1166435727 0.393874919 #> 3 -0.64655608 -0.01383399 -0.5070489021 -0.0291742969 3.185538515 #> 4 -0.04280393 -0.03874385 -0.0005649712  0.0060114092 0.007849339 #> 5  0.02203244 -0.07335966  0.0069759940 -0.0230738431 0.022193005 #> 6  0.01315800  0.06477736 -0.0193435883  0.0004489651 0.018492136  # A latent variable model  dat <- sem_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   a * f1 f3 ~   b * f2 ab := a * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 37 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        20 #>  #>   Number of observations                           200 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                41.768 #>   Degrees of freedom                                25 #>   P-value (Chi-square)                           0.019 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                0.590    0.145    4.054    0.000 #>     x3                0.808    0.168    4.812    0.000 #>   f2 =~                                                #>     x4                1.000                            #>     x5                0.730    0.099    7.400    0.000 #>     x6                0.429    0.083    5.166    0.000 #>   f3 =~                                                #>     x7                1.000                            #>     x8                2.019    0.589    3.426    0.001 #>     x9                2.747    0.788    3.486    0.000 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f2 ~                                                 #>     f1         (a)    1.115    0.233    4.788    0.000 #>   f3 ~                                                 #>     f2         (b)    0.206    0.061    3.394    0.001 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                1.183    0.173    6.831    0.000 #>    .x2                1.129    0.127    8.909    0.000 #>    .x3                1.027    0.134    7.667    0.000 #>    .x4                0.833    0.173    4.812    0.000 #>    .x5                1.078    0.140    7.714    0.000 #>    .x6                1.234    0.132    9.367    0.000 #>    .x7                1.056    0.112    9.428    0.000 #>    .x8                1.042    0.139    7.478    0.000 #>    .x9                1.077    0.197    5.470    0.000 #>     f1                0.658    0.190    3.474    0.001 #>    .f2                0.647    0.215    3.010    0.003 #>    .f3                0.062    0.035    1.771    0.077 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     ab                0.230    0.079    2.895    0.004 #>   # Approximate standardized changes and gCD # Compute gCD only for structural paths out_approx <- est_change_approx(fit,                                 parameters = \"~\") head(out_approx) #>          f2~f1        f3~f2  gcd_approx #> 1 -0.004699340 -0.129875652 0.090920570 #> 2  0.047349346 -0.091081341 0.043044949 #> 3 -0.135088160 -0.090719323 0.136100353 #> 4  0.260922754  0.003871945 0.249947419 #> 5 -0.064745123 -0.016081058 0.018835545 #> 6 -0.009180409 -0.015223815 0.001833637"},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots of Case Influence on\nParameter Estimates — est_change_plot","title":"Plots of Case Influence on\nParameter Estimates — est_change_plot","text":"Gets output functions est_change() est_change_approx() plots case influence selected parameters.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots of Case Influence on\nParameter Estimates — est_change_plot","text":"","code":"est_change_plot(   change,   parameters,   cutoff_change = NULL,   largest_change = 1,   title = TRUE,   point_aes = list(),   vline_aes = list(),   hline_aes = list(),   cutoff_line_aes = list(),   case_label_aes = list(),   wrap_aes = list() )  est_change_gcd_plot(   change,   parameters,   cutoff_gcd = NULL,   largest_gcd = 1,   cutoff_change = NULL,   largest_change = 1,   title = TRUE,   point_aes = list(),   hline_aes = list(),   cutoff_line_aes = list(),   case_label_aes = list(),   wrap_aes = list() )"},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots of Case Influence on\nParameter Estimates — est_change_plot","text":"change output est_change(), est_change_raw(), est_change_approx(), est_change_raw_approx(). parameters character vector, specifies selected parameters. parameter named lavaan syntax, e.g., x ~ y x ~~ y, appeared columns lhs, op, rhs output lavaan::parameterEstimates(). Supports specifying operator select parameters operators: ~, ~~, =~, ~1. vector can contain parameter names operators. numeric vector, specifies columns used. omitted NULL, default, changes parameters change. used. cutoff_change Cases absolute changes larger value labeled. Default NULL. NULL, cutoff line drawn. largest_change number cases largest absolute changes labelled. Default integer, rounded nearest integer. title TRUE, default, default title added plot. string, used title. FALSE, title added plot. point_aes named list arguments passed ggplot2::geom_point() modify draw points. Default list() internal default settings used. vline_aes named list arguments passed ggplot2::geom_segment() modify draw line case index plot est_change_plot(). Default list() internal default settings used. hline_aes named list arguments passed ggplot2::geom_hline() modify draw horizontal line zero case influence. Default list() internal default settings used. cutoff_line_aes named list arguments passed ggplot2::geom_hline() est_change_plot() ggplot2::geom_vline() est_change_gcd_plot() modify draw line user cutoff value (cutoff_change cutoff_gcd). Default list() internal default settings used. case_label_aes named list arguments passed ggrepel::geom_label_repel() modify draw labels cases marked (based cutoff_change, cutoff_gcd, largest_change, largest_gcd). Default list() internal default settings used. wrap_aes named list arguments passed ggplot2::facet_wrap() modify plots organized. Default list() internal default settings used. cutoff_gcd Cases generalized Cook's distance approximate generalized Cook's distance larger value labeled. Default NULL. NULL, cutoff line drawn. largest_gcd number cases largest generalized Cook's distance approximate generalized Cook's distance labelled. Default 1. integer, rounded nearest integer.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots of Case Influence on\nParameter Estimates — est_change_plot","text":"ggplot2 plot. Plotted default. assigned variable called inside function, plotted. Use plot() plot .","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots of Case Influence on\nParameter Estimates — est_change_plot","text":"output est_change(), est_change_raw(), est_change_approx(), est_change_raw_approx() simply matrix. Therefore, functions work matrix provided. Row number used x-axis applicable. However, case identification values used labeling individual cases stored row names. default settings plots good enough diagnostic purpose. desired, users can use *_aes arguments nearly fully customize major elements plots, building ggplot2 plot.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_plot.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plots of Case Influence on\nParameter Estimates — est_change_plot","text":"est_change_plot(): Index plot case influence parameters. est_change_gcd_plot(): Plot case influence parameter estimates generalized Cook's distance.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plots of Case Influence on\nParameter Estimates — est_change_plot","text":"Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202-228. doi:10.1080/00273171.2011.561068","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plots of Case Influence on\nParameter Estimates — est_change_plot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots of Case Influence on\nParameter Estimates — est_change_plot","text":"","code":"library(lavaan)  # A path model  dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>   # Compute approximate case influence on parameters estimates out <- est_change_approx(fit)  # Plot case influence for all regression coefficients est_change_plot(out,                 parameters = \"~\",                 largest_change = 2)   # Plot case influence against approximated gCD for all # regression coefficients # Label top 5 cases with largest approximated gCD est_change_gcd_plot(out,                     parameters = \"~\",                     largest_gcd = 5)   # Customize elements in a plot. # For example, change the color and shape of the points.  est_change_plot(out,                 parameters = \"~\",                 largest_change = 2,                 point_aes = list(shape = 5,                                  color = \"red\"))"},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Influence on Parameter Estimates — est_change_raw","title":"Case Influence on Parameter Estimates — est_change_raw","text":"Gets lavaan_rerun() output computes changes selected parameters case included.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case Influence on Parameter Estimates — est_change_raw","text":"","code":"est_change_raw(   rerun_out,   parameters = NULL,   standardized = FALSE,   user_defined_label_full = FALSE )"},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case Influence on Parameter Estimates — est_change_raw","text":"rerun_out output lavaan_rerun(). parameters character vector specify selected parameters. parameter named lavaan syntax, e.g., x ~ y x ~~ y, appeared columns lhs, op, rhs output lavaan::parameterEstimates(). Supports specifying operator select parameters operators: ~, ~~, =~, ~1. vector can contain parameter names operators. details can found help pars_id(). omitted NULL, default, changes free parameters computed. standardized TRUE, changes full standardized solution returned (type = std.lavaan::standardizedSolution()). Otherwise, changes unstandardized solution returned. Default FALSE. user_defined_label_full Logical. TRUE, use full labels user-defined parameters (parameters created :=), include definition. FALSE, label right-hand side := used. Default FALSE. previous version, full labels used. Set TRUE backward compatibility needed.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case Influence on Parameter Estimates — est_change_raw","text":"est_change-class object, matrix number columns equals number requested parameters, number rows equals number cases. row names case identification values used lavaan_rerun(). elements raw differences. print method available user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case Influence on Parameter Estimates — est_change_raw","text":"case, est_change_raw() computes differences estimates selected parameters without case: (Estimate case) - (Estimate without case). change raw change, either standardized unstandardized solution. change divided standard error. measure influence case parameter estimates included. value case positive, including case increases estimate. value case negative, including case decreases estimate. analysis admissible converge case deleted, NAs returned case differences. Supports single-group multiple-group models. (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Case Influence on Parameter Estimates — est_change_raw","text":"Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202-228. doi:10.1080/00273171.2011.561068","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Case Influence on Parameter Estimates — est_change_raw","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case Influence on Parameter Estimates — est_change_raw","text":"","code":"library(lavaan)  # A path model  dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat)  # Fit the model n times. Each time with one case is removed. # For illustration, do this only for four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = c(3, 5, 7, 8)) #> The expected CPU time is 0.15 second(s). #> Could be faster if run in parallel. # Compute the changes in parameter estimates if a case is included # vs. if this case is excluded. # That is, case influence on parameter estimates. out <- est_change_raw(fit_rerun) # Results excluding a case out #>  #> -- Case Influence on Parameter Estimates -- #>  #>   id m1~iv1 id m1~iv2 id  dv~m1 id m1~~m1 id dv~~dv id    a1b id    a2b #> 1  7 -0.013  7  0.007  7  0.007  3 -0.008  8 -0.013  7 -0.005  7  0.007 #> 2  5  0.007  8  0.007  5  0.004  8 -0.007  5 -0.013  5  0.004  8  0.005 #> 3  8  0.006  3 -0.004  3 -0.003  5  0.006  3 -0.008  8  0.004  3 -0.004 #> 4  3 -0.004  5  0.003  8  0.003  7  0.000  7 -0.008  3 -0.003  5  0.003 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable. # Note that these are the differences in parameter estimates.  # The parameter estimates from all cases (coef_all <- coef(fit)) #>     a1     a2      b m1~~m1 dv~~dv  #>  0.215  0.522  0.517  0.903  1.321  # The parameter estimates from manually deleting the third case fit_no_3 <- lavaan::sem(mod, dat[-3, ]) (coef_no_3 <- coef(fit_no_3)) #>     a1     a2      b m1~~m1 dv~~dv  #>  0.219  0.526  0.520  0.911  1.330  # The differences coef_all - coef_no_3 #>     a1     a2      b m1~~m1 dv~~dv  #> -0.004 -0.004 -0.003 -0.008 -0.008  # The first row of `est_change_raw(fit_rerun)` round(out[1, ], 3) #> m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv    a1b    a2b  #> -0.004 -0.004 -0.003 -0.008 -0.008 -0.003 -0.004   # Compute only the changes of the paths from iv1 and iv2 to m1 out2 <- est_change_raw(fit_rerun, c(\"m1 ~ iv1\", \"m1 ~ iv2\")) # Results excluding a case out2 #>  #> -- Case Influence on Parameter Estimates -- #>  #>   id m1~iv1 id m1~iv2 #> 1  7 -0.013  7  0.007 #> 2  5  0.007  8  0.007 #> 3  8  0.006  3 -0.004 #> 4  3 -0.004  5  0.003 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable. # Note that only the changes in the selected paths are included.  # Use standardized = TRUE to compare the differences in standardized solution out2_std <- est_change_raw(fit_rerun,                            c(\"m1 ~ iv1\", \"m1 ~ iv2\"),                            standardized = TRUE) out2_std #>  #> -- Case Influence on Standardized Parameter Estimates -- #>  #>   id m1~iv1 id m1~iv2 #> 1  7 -0.010  8  0.006 #> 2  8  0.005  7  0.006 #> 3  5  0.005  5 -0.001 #> 4  3 -0.002  3 -0.001 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable. (est_std_all <- parameterEstimates(fit,                  standardized = TRUE)[1:2, c(\"lhs\", \"op\", \"rhs\", \"std.all\")]) #>   lhs op rhs std.all #> 1  m1  ~ iv1   0.178 #> 2  m1  ~ iv2   0.459 (est_std_no_1 <- parameterEstimates(fit_no_3,                  standardized = TRUE)[1:2, c(\"lhs\", \"op\", \"rhs\", \"std.all\")]) #>   lhs op rhs std.all #> 1  m1  ~ iv1    0.18 #> 2  m1  ~ iv2    0.46 # The differences est_std_all$std.all - est_std_no_1$std.all #> [1] -0.0023823159 -0.0006520026 # The first row of `out2_std` out2_std[1, ] #>        m1~iv1        m1~iv2  #> -0.0023823159 -0.0006520026   # A CFA model  dat <- cfa_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f1 ~~ f2 \" # Fit the model fit <- lavaan::cfa(mod, dat)  # Examine four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = c(2, 3, 5, 7)) #> The expected CPU time is 0.24 second(s). #> Could be faster if run in parallel. # Compute the changes in parameter estimates if a case is included # vs. if this case is excluded. # That is, case influence on parameter estimates. # For free loadings only out <- est_change_raw(fit_rerun, parameters = \"=~\") out #>  #> -- Case Influence on Parameter Estimates -- #>  #>   id f1=~x2 id f1=~x3 id f2=~x5 id f2=~x6 #> 1  3 -0.307  3 -0.172  3 -1.016  2 -0.033 #> 2  2  0.097  2  0.121  2  0.121  3 -0.020 #> 3  7 -0.005  5 -0.032  7 -0.025  5 -0.010 #> 4  5 -0.004  7 -0.003  5  0.005  7 -0.004 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable. # For standardized loadings only out_std <- est_change_raw(fit_rerun, parameters = \"=~\",                           standardized = TRUE) out_std #>  #> -- Case Influence on Standardized Parameter Estimates -- #>  #>   id f1=~x1 id f1=~x2 id f1=~x3 id f2=~x4 id f2=~x5 id f2=~x6 #> 1  3  0.104  3 -0.059  2  0.029  3  0.095  3 -0.104  3  0.096 #> 2  2 -0.038  2  0.032  3  0.014  2 -0.011  2  0.023  2 -0.032 #> 3  5  0.010  7 -0.005  5 -0.009  7  0.004  5  0.002  5 -0.005 #> 4  7  0.000  5 -0.001  7 -0.001  5 -0.003  7 -0.001  7  0.003 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable.  # A latent variable model  dat <- sem_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   a * f1 f3 ~   b * f2 ab := a * b \" # Fit the model fit <- lavaan::sem(mod, dat)  # Examine four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = c(2, 3, 5, 7)) #> The expected CPU time is 0.22 second(s). #> Could be faster if run in parallel. # Compute the changes in parameter estimates if a case is included # vs. if this case is excluded. # That is, case influence on parameter estimates. # For structural paths only out <- est_change_raw(fit_rerun, parameters = \"~\") out #>  #> -- Case Influence on Parameter Estimates -- #>  #>   id  f2~f1 id  f3~f2 #> 1  3 -0.030  7  0.007 #> 2  5 -0.016  3 -0.006 #> 3  7 -0.011  2 -0.006 #> 4  2  0.010  5 -0.001 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable. # For standardized paths only out_std <- est_change_raw(fit_rerun, parameters = \"~\",                           standardized = TRUE) out_std #>  #> -- Case Influence on Standardized Parameter Estimates -- #>  #>   id  f2~f1 id  f3~f2 #> 1  3 -0.013  7  0.004 #> 2  7  0.012  3  0.004 #> 3  2  0.003  5 -0.002 #> 4  5  0.000  2 -0.001 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable."},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw_approx.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Influence on Parameter Estimates (Approximate) — est_change_raw_approx","title":"Case Influence on Parameter Estimates (Approximate) — est_change_raw_approx","text":"Gets lavaan::lavaan() output computes approximate changes selected parameters case included.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw_approx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case Influence on Parameter Estimates (Approximate) — est_change_raw_approx","text":"","code":"est_change_raw_approx(   fit,   parameters = NULL,   case_id = NULL,   allow_inadmissible = FALSE,   skip_all_checks = FALSE )"},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw_approx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case Influence on Parameter Estimates (Approximate) — est_change_raw_approx","text":"fit output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()). parameters character vector specify selected parameters. parameter named lavaan syntax, e.g., x ~ y x ~~ y, appeared columns lhs, op, rhs output lavaan::parameterEstimates(). Supports specifying operator select parameters operators: ~, ~~, =~, ~1. vector can contain parameter names operators. details can found help pars_id(). omitted NULL, default, changes free parameters computed. case_id character vector length equals number cases (number rows data fit), vector case identification values. NULL, default, case.idx used lavaan functions used case identification values. allow_inadmissible TRUE, accepts fit object inadmissible results (.e., post.check lavaan::lavInspect() FALSE). Default FALSE. skip_all_checks TRUE, skips checks allows users run function object lavaan class. users experiment functions models officially supported. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw_approx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case Influence on Parameter Estimates (Approximate) — est_change_raw_approx","text":"est_change-class object, matrix number columns equals number requested parameters, number rows equals number cases. row names case identification values. elements raw differences. print method available user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw_approx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case Influence on Parameter Estimates (Approximate) — est_change_raw_approx","text":"case, est_change_raw_approx() computes approximate differences estimates selected parameters without case: (Estimate case) - (Estimate without case). change approximate raw change. change divided standard error estimate (hence \"raw\" function name). measure influence case parameter estimates included. value case positive, including case increases estimate. value case negative, including case decreases estimate. model refitted. Therefore, result approximation est_change_raw(). However, approximation useful identifying potentially influential cases sample size large model takes long time fit. function can used identify potentially influential cases quickly select conduct leave-one-sensitivity analysis using lavaan_rerun() est_change_raw(). Unlike est_change_raw(), yet support computing changes standardized solution. technical details, please refer vignette approach: vignette(\"casewise_scores\", package = \"semfindr\") approximate approach supports model equality constraints (available 0.1.4.8 later version). Supports single-group multiple-group models. (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw_approx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Case Influence on Parameter Estimates (Approximate) — est_change_raw_approx","text":"Idea Mark Hok Chio Lai https://orcid.org/0000-0002-9196-7406, implemented Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/est_change_raw_approx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case Influence on Parameter Estimates (Approximate) — est_change_raw_approx","text":"","code":"library(lavaan)  # A path model  dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>  # Compute the approximate changes in parameter estimates if a case is included # vs. if this case is excluded. # That is, the approximate case influence on parameter estimates. out_approx <- est_change_raw_approx(fit) head(out_approx) #>          m1~iv1        m1~iv2        dv~m1       m1~~m1       dv~~dv #> 1  0.0025826195 -2.987160e-03  0.005478785 -0.004783799  0.003015677 #> 2  0.0007581403  3.411181e-04 -0.001383390 -0.008744342 -0.011010937 #> 3 -0.0039693069 -3.914928e-03 -0.003154241 -0.008240420 -0.008525904 #> 4 -0.0025450320 -3.118916e-04  0.002296162 -0.006671599 -0.008331854 #> 5  0.0070027557  2.748024e-03  0.003450422  0.006144848 -0.012529327 #> 6  0.0004248632  9.671545e-05  0.001008609 -0.008958217 -0.010293608 # Fit the model several times. Each time with one case removed. # For illustration, do this only for 10 selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.38 second(s). #> Could be faster if run in parallel. # Compute the changes in parameter estimates if a case is included # vs. if this case is excluded. # That is, the case influence on the parameter estimates. out <- est_change_raw(fit_rerun) out #>  #> -- Case Influence on Parameter Estimates -- #>  #>    id m1~iv1 id m1~iv2 id  dv~m1 id m1~~m1 id dv~~dv id    a1b id    a2b #> 1   7 -0.013  7  0.007  9 -0.009  6 -0.009  9  0.051  7 -0.005  7  0.007 #> 2   5  0.007  8  0.007 10 -0.008  2 -0.009  8 -0.013 10 -0.005  9 -0.006 #> 3   8  0.006 10  0.004  7  0.007  3 -0.008  5 -0.013  9 -0.005  8  0.005 #> 4  10 -0.006  3 -0.004  1  0.005 10 -0.007  2 -0.011  5  0.004  3 -0.004 #> 5   9 -0.005  1 -0.003  5  0.004  8 -0.007  6 -0.010  8  0.004  5  0.003 #> 6   3 -0.004  5  0.003  3 -0.003  4 -0.007  3 -0.008  3 -0.003 10 -0.002 #> 7   1  0.003  9 -0.003  8  0.003  5  0.006  4 -0.008  1  0.003  1  0.001 #> 8   4 -0.003  2  0.000  4  0.002  1 -0.005  7 -0.008  4 -0.001  4  0.001 #> 9   2  0.001  4  0.000  2 -0.001  9 -0.004 10  0.007  6  0.000  6  0.001 #> 10  6  0.000  6  0.000  6  0.001  7  0.000  1  0.003  2  0.000  2 -0.001 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable. # Compare the results plot(out_approx[1:10, 1], out[, 1]) abline(a = 0, b = 1)  plot(out_approx[1:10, 5], out[, 5]) abline(a = 0, b = 1)   # A CFA model dat <- cfa_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f1 ~~ f2 \" # Fit the model fit <- lavaan::cfa(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 37 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        13 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                12.027 #>   Degrees of freedom                                 8 #>   P-value (Chi-square)                           0.150 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                0.767    0.225    3.405    0.001 #>     x3                1.047    0.296    3.542    0.000 #>   f2 =~                                                #>     x4                1.000                            #>     x5                2.114    0.869    2.431    0.015 #>     x6                0.992    0.377    2.635    0.008 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 ~~                                                #>     f2                0.171    0.091    1.884    0.060 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                0.841    0.221    3.802    0.000 #>    .x2                1.214    0.208    5.823    0.000 #>    .x3                1.018    0.251    4.064    0.000 #>    .x4                1.103    0.186    5.918    0.000 #>    .x5                0.993    0.437    2.270    0.023 #>    .x6                0.882    0.158    5.575    0.000 #>     f1                0.708    0.262    2.703    0.007 #>     f2                0.250    0.151    1.659    0.097 #>  # Compute the approximate changes in parameter estimates if a case is included # vs. if this case is excluded. # That is, approximate case influence on parameter estimates. # Compute changes for free loadings only. out_approx <- est_change_raw_approx(fit,                                     parameters = \"=~\") head(out_approx) #>         f1=~x2       f1=~x3       f2=~x5        f2=~x6 #> 1  0.001920110  0.010740746  0.004541900 -0.0144098708 #> 2  0.058933568  0.073874875  0.057340739 -0.0434930940 #> 3 -0.144211320 -0.004047592 -0.436403769 -0.0108782714 #> 4 -0.009547216 -0.011335796 -0.000486256  0.0022414847 #> 5  0.004914233 -0.021463799  0.006004056 -0.0086035844 #> 6  0.002934830  0.018952764 -0.016648522  0.0001674064  # A latent variable model dat <- sem_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   a * f1 f3 ~   b * f2 ab := a * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 37 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        20 #>  #>   Number of observations                           200 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                41.768 #>   Degrees of freedom                                25 #>   P-value (Chi-square)                           0.019 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                0.590    0.145    4.054    0.000 #>     x3                0.808    0.168    4.812    0.000 #>   f2 =~                                                #>     x4                1.000                            #>     x5                0.730    0.099    7.400    0.000 #>     x6                0.429    0.083    5.166    0.000 #>   f3 =~                                                #>     x7                1.000                            #>     x8                2.019    0.589    3.426    0.001 #>     x9                2.747    0.788    3.486    0.000 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f2 ~                                                 #>     f1         (a)    1.115    0.233    4.788    0.000 #>   f3 ~                                                 #>     f2         (b)    0.206    0.061    3.394    0.001 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                1.183    0.173    6.831    0.000 #>    .x2                1.129    0.127    8.909    0.000 #>    .x3                1.027    0.134    7.667    0.000 #>    .x4                0.833    0.173    4.812    0.000 #>    .x5                1.078    0.140    7.714    0.000 #>    .x6                1.234    0.132    9.367    0.000 #>    .x7                1.056    0.112    9.428    0.000 #>    .x8                1.042    0.139    7.478    0.000 #>    .x9                1.077    0.197    5.470    0.000 #>     f1                0.658    0.190    3.474    0.001 #>    .f2                0.647    0.215    3.010    0.003 #>    .f3                0.062    0.035    1.771    0.077 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     ab                0.230    0.079    2.895    0.004 #>  # Compute the approximate changes in parameter estimates if a case is included # vs. if this case is excluded. # That is, the approximate case influence on parameter estimates. # Compute changes for structural paths only out_approx <- est_change_raw_approx(fit,                                     parameters = c(\"~\")) head(out_approx) #>          f2~f1         f3~f2 #> 1 -0.001088313 -0.0078430905 #> 2  0.010965561 -0.0055003320 #> 3 -0.031284855 -0.0054784700 #> 4  0.060426691  0.0002338238 #> 5 -0.014994222 -0.0009711227 #> 6 -0.002126077 -0.0009193544"},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Influence on Fit Measures — fit_measures_change","title":"Case Influence on Fit Measures — fit_measures_change","text":"Gets lavaan_rerun() output computes changes selected fit measures case included.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case Influence on Fit Measures — fit_measures_change","text":"","code":"fit_measures_change(   rerun_out,   fit_measures = c(\"chisq\", \"cfi\", \"rmsea\", \"tli\"),   baseline_model = NULL )"},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case Influence on Fit Measures — fit_measures_change","text":"rerun_out output lavaan_rerun(). fit_measures argument fit.measures used lavaan::fitMeasures. Default c(\"chisq\", \"cfi\", \"rmsea\", \"tli\"). baseline_model argument baseline.model used lavaan::fitMeasures. Default NULL.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case Influence on Fit Measures — fit_measures_change","text":"fit_measures_change-class object, matrix number columns equals number requested fit measures, number rows equals number cases. row names case identification values used lavaan_rerun(). print method available user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case Influence on Fit Measures — fit_measures_change","text":"case, fit_measures_change() computes differences selected fit measures without case: (Fit measure case) - (Fit measure without case). value case positive, including case increases estimate. value case negative, including case decreases estimate. Note increase improvement fit goodness fit measures CFI TLI, decrease improvement fit badness fit measures RMSEA model chi-square. measure influence case fit measure included. analysis admissible converge case deleted, NAs turned differences case. Supports single-group multiple-group models. (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Case Influence on Fit Measures — fit_measures_change","text":"Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202-228. doi:10.1080/00273171.2011.561068","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Case Influence on Fit Measures — fit_measures_change","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case Influence on Fit Measures — fit_measures_change","text":"","code":"library(lavaan)  # A path model  dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>  # Fit the model n times. Each time with one case removed. # For illustration, do this only for four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.43 second(s). #> Could be faster if run in parallel. # Compute the changes in chisq if a case is included # vs. if this case is removed. # That is, case influence on model chi-squared. out <- fit_measures_change(fit_rerun, fit_measures = \"chisq\") # Results excluding a case, for the first few cases head(out) #>         chisq #> 1  0.15407944 #> 2 -0.01944571 #> 3 -0.41673808 #> 4 -0.15430823 #> 5  0.09730667 #> 6  0.11601736 # Chi-square will all cases included. (chisq_all <- fitMeasures(fit, c(\"chisq\"))) #> chisq  #> 6.711  # Chi-square with the first case removed fit_01 <- lavaan::sem(mod, dat[-1, ]) (chisq_no_1 <- fitMeasures(fit_01, c(\"chisq\"))) #> chisq  #> 6.557  # Difference chisq_all - chisq_no_1 #> chisq  #> 0.154  # Compare to the result from the fit_measures_change out[1, ] #> [1] 0.1540794  # A CFA model  dat <- cfa_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f1 ~~ f2 \" # Fit the model fit <- lavaan::cfa(mod, dat)  fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.59 second(s). #> Could be faster if run in parallel. out <- fit_measures_change(fit_rerun, fit_measures = \"chisq\") head(out) #>         chisq #> 1 -0.99210274 #> 2  0.90763725 #> 3 -0.25394609 #> 4 -0.03468346 #> 5 -0.63365168 #> 6  0.59956838 (chisq_all <- fitMeasures(fit, c(\"chisq\"))) #>  chisq  #> 12.027  fit_01 <- lavaan::sem(mod, dat[-1, ]) (chisq_no_1 <- fitMeasures(fit_01, c(\"chisq\"))) #>  chisq  #> 13.019  chisq_all - chisq_no_1 #>  chisq  #> -0.992  out[1, ] #> [1] -0.9921027  # A latent variable model  dat <- sem_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   a * f1 f3 ~   b * f2 ab := a * b \" # Fit the model fit <- lavaan::sem(mod, dat)  fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.65 second(s). #> Could be faster if run in parallel. out <- fit_measures_change(fit_rerun, fit_measures = \"chisq\") head(out) #>        chisq #> 1 -0.3385932 #> 2 -0.6367473 #> 3  0.5199304 #> 4  1.2366084 #> 5 -0.5428558 #> 6 -0.2635458 (chisq_all <- fitMeasures(fit, c(\"chisq\"))) #>  chisq  #> 41.768  fit_01 <- lavaan::sem(mod, dat[-1, ]) (chisq_no_1 <- fitMeasures(fit_01, c(\"chisq\"))) #>  chisq  #> 42.107  chisq_all - chisq_no_1 #>  chisq  #> -0.339  out[1, ] #> [1] -0.3385932"},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change_approx.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Influence on Fit Measures (Approximate) — fit_measures_change_approx","title":"Case Influence on Fit Measures (Approximate) — fit_measures_change_approx","text":"Gets lavaan::lavaan() output computes approximate change selected fit measures case included.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change_approx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case Influence on Fit Measures (Approximate) — fit_measures_change_approx","text":"","code":"fit_measures_change_approx(   fit,   fit_measures = c(\"chisq\", \"cfi\", \"rmsea\", \"tli\"),   baseline_model = NULL,   case_id = NULL,   allow_inadmissible = FALSE,   skip_all_checks = FALSE )"},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change_approx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case Influence on Fit Measures (Approximate) — fit_measures_change_approx","text":"fit output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()). fit_measures argument fit.measures used lavaan::fitMeasures. Default c(\"chisq\", \"cfi\", \"rmsea\", \"tli\"). Currently, approximate method supports four measures. baseline_model argument baseline.model used lavaan::fitMeasures. Default NULL. case_id character vector length equals number cases (number rows data fit), vector case identification values. NULL, default, case.idx used lavaan functions used case identification values. allow_inadmissible TRUE, accepts fit object inadmissible results (.e., post.check lavaan::lavInspect() FALSE). Default FALSE. skip_all_checks TRUE, skips checks allows users run function object lavaan class. users experiment functions models officially supported. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change_approx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case Influence on Fit Measures (Approximate) — fit_measures_change_approx","text":"fit_measures_change-class object, matrix number columns equals number requested fit measures, number rows equals number cases. row names case identification values. print method available user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change_approx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case Influence on Fit Measures (Approximate) — fit_measures_change_approx","text":"case, fit_measures_change_approx() computes approximate differences selected fit measures without case: (Fit measure case) - (Fit measure without case). value case positive, including case increases estimate. value case negative, including case decreases estimate. Note increase improvement fit goodness fit measures CFI TLI, decrease improvement fit badness fit measures RMSEA model chi-square. measure influence case fit measure included. model refitted. Therefore, result approximation fit_measures_change(). However, approximation useful identifying potentially influential cases sample size large model takes long time fit. function can used identify potentially influential cases quickly select conduct leave-one-sensitivity analysis using lavaan_rerun() fit_measures_change(). technical details, please refer vignette approach: vignette(\"casewise_scores\", package = \"semfindr\") Supports single-group multiple-group models. (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change_approx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Case Influence on Fit Measures (Approximate) — fit_measures_change_approx","text":"Idea Mark Hok Chio Lai https://orcid.org/0000-0002-9196-7406, implemented Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/fit_measures_change_approx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case Influence on Fit Measures (Approximate) — fit_measures_change_approx","text":"","code":"library(lavaan)  # A path model  dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>   # Approximate changes out_approx <- fit_measures_change_approx(fit, fit_measures = \"chisq\") head(out_approx) #>         chisq #> 1  0.15956516 #> 2 -0.01892880 #> 3 -0.38907022 #> 4 -0.15078126 #> 5  0.09685352 #> 6  0.11602751 # Fit the model several times. Each time with one case removed. # For illustration, do this only for four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:5) #> The expected CPU time is 0.22 second(s). #> Could be faster if run in parallel. # Compute the changes in chisq if a case is included # vs. if this case is excluded. # That is, case influence on model chi-squared. out <- fit_measures_change(fit_rerun, fit_measures = \"chisq\") # Case influence, for the first few cases head(out) #>         chisq #> 1  0.15407944 #> 2 -0.01944571 #> 3 -0.41673808 #> 4 -0.15430823 #> 5  0.09730667 # Compare the results plot(out_approx[1:5, \"chisq\"], out) abline(a = 0, b = 1)   # A CFA model  dat <- cfa_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f1 ~~ f2 \" # Fit the model fit <- lavaan::cfa(mod, dat)  out_approx <- fit_measures_change_approx(fit, fit_measures = \"chisq\") head(out_approx) #>         chisq #> 1 -0.76276453 #> 2  0.99160651 #> 3 -0.13684245 #> 4 -0.02940289 #> 5 -0.54686780 #> 6  0.60740826  fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:5) #> The expected CPU time is 0.32 second(s). #> Could be faster if run in parallel. # Compute the changes in chisq if a case is included # vs. if this case is excluded. # That is, case influence on fit measures. out <- fit_measures_change(fit_rerun, fit_measures = \"chisq\") # Results excluding a case, for the first few cases head(out) #>         chisq #> 1 -0.99210274 #> 2  0.90763725 #> 3 -0.25394609 #> 4 -0.03468346 #> 5 -0.63365168 # Compare the results plot(out_approx[1:5, \"chisq\"], out) abline(a = 0, b = 1)   # A latent variable model  dat <- sem_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   a * f1 f3 ~   b * f2 ab := a * b \" # Fit the model fit <- lavaan::sem(mod, dat)  out_approx <- fit_measures_change_approx(fit, fit_measures = \"chisq\") head(out_approx) #>        chisq #> 1 -0.1283103 #> 2 -0.5320442 #> 3  0.6467449 #> 4  1.3578723 #> 5 -0.4206413 #> 6  0.2202259  fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:5) #> The expected CPU time is 0.33 second(s). #> Could be faster if run in parallel. # Compute the changes in chisq if a case is excluded # vs. if this case is included. # That is, case influence on model chi-squared. out <- fit_measures_change(fit_rerun, fit_measures = \"chisq\") # Case influence, for the first few cases head(out) #>        chisq #> 1 -0.3385932 #> 2 -0.6367473 #> 3  0.5199304 #> 4  1.2366084 #> 5 -0.5428558 # Compare the results plot(out_approx[1:5, \"chisq\"], out) abline(a = 0, b = 1)"},{"path":"https://sfcheung.github.io/semfindr/reference/implied_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Implied Scores of Observed Outcome Variables — implied_scores","title":"Implied Scores of Observed Outcome Variables — implied_scores","text":"Gets lavaan::lavaan() output computes implied scores observed outcome variables.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/implied_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implied Scores of Observed Outcome Variables — implied_scores","text":"","code":"implied_scores(fit, output = \"matrix\", skip_all_checks = FALSE)"},{"path":"https://sfcheung.github.io/semfindr/reference/implied_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implied Scores of Observed Outcome Variables — implied_scores","text":"fit output lavaan::lavaan(), lavaan::cfa() lavaan::sem(). output Output type. \"matrix\", default, output combined one matrix, cases ordered original dataset (listwise deletion, used). \"list\", list matrices returned, even model one group. skip_all_checks TRUE, skips checks allows users run function object lavaan class. users experiment functions models officially supported. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/implied_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Implied Scores of Observed Outcome Variables — implied_scores","text":"matrix implied scores output \"matrix\". output \"list\", list matrices implied scores.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/implied_scores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Implied Scores of Observed Outcome Variables — implied_scores","text":"implied scores observed outcome variable (y-variables endogenous variables) simply computed way predicted scores linear regression model computed. Currently supports single-group multiple-group path analysis models observed variables. (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/implied_scores.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Implied Scores of Observed Outcome Variables — implied_scores","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/implied_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Implied Scores of Observed Outcome Variables — implied_scores","text":"","code":"library(lavaan) dat <- pa_dat # For illustration, select only the first 50 cases dat <- dat[1:50, ] # The model mod <- \" m1 ~ iv1 + iv2 dv ~ m1 \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 1.768 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.413 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1              -0.159    0.166   -0.954    0.340 #>     iv2               0.525    0.162    3.241    0.001 #>   dv ~                                                 #>     m1                0.350    0.161    2.169    0.030 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.901    0.180    5.000    0.000 #>    .dv                1.423    0.285    5.000    0.000 #>   # Compute the implied scores for `m1` and `dv` fit_implied_scores <- implied_scores(fit) head(fit_implied_scores) #>            m1          dv #> 1 -0.27796469  0.11231710 #> 2  0.02685371  0.05380020 #> 3  0.44378891  0.12306764 #> 4 -0.04555044 -0.19799762 #> 5 -0.02779787 -0.56271155 #> 6 -0.01323771  0.01100961"},{"path":"https://sfcheung.github.io/semfindr/reference/index_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Index Plot of an Arbitrary Statistic — index_plot","title":"Index Plot of an Arbitrary Statistic — index_plot","text":"generic index plot function plotting values column # matrix.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/index_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index Plot of an Arbitrary Statistic — index_plot","text":"","code":"index_plot(   object,   column = NULL,   plot_title = \"Index Plot\",   x_label = NULL,   cutoff_x_low = NULL,   cutoff_x_high = NULL,   largest_x = 1,   absolute = FALSE,   point_aes = list(),   vline_aes = list(),   hline_aes = list(),   cutoff_line_aes = list(),   case_label_aes = list() )"},{"path":"https://sfcheung.github.io/semfindr/reference/index_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index Plot of an Arbitrary Statistic — index_plot","text":"object matrix-like object, output influence_stat(), est_change(), est_change_raw(), counterparts approximate approach. column String. column name values plotted. plot_title title plot. Default \"Index Plot\". x_label Label vertical axis, value column. Default NULL. NULL, label changed \"Statistic\" absolute FALSE, \"Absolute(Statistics)\" absolute TRUE. cutoff_x_low Cases values smaller value labeled. cutoff line drawn value. Default NULL. NULL, cutoff line drawn value. cutoff_x_high Cases values larger value labeled. cutoff line drawn value. Default NULL. NULL, cutoff line drawn value. largest_x number cases largest absolute value `column`` labelled. Default 1. integer, rounded nearest integer. absolute Whether absolute values plotted. Useful cases compared magnitude, ignoring sign. Default FALSE. point_aes named list arguments passed ggplot2::geom_point() modify draw points. Default list() internal default settings used. vline_aes named list arguments passed ggplot2::geom_segment() modify draw line case index plot. Default list() internal default settings used. hline_aes named list arguments passed ggplot2::geom_hline() modify draw horizontal line zero case influence. Default list() internal default settings used. cutoff_line_aes named list arguments passed ggplot2::geom_hline() modify draw line user cutoff values. Default list() internal default settings used. case_label_aes named list arguments passed ggrepel::geom_label_repel() modify draw labels cases marked (based arguments cutoff_x_low largest_x). Default list() internal default settings used.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/index_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index Plot of an Arbitrary Statistic — index_plot","text":"ggplot2 plot. Plotted default. assigned variable called inside function, plotted. Use plot() plot .","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/index_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index Plot of an Arbitrary Statistic — index_plot","text":"index plot function plotting measure influence extremeness matrix. can used measures supported functions. Like functions gcd_plot() est_change_plot(), supports labelling cases based values selected measure (originaL values absolute values). Users can also plot cases based absolute values. useful cases compared magnitude, ignoring sign.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/reference/index_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Index Plot of an Arbitrary Statistic — index_plot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/index_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index Plot of an Arbitrary Statistic — index_plot","text":"","code":"library(lavaan) dat <- pa_dat # The model mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>   # --- Leave-One-Out Approach  # Fit the model n times. Each time with one case removed. # For illustration, do this only for selected cases. fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.39 second(s). #> Could be faster if run in parallel. # Get all default influence stats out <- influence_stat(fit_rerun)  # Plot case influence on chi-square. Label the 3 cases with the influence. index_plot(out, \"chisq\", largest_x = 3)   # Plot absolute case influence on chi-square. index_plot(out, \"chisq\", absolute = TRUE)"},{"path":"https://sfcheung.github.io/semfindr/reference/influence_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots of Influence Measures — influence_plot","title":"Plots of Influence Measures — influence_plot","text":"Gets influence_stat() output plots selected statistics.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots of Influence Measures — influence_plot","text":"","code":"gcd_plot(   influence_out,   cutoff_gcd = NULL,   largest_gcd = 1,   point_aes = list(),   vline_aes = list(),   cutoff_line_aes = list(),   case_label_aes = list() )  md_plot(   influence_out,   cutoff_md = FALSE,   cutoff_md_qchisq = 0.975,   largest_md = 1,   point_aes = list(),   vline_aes = list(),   cutoff_line_aes = list(),   case_label_aes = list() )  gcd_gof_plot(   influence_out,   fit_measure,   cutoff_gcd = NULL,   cutoff_fit_measure = NULL,   largest_gcd = 1,   largest_fit_measure = 1,   point_aes = list(),   hline_aes = list(),   cutoff_line_gcd_aes = list(),   cutoff_line_fit_measures_aes = list(),   case_label_aes = list() )  gcd_gof_md_plot(   influence_out,   fit_measure,   cutoff_md = FALSE,   cutoff_fit_measure = NULL,   circle_size = 2,   cutoff_md_qchisq = 0.975,   cutoff_gcd = NULL,   largest_gcd = 1,   largest_md = 1,   largest_fit_measure = 1,   point_aes = list(),   hline_aes = list(),   cutoff_line_md_aes = list(),   cutoff_line_gcd_aes = list(),   cutoff_line_fit_measures_aes = list(),   case_label_aes = list() )"},{"path":"https://sfcheung.github.io/semfindr/reference/influence_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots of Influence Measures — influence_plot","text":"influence_out output influence_stat(). cutoff_gcd Cases generalized Cook's distance approximate generalized Cook's distance larger value labeled. Default NULL. NULL, cutoff line drawn. largest_gcd number cases largest generalized Cook's distance approximate generalized Cook's distance labelled. Default 1. integer, rounded nearest integer. point_aes named list arguments passed ggplot2::geom_point() modify draw points. Default list() internal default settings used. vline_aes named list arguments passed ggplot2::geom_segment() modify draw line case index plot. Default list() internal default settings used. cutoff_line_aes named list arguments passed ggplot2::geom_vline() ggplot2::geom_hline() modify draw line user cutoff value. Default list() internal default settings used. case_label_aes named list arguments passed ggrepel::geom_label_repel() modify draw labels cases marked (based arguments cutoff_gcd largest_gcd). Default list() internal default settings used. cutoff_md Cases Mahalanobis distance larger value labeled. TRUE, (cutoff_md_qchisq x 100)th percentile chi-square distribution degrees freedom equal number variables used.  Default FALSE, cutoff value. cutoff_md_qchisq value multiplied 100 percentile used labeling case based Mahalanobis distance. Default .975. largest_md number cases largest Mahalanobis distance labelled. Default 1. integer, rounded nearest integer. fit_measure fit measure used plot. Use name lavaan::fitMeasures() function. default value. cutoff_fit_measure Cases fit_measure larger cutoff magnitude labeled. default value must specified. largest_fit_measure number cases largest selected fit measure change magnitude labelled. Default integer, rounded nearest integer. hline_aes named list arguments passed ggplot2::geom_hline() modify draw horizontal line zero case influence. Default list() internal default settings used. cutoff_line_gcd_aes Similar cutoff_line_aes control line cutoff value gCD. cutoff_line_fit_measures_aes Similar cutoff_line_aes control line cutoff value selected fit measure. circle_size size largest circle size circle controlled statistic. cutoff_line_md_aes Similar cutoff_line_aes control line cutoff value Mahalanobis distance.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots of Influence Measures — influence_plot","text":"ggplot2 plot. Plotted default. assigned variable called inside function, plotted. Use plot() plot .","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots of Influence Measures — influence_plot","text":"output influence_stat() simply matrix. Therefore, functions work matrix provided. Row number used x-axis applicable. However, case identification values output influence_stat() used labeling individual cases. default settings plots good enough diagnostic purpose. desired, users can use *_aes arguments nearly fully customize major elements plots, building ggplot2 plot.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_plot.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plots of Influence Measures — influence_plot","text":"gcd_plot(): Index plot generalized Cook's distance. md_plot(): Index plot Mahalanobis distance. gcd_gof_plot(): Plot case influence selected fit measure generalized Cook's distance. gcd_gof_md_plot(): Bubble plot case influence selected fit measure Mahalanobis distance, size bubble determined generalized Cook's distance.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plots of Influence Measures — influence_plot","text":"Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202-228. doi:10.1080/00273171.2011.561068","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/reference/influence_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plots of Influence Measures — influence_plot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots of Influence Measures — influence_plot","text":"","code":"library(lavaan) dat <- pa_dat # The model mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>  # Fit the model n times. Each time with one case removed. # For illustration, do this only for selected cases. fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.38 second(s). #> Could be faster if run in parallel. # Get all default influence stats out <- influence_stat(fit_rerun) head(out) #>         chisq           cfi         rmsea           tli           a1 #> 1  0.15407944 -0.0019968390  0.0017700811 -0.0049920976  0.024466586 #> 2 -0.01944571  0.0011486763 -0.0010912308  0.0028716908  0.007153846 #> 3 -0.41673808  0.0082048797 -0.0074508538  0.0205121991 -0.038282397 #> 4 -0.15430823  0.0036670450 -0.0032789585  0.0091676124 -0.024048244 #> 5  0.09730667  0.0002954311  0.0008280336  0.0007385778  0.066686613 #> 6  0.11601736 -0.0010911517  0.0011378622 -0.0027278793  0.004007056 #>              a2            b      m1~~m1      dv~~dv         gcd        md #> 1 -0.0300705396  0.051965997 -0.03663071  0.01717427 0.005891665 1.9107778 #> 2  0.0034230301 -0.013043400 -0.06744802 -0.05802199 0.008147128 0.4442464 #> 3 -0.0401051535 -0.029790144 -0.06335355 -0.04479763 0.009834826 3.7867385 #> 4 -0.0031358865  0.021674577 -0.05137193 -0.04379632 0.005610493 1.0653437 #> 5  0.0278462201  0.032782898  0.04979077 -0.06598323 0.013001467 1.9803351 #> 6  0.0009699846  0.009509592 -0.06910195 -0.05422999 0.007823146 0.2875484  # Plot generalized Cook's distance. Label the 3 cases with the largest distances. gcd_plot(out, largest_gcd = 3)   # Plot Mahalanobis distance. Label the 3 cases with the largest distances. md_plot(out, largest_md = 3)   # Plot case influence on model chi-square against generalized Cook's distance. # Label the 3 cases with the largest absolute influence. # Label the 3 cases with the largest generalized Cook's distance. gcd_gof_plot(out, fit_measure = \"chisq\", largest_gcd = 3,              largest_fit_measure = 3)   # Plot case influence on model chi-square against Mahalanobis distance. # Size of bubble determined by generalized Cook's distance. # Label the 3 cases with the largest absolute influence. # Label the 3 cases with the largest Mahalanobis distance. # Label the 3 cases with the largest generalized Cook's distance.  gcd_gof_md_plot(out, fit_measure = \"chisq\",                      largest_gcd = 3,                      largest_fit_measure = 3,                      largest_md = 3,                      circle_size = 10)   # Use the approximate method that does not require refitting the model.  # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>  out <- influence_stat(fit) head(out) #>         chisq           cfi         rmsea          tli       m1~iv1 #> 1  0.15956516 -0.0020929857  0.0018614175 -0.005232464  0.024713396 #> 2 -0.01892880  0.0011399150 -0.0010827859  0.002849787  0.007254736 #> 3 -0.38907022  0.0077186573 -0.0070161267  0.019296643 -0.037982774 #> 4 -0.15078126  0.0036048257 -0.0032221332  0.009012064 -0.024353717 #> 5  0.09685352  0.0003104848  0.0008205378  0.000776212  0.067010210 #> 6  0.11602751 -0.0010913266  0.0011380304 -0.002728316  0.004065567 #>         m1~iv2        dv~m1      m1~~m1      dv~~dv  gcd_approx        md #> 1 -0.030383580  0.052370026 -0.03784100  0.01630488 0.005850455 1.9107778 #> 2  0.003469647 -0.013223396 -0.06916983 -0.05953293 0.008312026 0.4442464 #> 3 -0.039820283 -0.030150418 -0.06518369 -0.04609708 0.009904544 3.7867385 #> 4 -0.003172373  0.021948305 -0.05277394 -0.04504791 0.005719499 1.0653437 #> 5  0.027951233  0.032981527  0.04860722 -0.06774242 0.012793226 1.9803351 #> 6  0.000983731  0.009640981 -0.07086163 -0.05565453 0.007984573 0.2875484  # Plot approximate generalized Cook's distance. # Label the 3 cases with the largest values. gcd_plot(out, largest_gcd = 3)   # Plot Mahalanobis distance. # Label the 3 cases with the largest values. md_plot(out, largest_md = 3)   # Plot approximate case influence on model chi-square against # approximate generalized Cook's distance. # Label the 3 cases with the largest absolute approximate case influence. # Label the 3 cases with the largest approximate generalized Cook's distance. gcd_gof_plot(out, fit_measure = \"chisq\", largest_gcd = 3,              largest_fit_measure = 3)   # Plot approximate case influence on model chi-square against Mahalanobis distance. # The size of a bubble determined by approximate generalized Cook's distance. # Label the 3 cases with the largest absolute approximate case influence. # Label the 3 cases with the largest Mahalanobis distance. # Label the 3 cases with the largest approximate generalized Cook's distance.  gcd_gof_md_plot(out, fit_measure = \"chisq\",                      largest_gcd = 3,                      largest_fit_measure = 3,                      largest_md = 3,                      circle_size = 10)   # Customize elements in the plot. # For example, change the color and shape of the points.  gcd_gof_plot(out, fit_measure = \"chisq\", largest_gcd = 3,              largest_fit_measure = 3,              point_aes = list(shape = 3, color = \"red\"))"},{"path":"https://sfcheung.github.io/semfindr/reference/influence_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Influence Measures — influence_stat","title":"Case Influence Measures — influence_stat","text":"Gets lavaan_rerun() output computes changes selected parameters fit measures case included.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case Influence Measures — influence_stat","text":"","code":"influence_stat(   rerun_out,   fit_measures = c(\"chisq\", \"cfi\", \"rmsea\", \"tli\"),   baseline_model = NULL,   parameters = NULL,   mahalanobis = TRUE,   keep_fit = TRUE )"},{"path":"https://sfcheung.github.io/semfindr/reference/influence_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case Influence Measures — influence_stat","text":"rerun_out output lavaan_rerun(), output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()). fit_measures argument fit.measures used lavaan::fitMeasures. Default c(\"chisq\", \"cfi\", \"rmsea\", \"tli\"). baseline_model argument baseline.model used lavaan::fitMeasures. Default NULL. parameters character vector specify selected parameters. parameter named lavaan syntax, e.g., x ~ y x ~~ y, appeared columns lhs, op, rhs output lavaan::parameterEstimates(). Supports specifying operator select parameters operators: ~, ~~, =~, ~1. vector can contain parameter names operators. details can found help pars_id(). omitted NULL, default, changes free parameters computed. mahalanobis TRUE, call mahalanobis_rerun() compute Mahalanobis distance. Default TRUE. keep_fit TRUE, keep original lavaan output using full sample attribute output. can used functions extract necessary information. Default TRUE.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case Influence Measures — influence_stat","text":"influence_stat-class object, matrix number columns equals number requested statistics, number rows equals number cases. row names case identification values used lavaan_rerun(). Please refer help pages est_change() fit_measures_change() (est_change_approx() fit_measures_change_approx() details. object print method printing user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_stat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case Influence Measures — influence_stat","text":"case, influence_stat() computes differences estimates selected parameters fit measures without case. Users can also request measure extremeness (Mahalanobis distance available now). rerun_out output lavaan_rerun(), use leave-one-approach. Measures computed est_change() fit_measures_change(). rerun_out output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()), use approximate approach. Measures computed est_change_approx() fit_measures_change_approx(). Mahalanobis distance requested, computed mahalanobis_rerun(). Please refer help pages functions technical details. Supports single-group multiple-group models. (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_stat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Case Influence Measures — influence_stat","text":"Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202-228. doi:10.1080/00273171.2011.561068","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/reference/influence_stat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Case Influence Measures — influence_stat","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/influence_stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case Influence Measures — influence_stat","text":"","code":"library(lavaan) dat <- pa_dat # The model mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>   # --- Leave-One-Out Approach  # Fit the model n times. Each time with one case removed. # For illustration, do this only for selected cases. fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.39 second(s). #> Could be faster if run in parallel. # Get all default influence stats out <- influence_stat(fit_rerun) head(out) #>         chisq           cfi         rmsea           tli           a1 #> 1  0.15407944 -0.0019968390  0.0017700811 -0.0049920976  0.024466586 #> 2 -0.01944571  0.0011486763 -0.0010912308  0.0028716908  0.007153846 #> 3 -0.41673808  0.0082048797 -0.0074508538  0.0205121991 -0.038282397 #> 4 -0.15430823  0.0036670450 -0.0032789585  0.0091676124 -0.024048244 #> 5  0.09730667  0.0002954311  0.0008280336  0.0007385778  0.066686613 #> 6  0.11601736 -0.0010911517  0.0011378622 -0.0027278793  0.004007056 #>              a2            b      m1~~m1      dv~~dv         gcd        md #> 1 -0.0300705396  0.051965997 -0.03663071  0.01717427 0.005891665 1.9107778 #> 2  0.0034230301 -0.013043400 -0.06744802 -0.05802199 0.008147128 0.4442464 #> 3 -0.0401051535 -0.029790144 -0.06335355 -0.04479763 0.009834826 3.7867385 #> 4 -0.0031358865  0.021674577 -0.05137193 -0.04379632 0.005610493 1.0653437 #> 5  0.0278462201  0.032782898  0.04979077 -0.06598323 0.013001467 1.9803351 #> 6  0.0009699846  0.009509592 -0.06910195 -0.05422999 0.007823146 0.2875484  # --- Approximate Approach  out_approx <- influence_stat(fit) head(out_approx) #>         chisq           cfi         rmsea          tli       m1~iv1 #> 1  0.15956516 -0.0020929857  0.0018614175 -0.005232464  0.024713396 #> 2 -0.01892880  0.0011399150 -0.0010827859  0.002849787  0.007254736 #> 3 -0.38907022  0.0077186573 -0.0070161267  0.019296643 -0.037982774 #> 4 -0.15078126  0.0036048257 -0.0032221332  0.009012064 -0.024353717 #> 5  0.09685352  0.0003104848  0.0008205378  0.000776212  0.067010210 #> 6  0.11602751 -0.0010913266  0.0011380304 -0.002728316  0.004065567 #>         m1~iv2        dv~m1      m1~~m1      dv~~dv  gcd_approx        md #> 1 -0.030383580  0.052370026 -0.03784100  0.01630488 0.005850455 1.9107778 #> 2  0.003469647 -0.013223396 -0.06916983 -0.05953293 0.008312026 0.4442464 #> 3 -0.039820283 -0.030150418 -0.06518369 -0.04609708 0.009904544 3.7867385 #> 4 -0.003172373  0.021948305 -0.05277394 -0.04504791 0.005719499 1.0653437 #> 5  0.027951233  0.032981527  0.04860722 -0.06774242 0.012793226 1.9803351 #> 6  0.000983731  0.009640981 -0.07086163 -0.05565453 0.007984573 0.2875484"},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun.html","id":null,"dir":"Reference","previous_headings":"","what":"Rerun a 'lavaan' Analysis Using the Leaving-One-Out Approach — lavaan_rerun","title":"Rerun a 'lavaan' Analysis Using the Leaving-One-Out Approach — lavaan_rerun","text":"Reruns lavaan analysis several times, time one case removed.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rerun a 'lavaan' Analysis Using the Leaving-One-Out Approach — lavaan_rerun","text":"","code":"lavaan_rerun(   fit,   case_id = NULL,   to_rerun,   md_top,   resid_md_top,   allow_inadmissible = FALSE,   skip_all_checks = FALSE,   parallel = FALSE,   makeCluster_args = list(spec = getOption(\"cl.cores\", 2)),   rerun_method = c(\"lavaan\", \"update\") )"},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rerun a 'lavaan' Analysis Using the Leaving-One-Out Approach — lavaan_rerun","text":"fit output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()). case_id character vector length equals number cases (number rows data fit), vector case identification values. NULL, default, case.idx used lavaan functions used case identification values. case identification values used name list n output. to_rerun cases processed. case_id specified, subset case_id. case_id specified, vector integers indicating rows te processed, appeared data fit. to_rerun used together md_top resid_md_top. md_top number cases processed based Mahalanobis distance computed observed variables used model. cases ranked largest smallest distance, top md_top case(s) processed. md_top used together to_rerun resid_md_top. resid_md_top number cases processed based Mahalanobis distance computed residuals outcome variables. cases ranked largest smallest distance, top resid_md_top case(s) processed. resid_md_top used together to_rerun md_top. allow_inadmissible TRUE, accepts fit object inadmissible results (.e., post.check lavaan::lavInspect() FALSE). Default FALSE. skip_all_checks TRUE, skips checks allow users run function object lavaan class. users experiment functions models officially supported. Default FALSE. parallel Whether parallel used. TRUE, use functions parallel package rerun analysis. Currently, support \"snow\" type clusters using local CPU cores. Default FALSE. makeCluster_args named list arguments passed parallel::makeCluster(). Default list(spec = getOption(\"cl.cores\", 2))). number cores need specified, use list(spec = x), x number cores use. rerun_method fit rerun. Default \"lavaan\". alternative method \"update\". internal use. \"lavaan\" returns error, try setting argument \"update\".","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rerun a 'lavaan' Analysis Using the Leaving-One-Out Approach — lavaan_rerun","text":"lavaan_rerun-class object, list following elements: rerun: n lavaan output objects. fit: original output lavaan. post_check: list length equals n. analysis checked lavaan::lavTech(x, \"post.check\"), x lavaan results. results test stored list. value TRUE, estimation converged solution admissible. TRUE, warning message issued lavaan::lavTech(). converged: vector length equals n. analysis checked lavaan::lavTech(x, \"converged\"), x lavaan results. results test stored vector. value TRUE, estimation converged. TRUE, estimation failed converge corresponding case excluded. call: call lavaan_rerun(). selected: numeric vector row numbers cases selected analysis. length equal length rerun.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rerun a 'lavaan' Analysis Using the Leaving-One-Out Approach — lavaan_rerun","text":"lavaan_rerun() gets lavaan::lavaan() output reruns analysis n0 times, using arguments options output, n0 equals number cases selected, default cases analysis. run, one case removed. Optionally, users can rerun analysis selected cases removed. cases can specified case IDs, Mahalanobis distance computed variables used model, Mahalanobis distance computed residuals (observed score - implied scores) observed outcome variables. See help arguments to_rerun, md_top, resid_md_top. recommended use Mahalanobis distance computed variables, especially models observed variables predictors (Pek & MacCallum, 2011). Cases extreme predictors may influential parameter estimates. Nevertheless, distance reported SEM programs option provided. Mahalanobis distance based residuals supported models latent factors. implied scores computed implied_scores(). sample size large, recommended use parallel processing. However, possible parallel processing fail. case, try use serial processing, simply removing argument parallel set FALSE. Many functions semfindr use output lavaan_rerun(). Instead running n analyses every time, step users can compute whatever influence statistics want quickly. analysis took minutes run due large number cases long processing time fitting model, recommended save output external file (e.g., base::saveRDS()). Supports single-group multiple-group models. (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rerun a 'lavaan' Analysis Using the Leaving-One-Out Approach — lavaan_rerun","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rerun a 'lavaan' Analysis Using the Leaving-One-Out Approach — lavaan_rerun","text":"","code":"library(lavaan) dat <- pa_dat # For illustration, select only the first 50 cases dat <- dat[1:50, ] # The model mod <- \" m1 ~ iv1 + iv2 dv ~ m1 \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 1.768 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.413 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1              -0.159    0.166   -0.954    0.340 #>     iv2               0.525    0.162    3.241    0.001 #>   dv ~                                                 #>     m1                0.350    0.161    2.169    0.030 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.901    0.180    5.000    0.000 #>    .dv                1.423    0.285    5.000    0.000 #>   # Fit the model n times. Each time with one case removed. fit_rerun <- lavaan_rerun(fit, parallel = FALSE) #> The expected CPU time is 1.85 second(s). #> Could be faster if run in parallel.  # Print the output for a brief description of the runs fit_rerun #> === lavaan_rerun Output === #> Call: #> lavaan_rerun(fit = fit, parallel = FALSE) #> Number of reruns: 50 #> Number of reruns that converged (solution found): 50 #> Number of reruns that failed to converge (solution not found): 0 #> Number of reruns that passed post.check of lavaan: 50 #> Number of reruns that failed post.check of lavaan: 0 #> Number of reruns that both converged and passed post.check: 50 #> Number of reruns that either did not converge or failed post.check: 0  # Results excluding the first case fitMeasures(fit_rerun$rerun[[1]], c(\"chisq\", \"cfi\", \"tli\", \"rmsea\")) #> chisq   cfi   tli rmsea  #> 1.403 1.000 1.143 0.000  # Results by manually excluding the first case fit_01 <- lavaan::sem(mod, dat[-1, ]) fitMeasures(fit_01, c(\"chisq\", \"cfi\", \"tli\", \"rmsea\")) #> chisq   cfi   tli rmsea  #> 1.403 1.000 1.143 0.000"},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatibility Check for 'lavaan_rerun' — lavaan_rerun_check","title":"Compatibility Check for 'lavaan_rerun' — lavaan_rerun_check","text":"Gets 'lavaan' output checks whether supported lavaan_rerun().","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatibility Check for 'lavaan_rerun' — lavaan_rerun_check","text":"","code":"lavaan_rerun_check(fit, print_messages = TRUE)"},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatibility Check for 'lavaan_rerun' — lavaan_rerun_check","text":"fit output lavaan, lavaan::cfa() lavaan::sem(). print_messages Logical. TRUE, print messages check. FALSE, messages attached return value attribute. Default TRUE.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compatibility Check for 'lavaan_rerun' — lavaan_rerun_check","text":"single-element vector. confirmed supported, return 0. confirmed support may still work, return 1. confirmed yet supported, return negative number, value number without negative sign number tests failed.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compatibility Check for 'lavaan_rerun' — lavaan_rerun_check","text":"function supposed used users. called lavaan_rerun() see analysis passed supported. , messages printed indicate .","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compatibility Check for 'lavaan_rerun' — lavaan_rerun_check","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/lavaan_rerun_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compatibility Check for 'lavaan_rerun' — lavaan_rerun_check","text":"","code":"dat <- cfa_dat  mod <- \" f1 =~ x4 + x5 + x6 \" dat_gp <- dat dat$gp <- rep(c(\"gp1\", \"gp2\"), length.out = nrow(dat_gp))  fit01 <- lavaan::sem(mod, dat) # If supported, returns a zero. lavaan_rerun_check(fit01) #> [1] 0  fit05 <- lavaan::cfa(mod, dat, group = \"gp\") # If not supported, returns a negative number. lavaan_rerun_check(fit05) #> [1] 0"},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Mahalanobis Distance On Observed Predictors — mahalanobis_predictors","title":"Mahalanobis Distance On Observed Predictors — mahalanobis_predictors","text":"Gets lavaan_rerun() lavaan::lavaan() output computes Mahalanobis distance case using observed predictors.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mahalanobis Distance On Observed Predictors — mahalanobis_predictors","text":"","code":"mahalanobis_predictors(   fit,   emNorm_arg = list(estimate.worst = FALSE, criterion = 1e-06) )"},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mahalanobis Distance On Observed Predictors — mahalanobis_predictors","text":"fit can output lavaan, lavaan::cfa() lavaan::sem(), output lavaan_rerun(). emNorm_arg longer used. Kept backward compatibility.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mahalanobis Distance On Observed Predictors — mahalanobis_predictors","text":"md_semfindr-class object, one-column matrix (column vector) Mahalanobis distance case. number rows equals number cases data stored fit object. print method available user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_predictors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mahalanobis Distance On Observed Predictors — mahalanobis_predictors","text":"case, mahalanobis_predictors() computes Mahalanobis distance case observed predictors. missing values, stats::mahalanobis() used compute Mahalanobis distance. missing values observed predictors, means variance-covariance matrices estimated maximum likelihood using lavaan::lavCor(). estimates passed modi::MDmiss() compute Mahalanobis distance. Supports single-group multiple-group models. multiple-group models, Mahalanobis distance case computed using means covariance matrix group case belongs . (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_predictors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mahalanobis Distance On Observed Predictors — mahalanobis_predictors","text":"Béguin, C., & Hulliger, B. (2004). Multivariate outlier detection incomplete survey data: epidemic algorithm transformed rank correlations. Journal Royal Statistical Society: Series (Statistics Society), 167(2), 275-294. Mahalanobis, P. C. (1936). generalized distance statistics. Proceedings National Institute Science India, 2, 49-55. Schafer, J.L. (1997) Analysis incomplete multivariate data. Chapman & Hall/CRC Press.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_predictors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mahalanobis Distance On Observed Predictors — mahalanobis_predictors","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mahalanobis Distance On Observed Predictors — mahalanobis_predictors","text":"","code":"library(lavaan) dat <- pa_dat # For illustration, select only the first 50 cases. dat <- dat[1:50, ] # The model mod <- \" m1 ~ a1 * iv1 +  a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 1.768 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.413 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)   -0.159    0.166   -0.954    0.340 #>     iv2       (a2)    0.525    0.162    3.241    0.001 #>   dv ~                                                 #>     m1         (b)    0.350    0.161    2.169    0.030 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.901    0.180    5.000    0.000 #>    .dv                1.423    0.285    5.000    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b              -0.056    0.064   -0.873    0.382 #>     a2b               0.184    0.102    1.803    0.071 #>   md_predictors <- mahalanobis_predictors(fit) md_predictors #>  #> -- Mahalanobis Distance -- #>  #>       md #> 13 7.179 #> 45 6.707 #> 50 6.297 #> 33 5.479 #> 43 5.115 #> 25 4.909 #> 27 4.685 #> 20 4.378 #> 32 4.157 #> 34 3.432 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order. #> - Mahalanobis distance computed only on predictors."},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_rerun.html","id":null,"dir":"Reference","previous_headings":"","what":"Mahalanobis Distance on All Observed Variables — mahalanobis_rerun","title":"Mahalanobis Distance on All Observed Variables — mahalanobis_rerun","text":"Computes Mahalanobis distance case observed variables model.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_rerun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mahalanobis Distance on All Observed Variables — mahalanobis_rerun","text":"","code":"mahalanobis_rerun(   fit,   emNorm_arg = list(estimate.worst = FALSE, criterion = 1e-06) )"},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_rerun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mahalanobis Distance on All Observed Variables — mahalanobis_rerun","text":"fit can output lavaan, lavaan::cfa() lavaan::sem(), output lavaan_rerun(). emNorm_arg longer used. Kept backward compatibility.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_rerun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mahalanobis Distance on All Observed Variables — mahalanobis_rerun","text":"md_semfindr-class object, one-column matrix (column vector) Mahalanobis distance case. row names case identification values used lavaan_rerun(). print method available user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_rerun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mahalanobis Distance on All Observed Variables — mahalanobis_rerun","text":"mahalanobis_rerun() gets lavaan_rerun() lavaan::lavaan() output computes Mahalanobis distance case observed variables. missing values, stats::mahalanobis() used compute Mahalanobis distance. missing values observed predictors, means variance-covariance matrices estimated maximum likelihood using lavaan::lavCor(). estimates passed modi::MDmiss() compute Mahalanobis distance. Supports single-group multiple-group models. multiple-group models, Mahalanobis distance case computed using means covariance matrix group case belongs . (Support multiple-group models available 0.1.4.8 later version).","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_rerun.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mahalanobis Distance on All Observed Variables — mahalanobis_rerun","text":"Mahalanobis, P. C. (1936). generalized distance statistics. Proceedings National Institute Science India, 2, 49-55.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_rerun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mahalanobis Distance on All Observed Variables — mahalanobis_rerun","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/mahalanobis_rerun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mahalanobis Distance on All Observed Variables — mahalanobis_rerun","text":"","code":"library(lavaan) dat <- pa_dat # The model mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>  # Fit the model n times. Each time with one case removed. # For illustration, do this only for selected cases. fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.38 second(s). #> Could be faster if run in parallel. # Compute the Mahalanobis distance for each case out <- mahalanobis_rerun(fit_rerun) # Results excluding a case, for the first few cases head(out) #>          md #> 1 1.9107778 #> 2 0.4442464 #> 3 3.7867385 #> 4 1.0653437 #> 5 1.9803351 #> 6 0.2875484 # Compute the Mahalanobis distance using stats::mahalanobis() md1 <- stats::mahalanobis(dat, colMeans(dat), stats::cov(dat)) # Compare the results head(md1) #> [1] 1.9107778 0.4442464 3.7867385 1.0653437 1.9803351 0.2875484  # A CFA model  dat <- cfa_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f1 ~~ f2 \" # Fit the model fit <- lavaan::cfa(mod, dat)  fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.62 second(s). #> Could be faster if run in parallel. mahalanobis_rerun(fit_rerun) #>  #> -- Mahalanobis Distance -- #>  #>        md #> 3  21.492 #> 2   8.802 #> 1   8.178 #> 10  8.090 #> 9   6.552 #> 5   5.135 #> 8   3.415 #> 7   2.470 #> 6   2.382 #> 4   2.142 #>  #> Note: #> - All stored cases are displayed. #> - Cases sorted by Mahalanobis distance in decreasing order.  # A latent variable model  dat <- sem_dat mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   a * f1 f3 ~   b * f2 ab := a * b \" # Fit the model fit <- lavaan::cfa(mod, dat)  fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.67 second(s). #> Could be faster if run in parallel. mahalanobis_rerun(fit_rerun) #>  #> -- Mahalanobis Distance -- #>  #>        md #> 6  17.521 #> 9  16.870 #> 4  13.337 #> 1  13.332 #> 3   9.792 #> 7   9.485 #> 2   8.445 #> 5   8.319 #> 8   5.332 #> 10  1.904 #>  #> Note: #> - All stored cases are displayed. #> - Cases sorted by Mahalanobis distance in decreasing order."},{"path":"https://sfcheung.github.io/semfindr/reference/pa_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Data: A Path Model — pa_dat","title":"Sample Data: A Path Model — pa_dat","text":"four-variable dataset 100 cases.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pa_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Data: A Path Model — pa_dat","text":"","code":"pa_dat"},{"path":"https://sfcheung.github.io/semfindr/reference/pa_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Data: A Path Model — pa_dat","text":"data frame 100 rows 5 variables: m1 Mediator. Numeric. dv Outcome variable. Numeric. iv1 Predictor. Numeric. iv2 Predictor. Numeric.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pa_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Data: A Path Model — pa_dat","text":"","code":"library(lavaan) data(pa_dat) mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" fit <- sem(mod, pa_dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>"},{"path":"https://sfcheung.github.io/semfindr/reference/pa_dat2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Data: A Path Model with an Influential Case — pa_dat2","title":"Sample Data: A Path Model with an Influential Case — pa_dat2","text":"four-variable dataset 100 cases, one influential case.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pa_dat2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Data: A Path Model with an Influential Case — pa_dat2","text":"","code":"pa_dat2"},{"path":"https://sfcheung.github.io/semfindr/reference/pa_dat2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Data: A Path Model with an Influential Case — pa_dat2","text":"data frame 100 rows 5 variables: case_id Case ID. Character. iv1 Predictor. Numeric. iv2 Predictor. Numeric. m1 Mediator. Numeric. dv Outcome variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pa_dat2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Data: A Path Model with an Influential Case — pa_dat2","text":"","code":"library(lavaan) data(pa_dat2) mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" fit <- sem(mod, pa_dat2) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 4.632 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.099 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.326    0.097    3.353    0.001 #>     iv2       (a2)    0.253    0.091    2.793    0.005 #>   dv ~                                                 #>     m1         (b)    0.326    0.079    4.105    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.669    0.095    7.071    0.000 #>    .dv                0.548    0.078    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.106    0.041    2.597    0.009 #>     a2b               0.083    0.036    2.309    0.021 #>  inf_out <- influence_stat(fit) gcd_plot(inf_out)"},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Parameter Syntax to Position\nor Row Numbers in the Parameter\nVector or Table — pars_id","title":"Convert Parameter Syntax to Position\nor Row Numbers in the Parameter\nVector or Table — pars_id","text":"Converts vector lavaan syntax ids parameters vector free parameters row numbers parameter table.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Parameter Syntax to Position\nor Row Numbers in the Parameter\nVector or Table — pars_id","text":"","code":"pars_id(pars, fit, where = c(\"coef\", \"partable\"), free_only = TRUE)"},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Parameter Syntax to Position\nor Row Numbers in the Parameter\nVector or Table — pars_id","text":"pars character vector parameters specified lavaan syntax, e.g., \"y ~ x\" f1 =~ x3. multisample models, parameters groups needed, use modifier labeling parameters use NA denote parameters requested. E.g., f1 =~ c(NA, 0, NA, NA) * x2 denotes loadings x2 f1 first, third, fourth groups. fit lavaan-class object. object used determine number groups parameters model. parameters pars appear model considered. values found. Can \"partable\" (parameter table) \"coef\" (coefficient vector). Default \"coef\". free_only Whether free parameters kept. Default TRUE.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Parameter Syntax to Position\nor Row Numbers in the Parameter\nVector or Table — pars_id","text":"numeric vector ids. \"partable\", ids row numbers. \"coef\", ids positions vector.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Parameter Syntax to Position\nor Row Numbers in the Parameter\nVector or Table — pars_id","text":"supports following ways specify parameters included. lavaan syntax example, \"y ~ x\" denotes regression coefficient regression y x. uses lavaan::lavaanify() parse syntax strings. Operator example, \"~\" denotes regression coefficients. also supports :=, can used select user-defined parameters. Label example, \"ab\" denotes parameters labels defined model syntax. can used select user-defined parameters, \"ab := *b\". used functions est_change().","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id.html","id":"multisample-model","dir":"Reference","previous_headings":"","what":"Multisample model","title":"Convert Parameter Syntax to Position\nor Row Numbers in the Parameter\nVector or Table — pars_id","text":"model one group, specification specified single sample model denotes parameters group. example, \"f1 =~ x2\" denotes factor loading x2 f1 groups. \"~~\" denotes covariances error covariances groups. two ways select parameters selected groups. First, syntax fix parameter values can used, NA denoting parameters selected. example, \"f2 =~ c(NA, 1, NA) * x5\" selects factor loadings x5 f2 first third groups. Users can also add \".grouplabel\" specification, grouplabel group label group (one appears summary(), one form \".g2\", \"g3\", etc.). example, \"f2 =~ x5.Alpha\" denotes factor loading x5 f2 group \"Alpha\". method can used operators. example, \"=~.Alpha\" denotes factors loadings group \"Alpha\". Though recommended, users can use labels \".g2\" \".g3\" denote parameter specific group. labels appear output functions lavaan. Although lavaan label parameters first group \".g1\", can still used pars_id(). example, \"f2 =~ x5.g2\" denotes factor loading x5 f2 second group. \"y ~ x.g1\" denotes regression coefficient x y first group. method can also used operators. example, \"=~.g2\" denotes factors loadings second group. However, method reliable using grouplabel numbering groups depends order appear data set.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Parameter Syntax to Position\nor Row Numbers in the Parameter\nVector or Table — pars_id","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Parameter Syntax to Position\nor Row Numbers in the Parameter\nVector or Table — pars_id","text":"","code":"dat <- sem_dat  library(lavaan) sem_model <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   f1 f3 ~   f2 \"  fit_ng <- sem(sem_model, dat)  pars <- c(\"f1 =~ x2\", \"f2 =~ x5\", \"f2 ~ f1\") tmp <- pars_id(pars, fit = fit_ng) coef(fit_ng)[tmp] #>    f1=~x2    f2=~x5     f2~f1  #> 0.5895183 0.7299536 1.1145114  tmp <- pars_id(pars, fit = fit_ng, where = \"partable\") parameterTable(fit_ng)[tmp, ] #>    id lhs op rhs user block group free ustart exo label plabel start   est #> 2   2  f1 =~  x2    1     1     1    1     NA   0         .p2. 0.684 0.590 #> 5   5  f2 =~  x5    1     1     1    3     NA   0         .p5. 0.978 0.730 #> 10 10  f2  ~  f1    1     1     1    7     NA   0        .p10. 0.000 1.115 #>       se #> 2  0.145 #> 5  0.099 #> 10 0.233  # Multiple-group models  dat <- sem_dat set.seed(64264) dat$gp <- sample(c(\"Alpha\", \"Beta\", \"Gamma\"),                  nrow(dat),                  replace = TRUE)  library(lavaan) sem_model <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   f1 f3 ~   f2 \"  fit_ng <- sem(sem_model, dat) fit_gp <- sem(sem_model, dat, group = \"gp\")  pars <- c(\"f1 =~ x2\", \"f2 =~ x5\", \"f2 ~ f1\") tmp <- pars_id(pars, fit = fit_ng) coef(fit_ng)[tmp] #>    f1=~x2    f2=~x5     f2~f1  #> 0.5895183 0.7299536 1.1145114  tmp <- pars_id(pars, fit = fit_ng, where = \"partable\") parameterTable(fit_ng)[tmp, ] #>    id lhs op rhs user block group free ustart exo label plabel start   est #> 2   2  f1 =~  x2    1     1     1    1     NA   0         .p2. 0.684 0.590 #> 5   5  f2 =~  x5    1     1     1    3     NA   0         .p5. 0.978 0.730 #> 10 10  f2  ~  f1    1     1     1    7     NA   0        .p10. 0.000 1.115 #>       se #> 2  0.145 #> 5  0.099 #> 10 0.233  pars <- c(\"f1 =~ x2\", \"f2 =~ c(NA, 1, NA) * x5\") tmp <- pars_id(pars, fit = fit_gp) coef(fit_gp)[tmp] #>    f1=~x2    f2=~x5 f1=~x2.g2 f1=~x2.g3 f2=~x5.g3  #> 0.4503424 0.8397750 0.6869992 1.6257211 0.4857651  tmp <- pars_id(pars, fit = fit_gp, where = \"partable\") parameterTable(fit_gp)[tmp, ] #>    id lhs op rhs user block group free ustart exo label plabel start   est #> 2   2  f1 =~  x2    1     1     1    1     NA   0         .p2. 0.453 0.450 #> 5   5  f2 =~  x5    1     1     1    3     NA   0         .p5. 0.578 0.840 #> 37 37  f1 =~  x2    1     2     2   30     NA   0        .p37. 0.538 0.687 #> 72 72  f1 =~  x2    1     3     3   59     NA   0        .p72. 1.703 1.626 #> 75 75  f2 =~  x5    1     3     3   61     NA   0        .p75. 1.210 0.486 #>       se #> 2  0.158 #> 5  0.137 #> 37 0.218 #> 72 1.114 #> 75 0.155  pars2 <- c(\"f1 =~ x2\", \"~~.Beta\", \"f2 =~ x5.Gamma\") tmp <- pars_id(pars2, fit = fit_gp) coef(fit_gp)[tmp] #>     f1=~x2     x1~~x1     x2~~x2     x3~~x3     x4~~x4     x5~~x5     x6~~x6  #> 0.45034240 1.14251961 0.96797675 0.74202425 0.63334211 0.72245573 0.98337279  #>     x7~~x7     x8~~x8     x9~~x9     f1~~f1     f2~~f2     f3~~f3  f1=~x2.g2  #> 1.15545837 1.12337264 1.06251947 1.01524121 0.66420675 0.08588945 0.68699918  #>  f1=~x2.g3  f2=~x5.g3  #> 1.62572111 0.48576515  tmp <- pars_id(pars2, fit = fit_gp, where = \"partable\") parameterTable(fit_gp)[tmp, ] #>    id lhs op rhs user block group free ustart exo label plabel start   est #> 2   2  f1 =~  x2    1     1     1    1     NA   0         .p2. 0.453 0.450 #> 12 12  x1 ~~  x1    0     1     1    9     NA   0        .p12. 1.079 1.143 #> 13 13  x2 ~~  x2    0     1     1   10     NA   0        .p13. 0.587 0.968 #> 14 14  x3 ~~  x3    0     1     1   11     NA   0        .p14. 0.656 0.742 #> 15 15  x4 ~~  x4    0     1     1   12     NA   0        .p15. 1.122 0.633 #> 16 16  x5 ~~  x5    0     1     1   13     NA   0        .p16. 0.929 0.722 #> 17 17  x6 ~~  x6    0     1     1   14     NA   0        .p17. 0.630 0.983 #> 18 18  x7 ~~  x7    0     1     1   15     NA   0        .p18. 0.639 1.155 #> 19 19  x8 ~~  x8    0     1     1   16     NA   0        .p19. 0.926 1.123 #> 20 20  x9 ~~  x9    0     1     1   17     NA   0        .p20. 1.012 1.063 #> 21 21  f1 ~~  f1    0     1     1   18     NA   0        .p21. 0.050 1.015 #> 22 22  f2 ~~  f2    0     1     1   19     NA   0        .p22. 0.050 0.664 #> 23 23  f3 ~~  f3    0     1     1   20     NA   0        .p23. 0.050 0.086 #> 37 37  f1 =~  x2    1     2     2   30     NA   0        .p37. 0.538 0.687 #> 72 72  f1 =~  x2    1     3     3   59     NA   0        .p72. 1.703 1.626 #> 75 75  f2 =~  x5    1     3     3   61     NA   0        .p75. 1.210 0.486 #>       se #> 2  0.158 #> 12 0.289 #> 13 0.175 #> 14 0.175 #> 15 0.225 #> 16 0.188 #> 17 0.173 #> 18 0.204 #> 19 0.303 #> 20 0.357 #> 21 0.375 #> 22 0.293 #> 23 0.080 #> 37 0.218 #> 72 1.114 #> 75 0.155 # Note that group 1 is \"Beta\", not \"Alpha\" lavInspect(fit_gp, \"group.label\") #> [1] \"Beta\"  \"Alpha\" \"Gamma\""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id_to_lorg.html","id":null,"dir":"Reference","previous_headings":"","what":"Ids to ","title":"Ids to ","text":"Converts id numbers generated pars_id() values can used extract parameters source.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id_to_lorg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ids to ","text":"","code":"pars_id_to_lorg(pars_id, pars_source, type = c(\"free\", \"all\"))"},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id_to_lorg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ids to ","text":"pars_id vector integers. Usually output pars_id. pars_source Can output lavaan::parameterEstimates() lavaan::parameterTable(), named vector free parameters (e.g., output coef() applied lavaan-class object). type meaning values pars_id. \"free\", position vector free parameters (.e., output coef()). \"\", row numbers parameter table (output lavaan::parameterTable()). pars_source output lavaan::parameterEstimates(), indicate whether parameter free fixed, argument ignored.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id_to_lorg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ids to ","text":"pars_source output lavaan::parameterEstimates() lavaan::parameterTable(), returns subset pars_source, keeping rows selected parameters columns lhs, op, rhs, group. pars_source named vector free parameters, returns character vector containing names selected parameters.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id_to_lorg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ids to ","text":"source parameter estimates table (.e., output lavaan::parameterEstimates(), returns data frame columns \"lhs\", \"op\", \"rhs\". \"group\" present source, also add column \"group\". columns can used uniquely identify parameters specified ids. source named vector parameters (e.g., output coef()), returns names parameters based ids.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/pars_id_to_lorg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ids to ","text":"","code":"dat <- sem_dat set.seed(64264) library(lavaan) sem_model <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~   f1 f3 ~   f2 \" fit_ng <- sem(sem_model, dat)  pars <- c(\"f1 =~ x2\", \"f2 =~ x5\", \"f2 ~ f1\") tmp <- pars_id(pars, fit = fit_ng) pars_id_to_lorg(tmp, pars_source = coef(fit_ng)) #> [1] \"f1=~x2\" \"f2=~x5\" \"f2~f1\"  tmp <- pars_id(pars, fit = fit_ng, where = \"partable\") pars_id_to_lorg(tmp, pars_source = parameterEstimates(fit_ng)) #>    lhs op rhs #> 2   f1 =~  x2 #> 5   f2 =~  x5 #> 10  f2  ~  f1  # Multiple-group models  dat$gp <- sample(c(\"Alpha\", \"Beta\", \"Gamma\"),                  nrow(dat),                  replace = TRUE)  fit_gp <- sem(sem_model, dat, group = \"gp\")  pars <- c(\"f1 =~ x2\", \"f2 =~ c(NA, 1, NA) * x5\") tmp <- pars_id(pars, fit = fit_gp) pars_id_to_lorg(tmp, pars_source = coef(fit_gp)) #> [1] \"f1=~x2\"    \"f2=~x5\"    \"f1=~x2.g2\" \"f1=~x2.g3\" \"f2=~x5.g3\" tmp <- pars_id(pars, fit = fit_gp, where = \"partable\") pars_id_to_lorg(tmp, pars_source = parameterEstimates(fit_gp)) #>    lhs op rhs group #> 2   f1 =~  x2     1 #> 5   f2 =~  x5     1 #> 37  f1 =~  x2     2 #> 72  f1 =~  x2     3 #> 75  f2 =~  x5     3  parameterTable(fit_gp)[tmp, ] #>    id lhs op rhs user block group free ustart exo label plabel start   est #> 2   2  f1 =~  x2    1     1     1    1     NA   0         .p2. 0.453 0.450 #> 5   5  f2 =~  x5    1     1     1    3     NA   0         .p5. 0.578 0.840 #> 37 37  f1 =~  x2    1     2     2   30     NA   0        .p37. 0.538 0.687 #> 72 72  f1 =~  x2    1     3     3   59     NA   0        .p72. 1.703 1.626 #> 75 75  f2 =~  x5    1     3     3   61     NA   0        .p75. 1.210 0.486 #>       se #> 2  0.158 #> 5  0.137 #> 37 0.218 #> 72 1.114 #> 75 0.155 pars2 <- c(\"f1 =~ x2\", \"~~.Beta\", \"f2 =~ x5.Gamma\") tmp <- pars_id(pars2, fit = fit_gp) pars_id_to_lorg(tmp, pars_source = coef(fit_gp)) #>  [1] \"f1=~x2\"    \"x1~~x1\"    \"x2~~x2\"    \"x3~~x3\"    \"x4~~x4\"    \"x5~~x5\"    #>  [7] \"x6~~x6\"    \"x7~~x7\"    \"x8~~x8\"    \"x9~~x9\"    \"f1~~f1\"    \"f2~~f2\"    #> [13] \"f3~~f3\"    \"f1=~x2.g2\" \"f1=~x2.g3\" \"f2=~x5.g3\" tmp <- pars_id(pars2, fit = fit_gp, where = \"partable\") pars_id_to_lorg(tmp, pars_source = parameterEstimates(fit_gp)) #>    lhs op rhs group #> 2   f1 =~  x2     1 #> 12  x1 ~~  x1     1 #> 13  x2 ~~  x2     1 #> 14  x3 ~~  x3     1 #> 15  x4 ~~  x4     1 #> 16  x5 ~~  x5     1 #> 17  x6 ~~  x6     1 #> 18  x7 ~~  x7     1 #> 19  x8 ~~  x8     1 #> 20  x9 ~~  x9     1 #> 21  f1 ~~  f1     1 #> 22  f2 ~~  f2     1 #> 23  f3 ~~  f3     1 #> 37  f1 =~  x2     2 #> 72  f1 =~  x2     3 #> 75  f2 =~  x5     3 # Note that group 1 is \"Beta\", not \"Alpha\" lavInspect(fit_gp, \"group.label\") #> [1] \"Beta\"  \"Alpha\" \"Gamma\""},{"path":"https://sfcheung.github.io/semfindr/reference/print.est_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an 'est_change' Class Object — print.est_change","title":"Print an 'est_change' Class Object — print.est_change","text":"Print content 'est_change'-class object.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.est_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an 'est_change' Class Object — print.est_change","text":"","code":"# S3 method for est_change print(x, digits = 3, first = 10, sort_by = c(\"gcd\", \"est\"), ...)"},{"path":"https://sfcheung.github.io/semfindr/reference/print.est_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an 'est_change' Class Object — print.est_change","text":"x 'est_change'-class object. digits number digits decimal. Default 3. first Numeric. NULL, prints first k cases, k equal first. Default 10. sort_by String. \"est\", \"gcd\", NULL. output generated est_change_raw() est_change_raw_approx() sort_by NULL, column sorted individually, case IDs inserted column. output generated est_change() est_change_approx() sort_by NULL, sort_by determines cases sorted. \"est\", cases sorted output est_change_raw(). \"gcd\", default output est_change() est_change_approx(), cases sorted generalized Cook's distance approximate generalized Cook's distance, depending column available. ... arguments. ignored.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.est_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an 'est_change' Class Object — print.est_change","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.est_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an 'est_change' Class Object — print.est_change","text":"functions case influence parameter estimates, est_change(), est_change_approx(), est_change_raw(), est_change_raw_approx(), return est_change-class object. method print output based type changes method used.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/reference/print.est_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an 'est_change' Class Object — print.est_change","text":"","code":"library(lavaan)  # A path model  dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>   # Approximate case influence out <- est_change_approx(fit) out #>  #> -- Approximate Standardized Case Influence on Parameter Estimates -- #>  #>     m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv gcd_approx #> 16   0.052 -0.038 -0.228 -0.006  0.572      0.372 #> 43  -0.387 -0.249 -0.135  0.201  0.116      0.270 #> 65   0.150  0.189  0.355  0.071  0.148      0.203 #> 85  -0.170  0.211 -0.118  0.315 -0.054      0.187 #> 51   0.405 -0.052  0.094  0.075 -0.046      0.179 #> 34  -0.306 -0.186 -0.110  0.176  0.028      0.163 #> 32  -0.241  0.190 -0.189  0.181 -0.002      0.161 #> 20  -0.234  0.199 -0.140  0.172 -0.034      0.144 #> 18  -0.269  0.035  0.101  0.246 -0.048      0.143 #> 100 -0.001 -0.221 -0.069  0.290 -0.058      0.137 #>  #> Note: #> - Changes are approximate standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by approximate generalized Cook's distance. print(out, sort_by = \"est\") #>  #> -- Approximate Standardized Case Influence on Parameter Estimates -- #>  #>    id m1~iv1  id m1~iv2 id  dv~m1  id m1~~m1 id dv~~dv  id gcd_approx #> 1  51  0.405  43 -0.249 65  0.355  61  0.335 16  0.572  16      0.372 #> 2  43 -0.387  94  0.230 11 -0.254  85  0.315  9  0.272  43      0.270 #> 3  34 -0.306 100 -0.221 16 -0.228 100  0.290 76  0.267  65      0.203 #> 4  18 -0.269  85  0.211 32 -0.189  18  0.246 25  0.264  85      0.187 #> 5  13  0.267  20  0.199 99  0.187  42  0.225 91  0.230  51      0.179 #> 6  32 -0.241  32  0.190 79  0.176  43  0.201 17  0.209  34      0.163 #> 7  20 -0.234  65  0.189 93  0.169  32  0.181 26  0.151  32      0.161 #> 8  75  0.200  34 -0.186 22  0.161  34  0.176 65  0.148  20      0.144 #> 9  42 -0.194  64 -0.165 61 -0.151  40  0.175 62  0.145  18      0.143 #> 10 68  0.174  52  0.161 25 -0.147  20  0.172 90  0.127 100      0.137 #>  #> Note: #> - Changes are approximate standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by the absolute values of change or approximate generalized Cook's distance. out <- est_change_raw_approx(fit) print(out, first = 3) #>  #> -- Approximate Case Influence on Parameter Estimates -- #>  #>   id m1~iv1  id m1~iv2 id  dv~m1  id m1~~m1 id dv~~dv #> 1 51  0.042  43 -0.025 65  0.037  61  0.042 16  0.106 #> 2 43 -0.040  94  0.023 11 -0.027  85  0.040  9  0.050 #> 3 34 -0.032 100 -0.022 16 -0.024 100  0.037 76  0.049 #>  #> Note: #> - Changes are approximate raw changes if a case is included. #> - Only the first 3 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by the absolute changes for each variable.  # Examine four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = c(2, 3, 5, 7)) #> The expected CPU time is 0.15 second(s). #> Could be faster if run in parallel. est_change(fit_rerun) #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>       a1     a2      b m1~~m1 dv~~dv   gcd #> 7 -0.119  0.073  0.065 -0.002 -0.040 0.026 #> 5  0.067  0.028  0.033  0.050 -0.066 0.013 #> 3 -0.038 -0.040 -0.030 -0.063 -0.045 0.010 #> 2  0.007  0.003 -0.013 -0.067 -0.058 0.008 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance. est_change_raw(fit_rerun) #>  #> -- Case Influence on Parameter Estimates -- #>  #>   id m1~iv1 id m1~iv2 id  dv~m1 id m1~~m1 id dv~~dv id    a1b id    a2b #> 1  7 -0.013  7  0.007  7  0.007  2 -0.009  5 -0.013  7 -0.005  7  0.007 #> 2  5  0.007  3 -0.004  5  0.004  3 -0.008  2 -0.011  5  0.004  3 -0.004 #> 3  3 -0.004  5  0.003  3 -0.003  5  0.006  3 -0.008  3 -0.003  5  0.003 #> 4  2  0.001  2  0.000  2 -0.001  7  0.000  7 -0.008  2  0.000  2 -0.001 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable."},{"path":"https://sfcheung.github.io/semfindr/reference/print.fit_measures_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a 'fit_measures_change' Class Object — print.fit_measures_change","title":"Print a 'fit_measures_change' Class Object — print.fit_measures_change","text":"Print content 'fit_measures_change'-class object.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.fit_measures_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a 'fit_measures_change' Class Object — print.fit_measures_change","text":"","code":"# S3 method for fit_measures_change print(   x,   digits = 3,   first = 10,   sort_by = NULL,   decreasing = TRUE,   absolute = TRUE,   ... )"},{"path":"https://sfcheung.github.io/semfindr/reference/print.fit_measures_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a 'fit_measures_change' Class Object — print.fit_measures_change","text":"x 'fit_measures_change'-class object. digits number digits decimal. Default 3. first Numeric. NULL, prints first k cases, k equal first. Default 10. sort_by String. Default NULL output sorted. set column names x, cases sorted columns. sorting done absolute values absolute TRUE, decreasing order decreasing TRUE. decrease FALSE, order increasing. absolute FALSE, sorting done raw values. decreasing Logical. Whether cases, sorted, decreasing order. Default TRUE. See sort_by. absolute Logical. Whether cases, sorted, sorted absolute values. Default TRUE. See sort_by. ... arguments. ignored.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.fit_measures_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a 'fit_measures_change' Class Object — print.fit_measures_change","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.fit_measures_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a 'fit_measures_change' Class Object — print.fit_measures_change","text":"functions case influence fit measures, fit_measures_change() fit_measures_change_approx(), return fit_measures_change-class object. method print output, option sort cases.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/reference/print.fit_measures_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a 'fit_measures_change' Class Object — print.fit_measures_change","text":"","code":"library(lavaan)  # A path model  dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>   # Case influence out <- fit_measures_change_approx(fit) out #>  #> -- Approximate Case Influence on Fit Measures -- #>  #>     chisq    cfi  rmsea    tli #> 1   0.160 -0.002  0.002 -0.005 #> 2  -0.019  0.001 -0.001  0.003 #> 3  -0.389  0.008 -0.007  0.019 #> 4  -0.151  0.004 -0.003  0.009 #> 5   0.097  0.000  0.001  0.001 #> 6   0.116 -0.001  0.001 -0.003 #> 7  -0.596  0.013 -0.010  0.032 #> 8   0.119  0.002  0.001  0.005 #> 9   0.543 -0.012  0.008 -0.031 #> 10  0.703 -0.013  0.011 -0.033 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. print(out, sort_by = \"chisq\", first = 5) #>  #> -- Approximate Case Influence on Fit Measures -- #>  #>     chisq    cfi  rmsea    tli #> 91  1.846 -0.035  0.033 -0.089 #> 25  1.621 -0.032  0.029 -0.080 #> 43  1.392 -0.031  0.024 -0.078 #> 17 -1.389  0.023 -0.022  0.058 #> 16 -1.283  0.016 -0.021  0.039 #>  #> Note: #> - Only the first 5 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by chisq in decreasing order on absolute values.  fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = c(2, 3, 5, 7))#' #> The expected CPU time is 0.15 second(s). #> Could be faster if run in parallel. out <- fit_measures_change(fit_rerun) out #>  #> -- Case Influence on Fit Measures -- #>  #>    chisq   cfi  rmsea   tli #> 2 -0.019 0.001 -0.001 0.003 #> 3 -0.417 0.008 -0.007 0.021 #> 5  0.097 0.000  0.001 0.001 #> 7 -0.631 0.014 -0.011 0.034 #>  #> Note: #> - All stored cases are displayed. print(out, sort_by = \"chisq\", first = 5) #>  #> -- Case Influence on Fit Measures -- #>  #>    chisq   cfi  rmsea   tli #> 7 -0.631 0.014 -0.011 0.034 #> 3 -0.417 0.008 -0.007 0.021 #> 5  0.097 0.000  0.001 0.001 #> 2 -0.019 0.001 -0.001 0.003 #>  #> Note: #> - All stored cases are displayed. #> - Cases sorted by chisq in decreasing order on absolute values."},{"path":"https://sfcheung.github.io/semfindr/reference/print.influence_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an 'influence_stat' Class Object — print.influence_stat","title":"Print an 'influence_stat' Class Object — print.influence_stat","text":"Print content 'influence_stat'-class object.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.influence_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an 'influence_stat' Class Object — print.influence_stat","text":"","code":"# S3 method for influence_stat print(   x,   digits = 3,   what = c(\"parameters\", \"fit_measures\", \"mahalanobis\"),   first = 10,   sort_parameters_by = c(\"gcd\", \"est\"),   sort_fit_measures_by = NULL,   sort_mahalanobis = TRUE,   sort_fit_measures_decreasing = TRUE,   sort_fit_measures_on_absolute = TRUE,   sort_mahalanobis_decreasing = TRUE,   ... )"},{"path":"https://sfcheung.github.io/semfindr/reference/print.influence_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an 'influence_stat' Class Object — print.influence_stat","text":"x 'influence_stat'-class object. digits number digits decimal. Default 3. character vector results #' printed, can one following: \"parameters\", \"fit_measures\", \"mahalanobis\". Default c(\"parameters\", \"fit_measures\", \"mahalanobis\"). first Numeric. NULL, prints first k cases, k equal first. Default 10. sort_parameters_by String. \"est\", cases sorted individually columns. \"gcd\", default, cases sorted generalized Cook's distance approximate generalized Cook's distance, depending column available. NULL, cases sorted. sort_fit_measures_by String. Default NULL output case influence fit measures sorted. set column names case influence fit measures , cases sorted columns. sorting done absolute values sort_fit_measures_on_absolute TRUE, decreasing order decreasing TRUE. decrease FALSE, order increasing. sort_fit_measures_on_absolute FALSE, sorting done raw values. sort_mahalanobis Logical. TRUE, default, cases output Mahalanobis distance sorted based Mahalanobis distance. order determined sort_mahalanobis_decreasing. sort_fit_measures_decreasing Logical. Whether cases, sorted fit measures, decreasing order output case influence fit measures. Default TRUE. sort_fit_measures_on_absolute Logical. Whether cases, sorted fit measures, sorted absolute values fit measures. Default TRUE. See sort_fit_measures_by. sort_mahalanobis_decreasing Logical. Whether cases, sorted Mahalanobis distance, decreasing order. Default TRUE. ... Optional arguments. Passed print methods, print.est_change(), print.fit_measures_change(), print.md_semfindr().","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.influence_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an 'influence_stat' Class Object — print.influence_stat","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.influence_stat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an 'influence_stat' Class Object — print.influence_stat","text":"method print output influence_stat() user-friendly way. Users can select set(s) output, case influence parameter estimates, case influence fit measures, Mahalanobis distance, printed. corresponding print methods est_change-class objects, fit_measures_change-class objects, md_semfindr-class objects called.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/reference/print.influence_stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an 'influence_stat' Class Object — print.influence_stat","text":"","code":"library(lavaan) dat <- pa_dat # The model mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>   # --- Leave-One-Out Approach  # Fit the model n times. Each time with one case removed. # For illustration, do this only for selected cases. fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.38 second(s). #> Could be faster if run in parallel. # Get all default influence stats out <- influence_stat(fit_rerun) out #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>        a1     a2      b m1~~m1 dv~~dv   gcd #> 9  -0.048 -0.025 -0.083 -0.033  0.283 0.091 #> 7  -0.119  0.073  0.065 -0.002 -0.040 0.026 #> 8   0.058  0.067  0.028 -0.052 -0.067 0.015 #> 10 -0.055  0.041 -0.077 -0.054  0.038 0.015 #> 5   0.067  0.028  0.033  0.050 -0.066 0.013 #> 3  -0.038 -0.040 -0.030 -0.063 -0.045 0.010 #> 2   0.007  0.003 -0.013 -0.067 -0.058 0.008 #> 6   0.004  0.001  0.010 -0.069 -0.054 0.008 #> 1   0.024 -0.030  0.052 -0.037  0.017 0.006 #> 4  -0.024 -0.003  0.022 -0.051 -0.044 0.006 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance. #>  #> -- Case Influence on Fit Measures -- #>  #>     chisq    cfi  rmsea    tli #> 1   0.154 -0.002  0.002 -0.005 #> 2  -0.019  0.001 -0.001  0.003 #> 3  -0.417  0.008 -0.007  0.021 #> 4  -0.154  0.004 -0.003  0.009 #> 5   0.097  0.000  0.001  0.001 #> 6   0.116 -0.001  0.001 -0.003 #> 7  -0.631  0.014 -0.011  0.034 #> 8   0.120  0.002  0.001  0.005 #> 9   0.524 -0.012  0.008 -0.030 #> 10  0.697 -0.013  0.011 -0.033 #>  #> Note: #> - All stored cases are displayed. #>  #> -- Mahalanobis Distance -- #>  #>       md #> 9  5.304 #> 7  4.017 #> 3  3.787 #> 10 3.104 #> 8  3.005 #> 5  1.980 #> 1  1.911 #> 4  1.065 #> 2  0.444 #> 6  0.288 #>  #> Note: #> - All stored cases are displayed. #> - Cases sorted by Mahalanobis distance in decreasing order. print(out, first = 4) #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>        a1     a2      b m1~~m1 dv~~dv   gcd #> 9  -0.048 -0.025 -0.083 -0.033  0.283 0.091 #> 7  -0.119  0.073  0.065 -0.002 -0.040 0.026 #> 8   0.058  0.067  0.028 -0.052 -0.067 0.015 #> 10 -0.055  0.041 -0.077 -0.054  0.038 0.015 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - Only the first 4 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by generalized Cook's distance. #>  #> -- Case Influence on Fit Measures -- #>  #>    chisq    cfi  rmsea    tli #> 1  0.154 -0.002  0.002 -0.005 #> 2 -0.019  0.001 -0.001  0.003 #> 3 -0.417  0.008 -0.007  0.021 #> 4 -0.154  0.004 -0.003  0.009 #>  #> Note: #> - Only the first 4 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #>  #> -- Mahalanobis Distance -- #>  #>       md #> 9  5.304 #> 7  4.017 #> 3  3.787 #> 10 3.104 #>  #> Note: #> - Only the first 4 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order. print(out, what = c(\"parameters\", \"fit_measures\")) #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>        a1     a2      b m1~~m1 dv~~dv   gcd #> 9  -0.048 -0.025 -0.083 -0.033  0.283 0.091 #> 7  -0.119  0.073  0.065 -0.002 -0.040 0.026 #> 8   0.058  0.067  0.028 -0.052 -0.067 0.015 #> 10 -0.055  0.041 -0.077 -0.054  0.038 0.015 #> 5   0.067  0.028  0.033  0.050 -0.066 0.013 #> 3  -0.038 -0.040 -0.030 -0.063 -0.045 0.010 #> 2   0.007  0.003 -0.013 -0.067 -0.058 0.008 #> 6   0.004  0.001  0.010 -0.069 -0.054 0.008 #> 1   0.024 -0.030  0.052 -0.037  0.017 0.006 #> 4  -0.024 -0.003  0.022 -0.051 -0.044 0.006 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by generalized Cook's distance. #>  #> -- Case Influence on Fit Measures -- #>  #>     chisq    cfi  rmsea    tli #> 1   0.154 -0.002  0.002 -0.005 #> 2  -0.019  0.001 -0.001  0.003 #> 3  -0.417  0.008 -0.007  0.021 #> 4  -0.154  0.004 -0.003  0.009 #> 5   0.097  0.000  0.001  0.001 #> 6   0.116 -0.001  0.001 -0.003 #> 7  -0.631  0.014 -0.011  0.034 #> 8   0.120  0.002  0.001  0.005 #> 9   0.524 -0.012  0.008 -0.030 #> 10  0.697 -0.013  0.011 -0.033 #>  #> Note: #> - All stored cases are displayed.  # --- Approximate Approach  out_approx <- influence_stat(fit) out_approx #>  #> -- Approximate Standardized Case Influence on Parameter Estimates -- #>  #>     m1~iv1 m1~iv2  dv~m1 m1~~m1 dv~~dv gcd_approx #> 16   0.052 -0.038 -0.228 -0.006  0.572      0.372 #> 43  -0.387 -0.249 -0.135  0.201  0.116      0.270 #> 65   0.150  0.189  0.355  0.071  0.148      0.203 #> 85  -0.170  0.211 -0.118  0.315 -0.054      0.187 #> 51   0.405 -0.052  0.094  0.075 -0.046      0.179 #> 34  -0.306 -0.186 -0.110  0.176  0.028      0.163 #> 32  -0.241  0.190 -0.189  0.181 -0.002      0.161 #> 20  -0.234  0.199 -0.140  0.172 -0.034      0.144 #> 18  -0.269  0.035  0.101  0.246 -0.048      0.143 #> 100 -0.001 -0.221 -0.069  0.290 -0.058      0.137 #>  #> Note: #> - Changes are approximate standardized raw changes if a case is included. #> - Only the first 10 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by approximate generalized Cook's distance. #>  #> -- Approximate Case Influence on Fit Measures -- #>  #>     chisq    cfi  rmsea    tli #> 1   0.160 -0.002  0.002 -0.005 #> 2  -0.019  0.001 -0.001  0.003 #> 3  -0.389  0.008 -0.007  0.019 #> 4  -0.151  0.004 -0.003  0.009 #> 5   0.097  0.000  0.001  0.001 #> 6   0.116 -0.001  0.001 -0.003 #> 7  -0.596  0.013 -0.010  0.032 #> 8   0.119  0.002  0.001  0.005 #> 9   0.543 -0.012  0.008 -0.031 #> 10  0.703 -0.013  0.011 -0.033 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #>  #> -- Mahalanobis Distance -- #>  #>        md #> 16 11.530 #> 99 11.312 #> 87 11.091 #> 43 10.181 #> 51  9.869 #> 13  8.476 #> 91  8.078 #> 71  7.757 #> 17  7.555 #> 68  7.472 #>  #> Note: #> - Only the first 10 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order. print(out, first = 8) #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>        a1     a2      b m1~~m1 dv~~dv   gcd #> 9  -0.048 -0.025 -0.083 -0.033  0.283 0.091 #> 7  -0.119  0.073  0.065 -0.002 -0.040 0.026 #> 8   0.058  0.067  0.028 -0.052 -0.067 0.015 #> 10 -0.055  0.041 -0.077 -0.054  0.038 0.015 #> 5   0.067  0.028  0.033  0.050 -0.066 0.013 #> 3  -0.038 -0.040 -0.030 -0.063 -0.045 0.010 #> 2   0.007  0.003 -0.013 -0.067 -0.058 0.008 #> 6   0.004  0.001  0.010 -0.069 -0.054 0.008 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - Only the first 8 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by generalized Cook's distance. #>  #> -- Case Influence on Fit Measures -- #>  #>    chisq    cfi  rmsea    tli #> 1  0.154 -0.002  0.002 -0.005 #> 2 -0.019  0.001 -0.001  0.003 #> 3 -0.417  0.008 -0.007  0.021 #> 4 -0.154  0.004 -0.003  0.009 #> 5  0.097  0.000  0.001  0.001 #> 6  0.116 -0.001  0.001 -0.003 #> 7 -0.631  0.014 -0.011  0.034 #> 8  0.120  0.002  0.001  0.005 #>  #> Note: #> - Only the first 8 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #>  #> -- Mahalanobis Distance -- #>  #>       md #> 9  5.304 #> 7  4.017 #> 3  3.787 #> 10 3.104 #> 8  3.005 #> 5  1.980 #> 1  1.911 #> 4  1.065 #>  #> Note: #> - Only the first 8 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order. print(out, what = c(\"parameters\", \"fit_measures\"),       sort_parameters_by = \"est\") #>  #> -- Standardized Case Influence on Parameter Estimates -- #>  #>    id     a1 id     a2 id      b id m1~~m1 id dv~~dv id   gcd #> 1   7 -0.119  7  0.073  9 -0.083  6 -0.069  9  0.283  9 0.091 #> 2   5  0.067  8  0.067 10 -0.077  2 -0.067  8 -0.067  7 0.026 #> 3   8  0.058 10  0.041  7  0.065  3 -0.063  5 -0.066  8 0.015 #> 4  10 -0.055  3 -0.040  1  0.052 10 -0.054  2 -0.058 10 0.015 #> 5   9 -0.048  1 -0.030  5  0.033  8 -0.052  6 -0.054  5 0.013 #> 6   3 -0.038  5  0.028  3 -0.030  4 -0.051  3 -0.045  3 0.010 #> 7   1  0.024  9 -0.025  8  0.028  5  0.050  4 -0.044  2 0.008 #> 8   4 -0.024  2  0.003  4  0.022  1 -0.037  7 -0.040  6 0.008 #> 9   2  0.007  4 -0.003  2 -0.013  9 -0.033 10  0.038  1 0.006 #> 10  6  0.004  6  0.001  6  0.010  7 -0.002  1  0.017  4 0.006 #>  #> Note: #> - Changes are standardized raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute values of change or generalized Cook's distance. #>  #> -- Case Influence on Fit Measures -- #>  #>     chisq    cfi  rmsea    tli #> 1   0.154 -0.002  0.002 -0.005 #> 2  -0.019  0.001 -0.001  0.003 #> 3  -0.417  0.008 -0.007  0.021 #> 4  -0.154  0.004 -0.003  0.009 #> 5   0.097  0.000  0.001  0.001 #> 6   0.116 -0.001  0.001 -0.003 #> 7  -0.631  0.014 -0.011  0.034 #> 8   0.120  0.002  0.001  0.005 #> 9   0.524 -0.012  0.008 -0.030 #> 10  0.697 -0.013  0.011 -0.033 #>  #> Note: #> - All stored cases are displayed."},{"path":"https://sfcheung.github.io/semfindr/reference/print.lavaan_rerun.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for 'lavaan_rerun' — print.lavaan_rerun","title":"Print Method for 'lavaan_rerun' — print.lavaan_rerun","text":"Prints results lavaan_rerun().","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.lavaan_rerun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for 'lavaan_rerun' — print.lavaan_rerun","text":"","code":"# S3 method for lavaan_rerun print(x, ...)"},{"path":"https://sfcheung.github.io/semfindr/reference/print.lavaan_rerun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for 'lavaan_rerun' — print.lavaan_rerun","text":"x output lavaan_rerun(). ... arguments. ignored.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.lavaan_rerun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for 'lavaan_rerun' — print.lavaan_rerun","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.lavaan_rerun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for 'lavaan_rerun' — print.lavaan_rerun","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.lavaan_rerun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for 'lavaan_rerun' — print.lavaan_rerun","text":"","code":"library(lavaan) dat <- pa_dat # For illustration only, select only the first 50 cases dat <- dat[1:50, ] # The model mod <- \" m1 ~ iv1 + iv2 dv ~ m1 \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 1.768 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.413 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1              -0.159    0.166   -0.954    0.340 #>     iv2               0.525    0.162    3.241    0.001 #>   dv ~                                                 #>     m1                0.350    0.161    2.169    0.030 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.901    0.180    5.000    0.000 #>    .dv                1.423    0.285    5.000    0.000 #>  # Fit the model n times. Each time with one case removed. fit_rerun <- lavaan_rerun(fit, parallel = FALSE) #> The expected CPU time is 1.85 second(s). #> Could be faster if run in parallel. fit_rerun #> === lavaan_rerun Output === #> Call: #> lavaan_rerun(fit = fit, parallel = FALSE) #> Number of reruns: 50 #> Number of reruns that converged (solution found): 50 #> Number of reruns that failed to converge (solution not found): 0 #> Number of reruns that passed post.check of lavaan: 50 #> Number of reruns that failed post.check of lavaan: 0 #> Number of reruns that both converged and passed post.check: 50 #> Number of reruns that either did not converge or failed post.check: 0"},{"path":"https://sfcheung.github.io/semfindr/reference/print.md_semfindr.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a 'md_semfindr' Class Object — print.md_semfindr","title":"Print a 'md_semfindr' Class Object — print.md_semfindr","text":"Print content 'md_semfindr'-class object.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.md_semfindr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a 'md_semfindr' Class Object — print.md_semfindr","text":"","code":"# S3 method for md_semfindr print(x, digits = 3, first = 10, sort = TRUE, decreasing = TRUE, ...)"},{"path":"https://sfcheung.github.io/semfindr/reference/print.md_semfindr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a 'md_semfindr' Class Object — print.md_semfindr","text":"x 'md_semfindr'-class object. digits number digits decimal. Default 3. first Numeric. NULL, prints first k cases, k equal first. Default 10. sort Logical. TRUE, default, cases sorted based Mahalanobis distance. order determined decreasing. decreasing Logical. Whether cases, sorted, decreasing order. Default TRUE. ... arguments. ignored.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.md_semfindr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a 'md_semfindr' Class Object — print.md_semfindr","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/print.md_semfindr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a 'md_semfindr' Class Object — print.md_semfindr","text":"print method 'md_semfindr'-class object, returned mahalanobis_rerun() mahalanobis_predictors(). method print output option sort cases.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/reference/print.md_semfindr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a 'md_semfindr' Class Object — print.md_semfindr","text":"","code":"library(lavaan) dat <- pa_dat # The model mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 \" # Fit the model fit <- lavaan::sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  # Fit the model n times. Each time with one case removed. # For illustration, do this only for selected cases. fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = 1:10) #> The expected CPU time is 0.38 second(s). #> Could be faster if run in parallel. # Compute the Mahalanobis distance for each case out <- mahalanobis_rerun(fit_rerun) out #>  #> -- Mahalanobis Distance -- #>  #>       md #> 9  5.304 #> 7  4.017 #> 3  3.787 #> 10 3.104 #> 8  3.005 #> 5  1.980 #> 1  1.911 #> 4  1.065 #> 2  0.444 #> 6  0.288 #>  #> Note: #> - All stored cases are displayed. #> - Cases sorted by Mahalanobis distance in decreasing order. print(out, first = 3) #>  #> -- Mahalanobis Distance -- #>  #>      md #> 9 5.304 #> 7 4.017 #> 3 3.787 #>  #> Note: #> - Only the first 3 case(s) is/are displayed. Set ‘first’ to NULL to display all cases. #> - Cases sorted by Mahalanobis distance in decreasing order."},{"path":"https://sfcheung.github.io/semfindr/reference/sem_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Data: A Latent Variable Structural Model — sem_dat","title":"Sample Data: A Latent Variable Structural Model — sem_dat","text":"nine-variable dataset 200 cases.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/sem_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Data: A Latent Variable Structural Model — sem_dat","text":"","code":"sem_dat"},{"path":"https://sfcheung.github.io/semfindr/reference/sem_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Data: A Latent Variable Structural Model — sem_dat","text":"data frame 200 rows 9 variables: x1 Indicator. Numeric. x2 Indicator. Numeric. x3 Indicator. Numeric. x4 Indicator. Numeric. x5 Indicator. Numeric. x6 Indicator. Numeric. x7 Indicator. Numeric. x8 Indicator. Numeric. x9 Indicator. Numeric.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/sem_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Data: A Latent Variable Structural Model — sem_dat","text":"","code":"library(lavaan) data(sem_dat) mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~ a * f1 f3 ~ b * f2 ab := a * b \" fit <- sem(mod, sem_dat) summary(fit) #> lavaan 0.6.17 ended normally after 37 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        20 #>  #>   Number of observations                           200 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                41.768 #>   Degrees of freedom                                25 #>   P-value (Chi-square)                           0.019 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                0.590    0.145    4.054    0.000 #>     x3                0.808    0.168    4.812    0.000 #>   f2 =~                                                #>     x4                1.000                            #>     x5                0.730    0.099    7.400    0.000 #>     x6                0.429    0.083    5.166    0.000 #>   f3 =~                                                #>     x7                1.000                            #>     x8                2.019    0.589    3.426    0.001 #>     x9                2.747    0.788    3.486    0.000 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f2 ~                                                 #>     f1         (a)    1.115    0.233    4.788    0.000 #>   f3 ~                                                 #>     f2         (b)    0.206    0.061    3.394    0.001 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                1.183    0.173    6.831    0.000 #>    .x2                1.129    0.127    8.909    0.000 #>    .x3                1.027    0.134    7.667    0.000 #>    .x4                0.833    0.173    4.812    0.000 #>    .x5                1.078    0.140    7.714    0.000 #>    .x6                1.234    0.132    9.367    0.000 #>    .x7                1.056    0.112    9.428    0.000 #>    .x8                1.042    0.139    7.478    0.000 #>    .x9                1.077    0.197    5.470    0.000 #>     f1                0.658    0.190    3.474    0.001 #>    .f2                0.647    0.215    3.010    0.003 #>    .f3                0.062    0.035    1.771    0.077 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     ab                0.230    0.079    2.895    0.004 #>"},{"path":"https://sfcheung.github.io/semfindr/reference/sem_dat2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Data: A Latent Variable Structural Model\nWith an Influential Case — sem_dat2","title":"Sample Data: A Latent Variable Structural Model\nWith an Influential Case — sem_dat2","text":"ten-variable dataset 200 cases, one influential case.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/sem_dat2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Data: A Latent Variable Structural Model\nWith an Influential Case — sem_dat2","text":"","code":"sem_dat2"},{"path":"https://sfcheung.github.io/semfindr/reference/sem_dat2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Data: A Latent Variable Structural Model\nWith an Influential Case — sem_dat2","text":"data frame 200 rows 10 variables: case_id Case ID. Character. x1 Indicator. Numeric. x2 Indicator. Numeric. x3 Indicator. Numeric. x4 Indicator. Numeric. x5 Indicator. Numeric. x6 Indicator. Numeric. x7 Indicator. Numeric. x8 Indicator. Numeric. x9 Indicator. Numeric.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/sem_dat2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Data: A Latent Variable Structural Model\nWith an Influential Case — sem_dat2","text":"","code":"library(lavaan) data(sem_dat2) mod <- \" f1 =~  x1 + x2 + x3 f2 =~  x4 + x5 + x6 f3 =~  x7 + x8 + x9 f2 ~ a * f1 f3 ~ b * f2 ab := a * b \" fit <- sem(mod, sem_dat2) summary(fit) #> lavaan 0.6.17 ended normally after 30 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        20 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                42.050 #>   Degrees of freedom                                25 #>   P-value (Chi-square)                           0.018 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                1.533    0.412    3.722    0.000 #>     x3                1.382    0.364    3.799    0.000 #>   f2 =~                                                #>     x4                1.000                            #>     x5                1.341    0.241    5.563    0.000 #>     x6                1.302    0.230    5.654    0.000 #>   f3 =~                                                #>     x7                1.000                            #>     x8                1.652    0.309    5.346    0.000 #>     x9                1.067    0.209    5.104    0.000 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f2 ~                                                 #>     f1         (a)    0.507    0.198    2.554    0.011 #>   f3 ~                                                 #>     f2         (b)    0.528    0.151    3.497    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                0.660    0.109    6.041    0.000 #>    .x2                0.416    0.133    3.125    0.002 #>    .x3                0.564    0.127    4.448    0.000 #>    .x4                0.544    0.091    5.973    0.000 #>    .x5                0.478    0.103    4.628    0.000 #>    .x6                0.298    0.083    3.586    0.000 #>    .x7                0.484    0.085    5.690    0.000 #>    .x8                0.357    0.137    2.606    0.009 #>    .x9                0.515    0.092    5.572    0.000 #>     f1                0.230    0.102    2.260    0.024 #>    .f2                0.291    0.096    3.040    0.002 #>    .f3                0.232    0.077    3.000    0.003 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     ab                0.268    0.118    2.270    0.023 #>  inf_out <- influence_stat(fit) gcd_plot(inf_out)"},{"path":"https://sfcheung.github.io/semfindr/reference/semfindr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"semfindr: Influential Cases in Structural Equation Modeling — semfindr-package","title":"semfindr: Influential Cases in Structural Equation Modeling — semfindr-package","text":"Sensitivity analysis structural equation modeling using influence measures diagnostic plots. Support leave-one-casewise sensitivity analysis presented Pek MacCallum (2011) doi:10.1080/00273171.2011.561068  approximate casewise influence using scores casewise likelihood.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/reference/semfindr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semfindr: Influential Cases in Structural Equation Modeling — semfindr-package","text":"Maintainer: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) Authors: Mark Hok Chio Lai marklhc@gmail.com  (ORCID)","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/user_change_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Influence on User-Defined Statistics — user_change_raw","title":"Case Influence on User-Defined Statistics — user_change_raw","text":"Gets lavaan_rerun() output computes changes user-defined statistics case included.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/user_change_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case Influence on User-Defined Statistics — user_change_raw","text":"","code":"user_change_raw(rerun_out, user_function = NULL, ...)"},{"path":"https://sfcheung.github.io/semfindr/reference/user_change_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case Influence on User-Defined Statistics — user_change_raw","text":"rerun_out output lavaan_rerun(). user_function function accepts lavaan-class object. function computing user-defined statistics. ... Optional arguments passed user_function.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/user_change_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case Influence on User-Defined Statistics — user_change_raw","text":"est_change-class object, matrix number columns equals number values returned user_function computed one lavaan-class object, number rows equals number cases. row names case identification values used lavaan_rerun(). elements raw differences. print method available user-friendly output.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/user_change_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case Influence on User-Defined Statistics — user_change_raw","text":"case, user_change_raw() computes differences user-defined statistics without case: (User statistics case) - (User statistics without case). change raw change. change divided standard error. measure influence case use-defined statistics included. value case positive, including case increases statistic. value case negative, including case decreases statistic. user-defined statistics computed user-supplied function, user_function. must return named vector-like object (can one value). output needs named, even one value.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/user_change_raw.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Case Influence on User-Defined Statistics — user_change_raw","text":"Pek, J., & MacCallum, R. (2011). Sensitivity analysis structural equation models: Cases influence. Multivariate Behavioral Research, 46(2), 202-228. doi:10.1080/00273171.2011.561068","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/user_change_raw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Case Influence on User-Defined Statistics — user_change_raw","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semfindr/reference/user_change_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case Influence on User-Defined Statistics — user_change_raw","text":"","code":"# A path model  library(lavaan) dat <- pa_dat mod <- \" m1 ~ a1 * iv1 + a2 * iv2 dv ~ b * m1 a1b := a1 * b a2b := a2 * b \" # Fit the model fit <- sem(mod, dat) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 6.711 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.035 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m1 ~                                                 #>     iv1       (a1)    0.215    0.106    2.036    0.042 #>     iv2       (a2)    0.522    0.099    5.253    0.000 #>   dv ~                                                 #>     m1         (b)    0.517    0.106    4.895    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m1                0.903    0.128    7.071    0.000 #>    .dv                1.321    0.187    7.071    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b               0.111    0.059    1.880    0.060 #>     a2b               0.270    0.075    3.581    0.000 #>  # Fit the model several times. Each time with one case removed. # For illustration, do this only for four selected cases fit_rerun <- lavaan_rerun(fit, parallel = FALSE,                           to_rerun = c(2, 4, 7, 9)) #> The expected CPU time is 0.15 second(s). #> Could be faster if run in parallel. # Get the R-squares lavInspect(fit, what = \"rsquare\") #>    m1    dv  #> 0.237 0.193  out <- user_change_raw(fit_rerun,                        user_function = lavInspect,                        what = \"rsquare\") out #>  #> -- Case Influence on User Function -- #>  #>   id     m1 id     dv #> 1  9 -0.003  9 -0.013 #> 2  4 -0.001  7  0.005 #> 3  2  0.000  4  0.001 #> 4  7  0.000  2 -0.001 #>  #> Note: #> - Changes are raw changes if a case is included. #> - All stored cases are displayed. #> - Cases sorted by the absolute changes for each variable.  # Index plot p <- index_plot(out,                 column = \"dv\",                 plot_title = \"R-square: dv\") p"},{"path":[]},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"others-0-1-6-2","dir":"Changelog","previous_headings":"","what":"Others","title":"semfindr 0.1.6.2","text":"Updated two tests nonconvergence. check results generated directly calling lavaan functions. (0.1.6.1)","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"bug-fixes-0-1-6-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"semfindr 0.1.6.2","text":"Fixed bug listwise deletion lavaan_rerun(). (0.1.6.2)","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"semfindr-016","dir":"Changelog","previous_headings":"","what":"semfindr 0.1.6","title":"semfindr 0.1.6","text":"CRAN release: 2023-11-12","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"new-features-0-1-6","dir":"Changelog","previous_headings":"","what":"New Features","title":"semfindr 0.1.6","text":"Added index_plot() generating index plot arbitrary statistic. (0.1.5.5) Added user_change_raw() computing case influence user statistics. (0.1.5.8)","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"others-0-1-6","dir":"Changelog","previous_headings":"","what":"Others","title":"semfindr 0.1.6","text":"Fixed typos article multiple-group models. (0.1.5.1) Fixed pars_id(). Users can now use internal lavaan group labels (e.g., \".g2\", \".g3\") denote parameters group. method recommended (noted help page) included option. (0.1.5.2) Fixed error CRAN check due suggested packages installed. (0.1.5.3) Use lavaan::lavCor() estimate means correlations Mahalanobis distance missing data present. package norm2 longer needed suggested. (0.1.5.4) Made plot functions work NAs. (0.1.5.6) Updated README.md. (0.1.5.7) Finalized 0.1.6. (0.1.6)","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"semfindr-015","dir":"Changelog","previous_headings":"","what":"semfindr 0.1.5","title":"semfindr 0.1.5","text":"CRAN release: 2023-06-19","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"new-features-0-1-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"semfindr 0.1.5","text":"Added print method output est_change(), est_change_raw(), est_change_approx(), est_change_raw_approx(). (0.1.4.3, 0.1.4.16, 0.1.4.18, 0.1.4.19, 0.1.4.20) Added print method output fit_measures_change() fit_measures_change_approx(). (0.1.4.4, 0.1.4.16) Added print method output mahalanobis_rerun() mahalanobis_predictors() (0.1.4.5-0.1.4.6, 0.1.4.16, 0.1.4.18) Added print method output influence_stat(). (0.1.4.7) Provided initial support multiple-group models models linearity constraints. (0.1.4.8 - 0.1.4.14) Added support labels \":=\" pars_id(). (0.1.4.13)","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"others-0-1-5","dir":"Changelog","previous_headings":"","what":"Others","title":"semfindr 0.1.5","text":"Fixed pkgdown site. (0.1.4.1) approx_check() check model least one equality constraint. (0.1.4.2) Added “Limitations” section vignette approximate approach. (0.1.4.2) Fixed documentation pars_id(). (0.1.4.12) Added article multiple-group models. (0.1.4.15) Restructured articles references pgkdown websites. (0.1.4.15) print.lavaan_rerun(), keep format lavaan warnings. (0.1.4.17) Remark fit_measures_change_approx() supports selected fit measures. (0.1.4.21) Add cutoff_change largest_change est_change_gcd_plot(). (0.1.4.22) Updated tests parameters fixed model standardized versions free. (0.1.4.23) Updated vignettes articles links package website. (0.1.4.24) Updated vignettes new print methods. (0.1.4.25)","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"semfindr-014","dir":"Changelog","previous_headings":"","what":"semfindr 0.1.4","title":"semfindr 0.1.4","text":"CRAN release: 2023-02-17 Added DOI Pek MacCallum DESCRIPTION. (0.1.1.1) Added approx_check() check whether input object supported approximate method. (0.1.1.2) Added est_change_plot() est_change_gcd_plot(), diagnostic plots casewise influence parameter estimates. (0.1.1.3) Diagnostic plot functions revised allow users fully control elements drawn. (0.1.1.4) Fixed typos grammatical mistakes help pages vignettes. (0.1.1.5) Fixed invalid URI vignette (casewise_scores). (0.1.3) Added documentation return value pars_id_to_lorg(). (0.1.4)","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"semfindr-011","dir":"Changelog","previous_headings":"","what":"semfindr 0.1.1","title":"semfindr 0.1.1","text":"First public release. Added skip_all_checks lavaan_rerun(), allowing users experiment lavaan_rerun() functions models officially supported. Revised est_change() est_change_raw() support use operators (e.g., ~, =~) select parameters. Added badges R CMD Check Action. Updated est_change(), est_change_raw() est_change_approx() support models labelled parameters. (0.1.0.9005) Added pars_id() pars_id_to_lorg() converting parameter specification identification numbers ( positions vector coefficients row numbers parameter tables). (0.1.0.9006) Updated est_change_* functions use pars_id() pars_id_to_lorg(). (0.1.0.9007) Modified lavaan_rerun() use lavaan::lavaan() instead update() default way rerun. (0.1.0.9008). Updated tests. (0.1.0.9009) Added examples. (0.1.0.9010) Updated documentation (e.g., README DESCRIPTION). (0.1.0.9011) Updated influence_stat() plot functions support approximate approach. (0.1.0.9012) Updated documentation.","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"semfindr-010","dir":"Changelog","previous_headings":"","what":"semfindr 0.1.0","title":"semfindr 0.1.0","text":"Added vignettes. lavaan_rerun() can accept output inadmissible estimates. Disabled default. Can enabled setting allow_inadmissible TRUE.","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"semfindr-004","dir":"Changelog","previous_headings":"","what":"semfindr 0.0.4","title":"semfindr 0.0.4","text":"Added print method lavaan_rerun() class. Added mahalanobis_predictors() compute Mahalanobis distance using observed predictors. mahalanobis_predictors() mahalanobis_rerun() support datasets missing data. lavaan_rerun() can specify cases exclude rerun specifying case IDs selecting cases based Mahalanobis distance observed variables residuals observed variables path model.","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"semfindr-003","dir":"Changelog","previous_headings":"","what":"semfindr 0.0.3","title":"semfindr 0.0.3","text":"Used lavaan::update() lavaan_rerun. reliable recreating call. Added implied_scores(). supports single-group path analysis models now.","code":""},{"path":"https://sfcheung.github.io/semfindr/news/index.html","id":"semfindr-002","dir":"Changelog","previous_headings":"","what":"semfindr 0.0.2","title":"semfindr 0.0.2","text":"First internal testing release.","code":""}]
